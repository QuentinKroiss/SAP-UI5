"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPages = exports.V2AppProvider = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const appProvider_1 = require("../../../common/appProvider");
const common_1 = require("../common");
const listReport_1 = require("../pages/listReport");
const analyticalListPage_1 = require("../pages/analyticalListPage");
const objectPage_1 = require("../pages/objectPage");
const application_1 = require("../../application");
const common_2 = require("../../../common");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../../i18n/i18n");
const extensionLogger_1 = require("../../../../extensionLogger");
/**
 * Method which generates id for passed page
 * @param page - Generic Page object.
 * @param pageName - Page name in manifest. Used if entitySet is empty
 * @returns {string} Generated page id
 */
function generateId(page, pageName) {
    if (page.component?.name) {
        return (0, common_2.generatePageId)((0, common_2.getPageTypeV2)(page.component?.name), page.entitySet, undefined, pageName);
    }
    else {
        return pageName;
    }
}
function getPageConfigsAndNavigations(page, v2Page, flex, manifest, schemas, fragments, pages) {
    page.navigation = {};
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    const targets = getPagesAndConfigs(v2Page.pages, flex, manifest, schemas, fragments);
    for (const pageId in targets) {
        const target = targets[pageId];
        pages[pageId] = target;
    }
    for (const v2ChildPageName in v2Page.pages) {
        const id = generateId(v2Page.pages[v2ChildPageName], v2ChildPageName);
        if (page.entitySet) {
            page.navigation[id] = targets[id].navigationProperty
                ? `${page.entitySet}.${targets[id].navigationProperty}`
                : page.entitySet;
        }
        else {
            page.navigation[id] = targets[id].navigationProperty ? targets[id].navigationProperty : id;
        }
    }
}
/**
 * Sets up page definitions, including the configurations for them
 * @param {SapUiAppPagesV2} v2Pages - lisr of all pages
 * @param flex - list of flexibility changes
 * @param manifest - manifest.json of the app
 * @param schemas - list of all app-specific schemas
 * @param fragments - list of fragments
 * @param {ExtensionLogger} logger - logger for messages
 * @returns an index table of page definitions
 */
function getPagesAndConfigs(v2Pages, flex, manifest, schemas, fragments, logger) {
    const pages = {};
    for (const v2PageName in v2Pages) {
        const v2Page = v2Pages[v2PageName];
        const id = generateId(v2Page, v2PageName);
        if (!id) {
            continue;
        }
        const page = {
            pageType: (0, common_2.getPageTypeV2)(v2Page.component?.name),
            entitySet: v2Page.entitySet,
            ...(v2Page.navigationProperty && { navigationProperty: v2Page.navigationProperty }),
            ...(v2Page.defaultLayoutType && { defaultLayoutType: v2Page.defaultLayoutType })
        };
        pages[id] = page;
        // Get the JSON schema for the page. If no page specific schema exists, fall back top the generic schema for the page type
        const schemaKey = Object.keys(schemas).find((element) => element.includes(id)) ||
            Object.keys(schemas).find((element) => element.includes(id.slice(0, -1))) ||
            Object.keys(schemas).find((element) => element.includes(page.pageType));
        // convert settings to config
        if (schemaKey) {
            if (page.pageType === ux_specification_types_1.PageTypeV2.ListReport) {
                const importParameters = {
                    manifest,
                    flex,
                    jsonSchema: schemas[schemaKey],
                    fragments,
                    logger
                };
                page.config = (0, listReport_1.createListReportConfig)(importParameters);
            }
            else if (page.pageType === ux_specification_types_1.PageTypeV2.AnalyticalListPage) {
                const importParameters = {
                    manifest,
                    flex,
                    jsonSchema: schemas[schemaKey],
                    fragments,
                    logger
                };
                page.config = (0, analyticalListPage_1.createAnalyticalListPageConfig)(importParameters);
            }
            else {
                const importParameters = {
                    manifest,
                    flex,
                    jsonSchema: schemas[schemaKey],
                    entitySet: page.entitySet,
                    fragments,
                    logger
                };
                page.config = (0, objectPage_1.createObjectPageConfigV2)(importParameters);
            }
        }
        if (v2Page.pages) {
            getPageConfigsAndNavigations(page, v2Page, flex, manifest, schemas, fragments, pages);
        }
    }
    return pages;
}
/**
 * The V2AppProvider collects all the app information for a Fiori Elements V2 app
 */
class V2AppProvider extends appProvider_1.AppProvider {
    constructor(importParameters) {
        (0, i18n_1.initI18n)();
        let v2Pages;
        if (!importParameters.manifest[ux_specification_types_1.ManifestSection.generic]) {
            (0, extensionLogger_1.log)(importParameters.logger, {
                severity: "error" /* LogSeverity.Error */,
                message: i18next_1.default.t('NOFE'),
                location: {
                    path: ux_specification_types_1.MANIFESTPATH,
                    range: [ux_specification_types_1.ManifestSection.generic]
                }
            });
        }
        else {
            v2Pages = importParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages;
        }
        if (!v2Pages) {
            (0, extensionLogger_1.log)(importParameters.logger, {
                severity: "error" /* LogSeverity.Error */,
                message: i18next_1.default.t('NOPAGES', { appId: importParameters.manifest['sap.app']['id'] }),
                location: {
                    path: ux_specification_types_1.MANIFESTPATH,
                    range: [ux_specification_types_1.ManifestSection.generic]
                }
            });
        }
        const pageKey = v2Pages && Object.keys(v2Pages)[0];
        const pageId = v2Pages && generateId(v2Pages[pageKey], pageKey);
        // Import settings
        const appSettings = new application_1.AppSettings();
        const schemaFile = (0, common_2.getSchemaFilePath)(ux_specification_types_1.SchemaType.Application);
        const appSchema = importParameters.appSchemas[schemaFile.filename];
        (0, common_1.transferSettingsOfObject)(appSettings, importParameters.manifest, appSchema['definitions']['AppSettings'], undefined);
        // Call base
        super(importParameters.manifest, importParameters.appSchemas, pageId, getPagesAndConfigs(v2Pages, importParameters.flexChanges, importParameters.manifest, importParameters.appSchemas, importParameters.fragments, importParameters.logger), ux_specification_types_1.FioriElementsVersion.v2, appSettings);
    }
}
exports.V2AppProvider = V2AppProvider;
/**
 * Collects all pages of a V2 app from the manifest, by traversing the V2 page hierarchy.
 * @param v2Pages - entry point = complex page definition in manifest
 * @param componentName - Component name
 * @returns index table of pages
 */
function getPages(v2Pages, componentName, logger) {
    const pages = {};
    for (const v2PageName in v2Pages) {
        const v2Page = v2Pages[v2PageName];
        if (!v2Page.component?.name) {
            (0, extensionLogger_1.log)(logger, {
                severity: "error" /* LogSeverity.Error */,
                message: i18next_1.default.t('COMPONENTNOTDEFINED', { pageName: v2PageName }),
                location: {
                    path: ux_specification_types_1.MANIFESTPATH
                }
            });
        }
        if (v2Page.component?.name === componentName) {
            const id = generateId(v2Page, v2PageName);
            pages[id] = v2Page;
        }
        if (componentName === ux_specification_types_1.v2.FE_TEMPLATE_V2_OBJECT_PAGE && v2Page.pages) {
            const subPages = getPages(v2Page.pages, componentName, logger);
            for (const subPageId in subPages) {
                pages[subPageId] = subPages[subPageId];
            }
        }
    }
    return pages;
}
exports.getPages = getPages;
//# sourceMappingURL=appProvider.js.map