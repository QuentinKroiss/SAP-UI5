"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnalyticalListPageConfig = void 0;
const index_1 = require("../common/index");
const ux_specification_types_1 = require("@sap/ux-specification-types");
const i18n_1 = require("../../../../i18n/i18n");
const common_1 = require("../../../common");
const utils_1 = require("../../import/utils");
const factory_1 = require("../../export/factory");
/**
 * Adds manifest settings to the config.json
 * @param {AnalyticalListPageConfig} analyticalListPageConfig - the configuration to be filled
 * @param {Manifest} manifest - manifest.json of the app
 * @param {object} jsonSchema - the app-specific schema
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {string} pageKey - key of the page in manifest
 * @param {ExtensionLogger} logger - instance for logging exceptions
 */
function addSettings(importParameters, analyticalListPageConfig, factory, pageKey) {
    const tableType = (0, index_1.determineTableType)(importParameters.manifest, pageKey);
    const schemaDefinitions = importParameters.jsonSchema.definitions;
    // Import standard header actions:
    (0, index_1.importHeaderActions)(analyticalListPageConfig, factory, schemaDefinitions);
    analyticalListPageConfig.table = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, `ALP${tableType}`, analyticalListPageConfig.table);
    (0, index_1.transferSettingsOfObject)(analyticalListPageConfig.table, importParameters.manifest, schemaDefinitions[`ALP${tableType}<LineItems>`], pageKey, importParameters.logger);
    // ToolBar:
    analyticalListPageConfig.table.toolBar = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, ux_specification_types_1.DefinitionName.ToolBar, {
        actions: {}
    });
    (0, index_1.transferSettingsOfObject)(analyticalListPageConfig.table.toolBar, importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.ToolBar], pageKey, importParameters.logger);
    if (schemaDefinitions[ux_specification_types_1.DefinitionName.ActionsLR]) {
        for (const actionProperty in schemaDefinitions[ux_specification_types_1.DefinitionName.ActionsLR].properties) {
            const actionKey = (0, index_1.convertActionKey)(actionProperty);
            analyticalListPageConfig.table.toolBar.actions[actionKey] = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, ux_specification_types_1.DefinitionName.Action);
            (0, index_1.transferSettingsOfObject)(analyticalListPageConfig.table.toolBar.actions[actionKey], importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.Action], pageKey, importParameters.logger);
        }
    }
    //FilterBar:
    analyticalListPageConfig.filterBar = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, ux_specification_types_1.DefinitionName.AnalyticalListPageFilterBar, analyticalListPageConfig.filterBar);
    (0, index_1.transferSettingsOfObject)(analyticalListPageConfig.filterBar, importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.AnalyticalListPageFilterBar], pageKey, importParameters.logger);
    if (schemaDefinitions[ux_specification_types_1.DefinitionName.SelectionFields]) {
        analyticalListPageConfig.filterBar.selectionFields = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, ux_specification_types_1.DefinitionName.AnalyticalListPageFilterBar, analyticalListPageConfig.filterBar.selectionFields);
        const schemaSelectionFields = schemaDefinitions[ux_specification_types_1.DefinitionName.SelectionFields].properties;
        for (const selectionProperty in schemaSelectionFields) {
            const selectionKey = selectionProperty;
            analyticalListPageConfig.filterBar.selectionFields[selectionKey] = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, 'SelectionFieldDateSettings');
            (0, index_1.transferSettingsOfObject)(analyticalListPageConfig.filterBar.selectionFields[selectionKey], importParameters.manifest, schemaDefinitions['SelectionFieldDateSettings'], pageKey, importParameters.logger, selectionKey);
        }
    }
    //Chart settings:
    analyticalListPageConfig.chart = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, 'ChartSettings', analyticalListPageConfig.chart);
    (0, index_1.transferSettingsOfObject)(analyticalListPageConfig.chart, importParameters.manifest, schemaDefinitions['ChartSettings'], pageKey, importParameters.logger);
    //Footer:
    analyticalListPageConfig.footer = { actions: {} };
    const footerAction = schemaDefinitions[ux_specification_types_1.DefinitionName.FooterActionsLR];
    if (footerAction) {
        for (const actionProperty in footerAction.properties) {
            const actionKey = (0, index_1.convertActionKey)(actionProperty);
            analyticalListPageConfig.footer.actions[actionKey] = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, ux_specification_types_1.DefinitionName.FooterAction);
            (0, index_1.transferSettingsOfObject)(analyticalListPageConfig.footer.actions[actionKey], importParameters.manifest, schemaDefinitions[ux_specification_types_1.DefinitionName.Action], pageKey, importParameters.logger);
        }
    }
    //KPI's:
    analyticalListPageConfig.keyPerformanceIndicators = {};
    const kpiCards = importParameters.manifest[ux_specification_types_1.ManifestSection.generic]['pages'][pageKey].component?.settings
        ?.keyPerformanceIndicators;
    if (kpiCards) {
        Object.keys(kpiCards).forEach((kpiKey) => {
            analyticalListPageConfig.keyPerformanceIndicators[kpiKey] = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, 'KPISettings');
            analyticalListPageConfig.keyPerformanceIndicators = factory.createInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, 'KPISettings', analyticalListPageConfig.keyPerformanceIndicators);
            (0, index_1.transferSettingsOfObject)(analyticalListPageConfig.keyPerformanceIndicators[kpiKey], importParameters.manifest, schemaDefinitions['KPISettings'], pageKey, importParameters.logger, kpiKey);
        });
    }
}
/**
 * Creates the configuration file content for an analytical list page V2
 * @param {ImportALPV2Parameters} importParameters  - object comprising all input data
 *
 * @returns {AnalyticalListPageConfig} - the configuration (JSON)
 */
function createAnalyticalListPageConfig(importParameters) {
    // Initialize i18next
    (0, i18n_1.initI18n)();
    const v2Pages = (0, utils_1.getV2Pages)(importParameters);
    if (!v2Pages) {
        return;
    }
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Instantiate Page
    const config = factory.createPageInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage);
    const pageKeys = [];
    const v2Page = (0, utils_1.findAnalyticalListPage)(importParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages, pageKeys, importParameters.logger);
    (0, utils_1.checkV2Page)(v2Page, importParameters.logger, v2Page?.entitySet);
    if (!v2Page) {
        return;
    }
    addSettings(importParameters, config, factory, pageKeys[0]);
    importParameters.flex.forEach((change) => {
        if ((0, common_1.parseChangeString)(change)) {
            (0, index_1.addFlex)(config, change, importParameters.jsonSchema);
        }
    });
    (0, index_1.addFragments)(config, importParameters.manifest, v2Page, ux_specification_types_1.PageTypeV2.AnalyticalListPage, importParameters.fragments);
    (0, utils_1.removeEmptySettings)(config);
    return config;
}
exports.createAnalyticalListPageConfig = createAnalyticalListPageConfig;
//# sourceMappingURL=analyticalListPage.js.map