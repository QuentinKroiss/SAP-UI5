import { v2, PageTypeV2 } from '@sap/ux-specification-types';
import type { FileData, ObjectPageSectionData, Manifest, ExtensionLogger } from '@sap/ux-specification-types';
import type { MetadataInstanceInterface } from '../../../common/decoration/factory';
import type { Definition } from 'typescript-json-schema';
export type LROPConfigsType = v2.ListReportConfigV2 | v2.AnalyticalListPageConfigV2 | v2.ObjectPageConfigV2;
export declare function convertActionKey(actionProperty: string): string;
/**
 * Unescapes the selector ID of a flex change
 * @param selectorId - escaped selector ID
 * @returns unescaped ID
 */
export declare function convertSelector(selectorId: string): string;
/**
 * Adds flex changes to config file
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {string} changeString - change file as string
 * @param {object} appSchema - application specific schema
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
export declare function addFlex(config: v2.ListReportConfigV2 | v2.AnalyticalListPageConfigV2, changeString: string, appSchema: object, logger?: ExtensionLogger): void;
/**
 * Transfers settings from manifest to object page config
 * @param configPart - part of the configuration to be filled
 * @param manifest - manifest.json of the app
 * @param appSchema - app specific schema
 * @param pageID - ID of the given object page
 * @param sectionId (optional) - ID of the given section (optional)
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
export declare function transferSettingsOfObject(configPart: {
    [key: string]: any;
}, manifest: Manifest, appSchema: object, pageKey: string, logger?: ExtensionLogger, kpiKey?: string): void;
/**
 * Determines the table type for a given LR or ALP table, based on the component name and its table settings
 * This does not exactly reflect the run time behavior of Fiori elements but a best guess and expectation.
 * @param manifest - manifest.json file content of the app
 * @param pageKey - key of the page in the manifest
 */
export declare function determineTableType(manifest: Manifest, pageKey: string): v2.TableTypeV2;
/**
 * Adds custom column information from manifest and fragments to the configuration
 * @param config - configuration, to be enhanced
 * @param manifest - actual manifest.json
 * @param v2Page - actual page in the manifest
 * @param pageType - type of the page
 * @param fragments - list of all fragments
 * @param objectPageSectionData - optional information, for object page
 */
export declare function addFragments(config: LROPConfigsType, manifest: object, v2Page: v2.SapUiAppPageV2, pageType: PageTypeV2, fragments?: FileData[], objectPageSectionData?: ObjectPageSectionData): void;
/**
 * Prepares header standard actions information for LR/ALP config
 * @param {ListReportConfig} listReportConfig - LR config, to be filled
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {Definition} schemaDefinitions - app schema definitions
 */
export declare function importHeaderActions(listReportConfig: v2.ListReportConfigV2, factory: MetadataInstanceInterface, schemaDefinitions: Definition): void;
//# sourceMappingURL=index.d.ts.map