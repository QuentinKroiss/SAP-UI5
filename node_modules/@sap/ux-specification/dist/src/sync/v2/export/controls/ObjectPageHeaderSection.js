"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeaderSections = exports.ObjectPageHeaderSectionAddress = exports.ObjectPageHeaderSectionDataPoint = exports.ObjectPageHeaderSectionChart = exports.ObjectPageHeaderSectionForm = exports.CommonHeaderFacetSettings = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const common_1 = require("../../../common");
const PrefixHeaderEditable = 'header::headerEditable::';
/**
 * Create stable ID for Object Page DataPoint Header Section
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} _breadcrumbs
 * @param {ControlTypeFunction} _controlType
 * @returns {string} stable ID of Object Page Header Action button
 */
const getDataPointHeaderSectionId = (baseId, _idBreadcrumbs, _breadcrumbs, _controlType, title) => {
    return `${baseId}${PrefixHeaderEditable}${title}`;
};
/**
 * Create stable ID for Object Page Address Header Section
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} _breadcrumbs
 * @param {ControlTypeFunction} _controlType
 * @returns {string} stable ID of Object Page Header Action button
 */
const getAddressHeaderSectionId = (baseId, _idBreadcrumbs, _breadcrumbs, _controlType, title) => {
    return `${baseId}${PrefixHeaderEditable}${title}::ContactAddress`;
};
/**
 * Create stable ID for Object Page Chart Header Section
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} _breadcrumbs
 * @param {ControlTypeFunction} _controlType
 * @returns {string} stable ID of Object Page Header Action button
 */
const getChartHeaderSectionId = (baseId, _idBreadcrumbs, _breadcrumbs, _controlType, title) => {
    return `${baseId}${PrefixHeaderEditable}${title}::SmartMicroChartVBox`;
};
/**
 * Create stable ID for Object Page Form Header Section
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @param {ControlTypeFunction} _controlType
 * @returns {string} stable ID of Object Page Header Action button
 */
const getFormHeaderSectionId = (baseId, _idBreadcrumbs, breadcrumbs, _controlType, title) => {
    const sectionName = breadcrumbs[breadcrumbs.length - 1].replace(/@com.sap/g, 'com.sap');
    const facetId = title?.includes(ux_specification_types_1.FacetTitlePrefix) ? title.split(ux_specification_types_1.FacetTitlePrefix)[1] : sectionName;
    return `${baseId}${PrefixHeaderEditable}${facetId}::Form`;
};
const flexRuleForHeaderSection = {
    controlType: () => ux_specification_types_1.ControlType.ObjectPageHeaderSection,
    createFlexChange: common_1.exportToFlexChange
};
class CommonHeaderFacetSettings {
}
exports.CommonHeaderFacetSettings = CommonHeaderFacetSettings;
__decorate([
    (0, common_1.syncRule)({
        flex: {
            ...flexRuleForHeaderSection,
            // Placeholder for stable ID, will be replaced by the specific section
            controlId: getFormHeaderSectionId
        },
        generate: common_1.addPatternForBindingChangeOfEnumOP
    })
], CommonHeaderFacetSettings.prototype, "visible", void 0);
class ObjectPageHeaderSectionForm extends CommonHeaderFacetSettings {
}
exports.ObjectPageHeaderSectionForm = ObjectPageHeaderSectionForm;
__decorate([
    (0, common_1.syncRule)({
        flex: {
            ...flexRuleForHeaderSection,
            controlId: getFormHeaderSectionId
        }
    })
], ObjectPageHeaderSectionForm.prototype, "visible", void 0);
class ObjectPageHeaderSectionChart extends CommonHeaderFacetSettings {
}
exports.ObjectPageHeaderSectionChart = ObjectPageHeaderSectionChart;
__decorate([
    (0, common_1.syncRule)({
        flex: {
            ...flexRuleForHeaderSection,
            controlId: getChartHeaderSectionId
        }
    })
], ObjectPageHeaderSectionChart.prototype, "visible", void 0);
class ObjectPageHeaderSectionDataPoint extends CommonHeaderFacetSettings {
}
exports.ObjectPageHeaderSectionDataPoint = ObjectPageHeaderSectionDataPoint;
__decorate([
    (0, common_1.syncRule)({
        flex: {
            ...flexRuleForHeaderSection,
            controlId: getDataPointHeaderSectionId
        }
    })
], ObjectPageHeaderSectionDataPoint.prototype, "visible", void 0);
class ObjectPageHeaderSectionAddress extends CommonHeaderFacetSettings {
}
exports.ObjectPageHeaderSectionAddress = ObjectPageHeaderSectionAddress;
__decorate([
    (0, common_1.syncRule)({
        flex: {
            ...flexRuleForHeaderSection,
            controlId: getAddressHeaderSectionId
        }
    })
], ObjectPageHeaderSectionAddress.prototype, "visible", void 0);
class HeaderSections {
}
exports.HeaderSections = HeaderSections;
//# sourceMappingURL=ObjectPageHeaderSection.js.map