import type { MetadataInstanceInterface } from '../../common/decoration/factory';
import type { TransferParameterTypeV2 } from '../types';
import type { Definition } from 'typescript-json-schema';
import type { ExportResults } from '@sap/ux-specification-types';
/**
 * Private recursive function that traverses the content of the current object. It reads decorators and fills manifest entries and flex changes
 * @param configObject - current object to traverse
 * @param exportResults - object with all collected manifest entries and flex changes
 * @param jsonSchema - application specific schema
 * @param targetDefinition - the current entry point or definition in the app schema
 * @param {MetadataInstanceInterface} factory - factory for creating metadata instances
 * @param pathHierarchy -  elements of the path indicating the hierarchical level
 * @param {string[]} entityPathArray (optional) - array of elements, describing a path to a subsection of the config.
 *                                                If specified, only elements from this subsection are processed
 */
export declare function transferManifestEntriesOVP(configObject: {
    [key: string]: any;
}, exportResults: ExportResults, jsonSchema: Definition, targetDefinition: Definition, factory: MetadataInstanceInterface, pathHierarchy?: string[], entityPathArray?: string[]): void;
/**
 * Assign sync rules to {currentObject}
 * @param {MetadataInstanceInterface} factory - factory for metadata
 * @param {string} structureName - name of the complex structure in schema
 * @param {object} currentObject - the given part of the configuration
 * @param {string} defaultTypeName - name of the default type that shall be taken if no class is registered for structureName
 */
export declare function assignReflectMetadataRules(factory: MetadataInstanceInterface, structureName: string, currentObject: object, defaultTypeName: string): object;
/**
 * Function that traverses the content of the current object. It reads decorators and fills manifest entries and flex changes
 * @param {TransferParameterTypeV2} transferParameters - list of input parameters for the recursive function call
 * @param configObject - current (sub)object of the configuration file
 * @param parentIds - array of collected parent ids
 * @param breadcrumbs - array of properties that we are currently processing. Required for instance for table column name
 * @param schemaDefinition - the current entry point or definition in the app schema
 * @param title - title from the app schema (comprising for instance the facet ID)
 */
export declare function transferManifestEntriesAndFlexChange(transferParameters: TransferParameterTypeV2, configObject: {
    [key: string]: any;
}, parentIds: string[], breadcrumbs: string[], schemaDefinition: Definition, title?: string): void;
//# sourceMappingURL=export.d.ts.map