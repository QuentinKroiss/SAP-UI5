"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridTable = exports.ALPAnalyticalTable = exports.ALPGridTable = exports.ALPResponsiveTable = exports.TableALP = exports.AnalyticalTable = exports.TreeTable = exports.ResponsiveTable = exports.CommonTableSettings = exports.QuickVariantSelectionX = exports.QuickVariantSelection = exports.Fields4Dialog = exports.DataLoadSettings = exports.deleteType = exports.exportType = exports.MultiEdit = exports.CreateWithFilters = exports.exportCreateParametersFields = exports.importCreateParameters = exports.getSmartTableControlId = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const common_1 = require("../../../common");
const decoration_1 = require("../../../common/decoration");
const application_1 = require("../../application");
const MULTIEDITPATH = '/multiEdit';
const getSmartTableControlId = (baseId, idBreadcrumbs, _breadcrumbs, controlType) => {
    if (controlType() === 'sap.m.Table') {
        return baseId + 'responsiveTable';
    }
    else if (controlType() === 'sap.ui.comp.smarttable.SmartTable' && baseId?.includes('AnalyticalListPage')) {
        return baseId + ux_specification_types_1.PropertyName.table;
    }
    return (0, decoration_1.buildControlIdFromParent)(baseId, idBreadcrumbs);
};
exports.getSmartTableControlId = getSmartTableControlId;
// import createWithParameterDialog (only) fields to Array: { field: { path: field } } => fields[]
function importCreateParameters(manifestSection) {
    if (!manifestSection['createWithParameterDialog']?.fields) {
        return undefined;
    }
    const manifestDialogFields = JSON.parse(JSON.stringify(manifestSection['createWithParameterDialog'].fields));
    const configPart = { fields: [] };
    for (const manifestField in manifestDialogFields) {
        configPart.fields.push(manifestField);
    }
    return configPart;
}
exports.importCreateParameters = importCreateParameters;
function exportCreateParametersFields(manifestSection, configPart, key) {
    const fields = configPart[key];
    if (fields.length === 0) {
        delete manifestSection[key];
        return;
    }
    const manifestFields = {};
    if (!manifestSection[key]) {
        manifestSection[key] = {};
    }
    fields.forEach((entry) => (manifestFields[entry] = manifestSection[key][entry] || { path: entry }));
    manifestSection[key] = manifestFields;
}
exports.exportCreateParametersFields = exportCreateParametersFields;
function exportVariants(manifestSection, configObject) {
    for (const variant in configObject['variants']) {
        const variantConfig = configObject['variants'][variant];
        const tablesettings = ['type', 'multiSelect', 'selectAll', 'selectionLimit', 'inlineDelete'];
        for (const key in variantConfig) {
            if (tablesettings.indexOf(key) !== -1) {
                if (!variantConfig['tableSettings']) {
                    variantConfig['tableSettings'] = {};
                }
                variantConfig['tableSettings'][key] = variantConfig[key];
                delete variantConfig[key];
            }
        }
        if (manifestSection['variants']) {
            manifestSection['variants'][variant] = variantConfig;
        }
        else {
            manifestSection['variants'] = {
                [variant]: variantConfig
            };
        }
    }
}
function exportQuickVariantSelectionX(manifestSection, configObject) {
    if (!configObject['variants']) {
        return;
    }
    if (Object.keys(configObject['variants']).length > 0) {
        exportVariants(manifestSection, configObject);
    }
    else {
        delete manifestSection['variants'];
    }
}
function importMultiEdit(manifestSection) {
    if (!manifestSection || !manifestSection['multiEdit']) {
        return undefined;
    }
    const configPart = JSON.parse(JSON.stringify(manifestSection['multiEdit']));
    // convert CSV format to array of strings
    configPart.ignoredFields = manifestSection['multiEdit']?.['ignoredFields']?.split(',');
    return configPart;
}
class CreateWithFilters {
}
exports.CreateWithFilters = CreateWithFilters;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys) + '/createWithFilters'
        }
    })
], CreateWithFilters.prototype, "strategy", void 0);
class MultiEdit {
}
exports.MultiEdit = MultiEdit;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys) + MULTIEDITPATH
        }
    })
], MultiEdit.prototype, "enabled", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys) + MULTIEDITPATH
        }
    })
], MultiEdit.prototype, "annotationPath", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys) + MULTIEDITPATH,
            export: common_1.convertEnumToCSV
        }
    })
], MultiEdit.prototype, "ignoredFields", void 0);
//import table type
function importType(manifestSection) {
    if (manifestSection?.['tableSettings']?.['type']) {
        return manifestSection['tableSettings']['type'];
    }
    else if (manifestSection?.['tableType']) {
        return manifestSection['tableType'];
    }
}
//export table type
function exportType(manifestSection, configPart) {
    if (configPart?.['type']) {
        if (!manifestSection['tableSettings']) {
            manifestSection['tableSettings'] = {};
        }
        manifestSection['tableSettings']['type'] = configPart['type'];
        if (manifestSection?.['tableType']) {
            //old format
            delete manifestSection['tableType'];
        }
    }
}
exports.exportType = exportType;
function deleteType(manifestSection) {
    if (manifestSection?.['tableSettings']?.['type']) {
        delete manifestSection['tableSettings']['type'];
    }
    if (manifestSection?.['tableType']) {
        //old format
        delete manifestSection['tableType'];
    }
}
exports.deleteType = deleteType;
class DataLoadSettings {
}
exports.DataLoadSettings = DataLoadSettings;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getDataLoadSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.75.2'
    })
], DataLoadSettings.prototype, "loadDataOnAppLaunch", void 0);
class Fields4Dialog {
}
exports.Fields4Dialog = Fields4Dialog;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys) + '/createWithParameterDialog',
            export: exportCreateParametersFields
        }
    }),
    (0, decoration_1.validity)({
        since: '1.77.0'
    })
], Fields4Dialog.prototype, "fields", void 0);
class QuickVariantSelection {
}
exports.QuickVariantSelection = QuickVariantSelection;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys) + ux_specification_types_1.QUICKVARPATH
        }
    }),
    (0, decoration_1.validity)({
        since: '1.48.0'
    })
], QuickVariantSelection.prototype, "showCounts", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys) + ux_specification_types_1.QUICKVARPATH
        }
    }),
    (0, decoration_1.validity)({
        since: '1.48.0'
    })
], QuickVariantSelection.prototype, "variants", void 0);
class QuickVariantSelectionX {
}
exports.QuickVariantSelectionX = QuickVariantSelectionX;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys) + ux_specification_types_1.QUICKVARPATHX
        }
    }),
    (0, decoration_1.validity)({
        since: '1.48.0'
    })
], QuickVariantSelectionX.prototype, "showCounts", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys) + ux_specification_types_1.QUICKVARPATHX
        }
    }),
    (0, decoration_1.validity)({
        since: '1.48.0'
    })
], QuickVariantSelectionX.prototype, "enableAutoBinding", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys) + ux_specification_types_1.QUICKVARPATHX,
            export: exportQuickVariantSelectionX
        }
    }),
    (0, decoration_1.validity)({
        since: '1.48.0'
    })
], QuickVariantSelectionX.prototype, "variants", void 0);
class CommonTableSettings {
    constructor() {
        this.getDeprecated = () => {
            return {
                tableType: {
                    since: '1.50.0',
                    deprecated: {
                        since: '1.70.0',
                        text: 'Use tableSettings.type instead'
                    }
                },
                enableAutoBinding: {
                    since: '1.40.0',
                    deprecated: {
                        since: '1.75.2',
                        text: 'Use tableSettings.loadDataOnAppLaunch instead'
                    }
                }
            };
        };
    }
}
exports.CommonTableSettings = CommonTableSettings;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            key: 'createWithParameterDialog',
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys),
            import: importCreateParameters
        }
    }),
    (0, decoration_1.validity)({
        since: '1.77.0'
    })
], CommonTableSettings.prototype, "createWithParameterDialog", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: decoration_1.buildControlIdFromParent,
            controlType: () => ux_specification_types_1.ControlType.SmartTable,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    (0, decoration_1.validity)({
        since: '1.38.0'
    })
], CommonTableSettings.prototype, "showTablePersonalisation", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: exports.getSmartTableControlId,
            controlType: () => ux_specification_types_1.ControlType.SmartTable,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    (0, decoration_1.validity)({
        since: '1.26.0'
    })
], CommonTableSettings.prototype, "useExportToExcel", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: exports.getSmartTableControlId,
            controlType: () => ux_specification_types_1.ControlType.SmartTable,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    (0, decoration_1.validity)({
        since: '1.50.0'
    })
], CommonTableSettings.prototype, "exportType", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: exports.getSmartTableControlId,
            controlType: () => ux_specification_types_1.ControlType.SmartTable,
            createFlexChange: decoration_1.exportToFlexChange
        }
    })
], CommonTableSettings.prototype, "fitContainer", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.48.0'
    })
], CommonTableSettings.prototype, "quickVariantSelection", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.48.0'
    })
], CommonTableSettings.prototype, "quickVariantSelectionX", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.38.0'
    })
], CommonTableSettings.prototype, "multiSelect", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.120.0'
    })
], CommonTableSettings.prototype, "copy", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.70.0'
    })
], CommonTableSettings.prototype, "selectAll", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.70.0'
    })
], CommonTableSettings.prototype, "selectionLimit", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.75.2'
    })
], CommonTableSettings.prototype, "dataLoadSettings", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.42.0'
    })
], CommonTableSettings.prototype, "condensedTableLayout", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.56.0'
    })
], CommonTableSettings.prototype, "enableTableFilterInPageVariant", void 0);
__decorate([
    (0, decoration_1.childId)('toolBar')
], CommonTableSettings.prototype, "toolBar", void 0);
class ResponsiveTable extends CommonTableSettings {
}
exports.ResponsiveTable = ResponsiveTable;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys),
            import: importType,
            export: exportType,
            delete: deleteType
        }
    }),
    (0, decoration_1.validity)({
        since: '1.50.0'
    })
], ResponsiveTable.prototype, "type", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.54.0'
    })
], ResponsiveTable.prototype, "createWithFilters", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: exports.getSmartTableControlId,
            controlType: () => ux_specification_types_1.ControlType.Table,
            createFlexChange: decoration_1.exportToFlexChange
        },
        generate: common_1.addPatternForBindingChangeOfEnumLR
    }),
    (0, decoration_1.validity)({
        since: '1.52.0'
    })
], ResponsiveTable.prototype, "popinLayout", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: exports.getSmartTableControlId,
            controlType: () => ux_specification_types_1.ControlType.Table,
            createFlexChange: decoration_1.exportToFlexChange
        }
    })
], ResponsiveTable.prototype, "includeItemInSelection", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.77.0'
    })
], ResponsiveTable.prototype, "inlineDelete", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: exports.getSmartTableControlId,
            controlType: () => ux_specification_types_1.ControlType.Table,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    (0, decoration_1.validity)({
        since: '1.16.0'
    })
], ResponsiveTable.prototype, "growingThreshold", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getTableSettingPathV2)(pageKeys),
            import: importMultiEdit
        }
    }),
    (0, decoration_1.validity)({
        since: '1.98.0'
    })
], ResponsiveTable.prototype, "multiEdit", void 0);
class TreeTable extends CommonTableSettings {
}
exports.TreeTable = TreeTable;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys),
            import: importType,
            export: exportType,
            delete: deleteType
        }
    }),
    (0, decoration_1.validity)({
        since: '1.50.0'
    })
], TreeTable.prototype, "type", void 0);
class AnalyticalTable extends CommonTableSettings {
}
exports.AnalyticalTable = AnalyticalTable;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys),
            import: importType,
            export: exportType,
            delete: deleteType
        }
    }),
    (0, decoration_1.validity)({
        since: '1.50.0'
    })
], AnalyticalTable.prototype, "type", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    })
], AnalyticalTable.prototype, "qualifier", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.38.0'
    }),
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    })
], AnalyticalTable.prototype, "defaultContentView", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    })
], AnalyticalTable.prototype, "defaultFilterMode", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.60.0'
    })
], AnalyticalTable.prototype, "contentTitle", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    })
], AnalyticalTable.prototype, "autoHide", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.78.0'
    })
], AnalyticalTable.prototype, "allFiltersAsInParameters", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.54.0'
    })
], AnalyticalTable.prototype, "createWithFilters", void 0);
class TableALP extends CommonTableSettings {
}
exports.TableALP = TableALP;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys),
            import: importType,
            export: exportType,
            delete: deleteType
        }
    }),
    (0, decoration_1.validity)({
        since: '1.50.0'
    })
], TableALP.prototype, "type", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    })
], TableALP.prototype, "qualifier", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.38.0'
    }),
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    })
], TableALP.prototype, "defaultContentView", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    })
], TableALP.prototype, "defaultFilterMode", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.60.0'
    })
], TableALP.prototype, "contentTitle", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    })
], TableALP.prototype, "autoHide", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.78.0'
    })
], TableALP.prototype, "allFiltersAsInParameters", void 0);
class ALPResponsiveTable extends TableALP {
}
exports.ALPResponsiveTable = ALPResponsiveTable;
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: exports.getSmartTableControlId,
            controlType: () => ux_specification_types_1.ControlType.Table,
            createFlexChange: decoration_1.exportToFlexChange
        }
    }),
    (0, decoration_1.validity)({
        since: '1.16.0'
    })
], ALPResponsiveTable.prototype, "growingThreshold", void 0);
class ALPGridTable extends TableALP {
}
exports.ALPGridTable = ALPGridTable;
class ALPAnalyticalTable extends TableALP {
}
exports.ALPAnalyticalTable = ALPAnalyticalTable;
class GridTable extends CommonTableSettings {
}
exports.GridTable = GridTable;
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys),
            import: importType,
            export: exportType,
            delete: deleteType
        }
    }),
    (0, decoration_1.validity)({
        since: '1.50.0'
    })
], GridTable.prototype, "type", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getAppSettingPathV2)(pageKeys)
        }
    }),
    (0, decoration_1.validity)({
        since: '1.54.0'
    })
], GridTable.prototype, "createWithFilters", void 0);
//# sourceMappingURL=Table.js.map