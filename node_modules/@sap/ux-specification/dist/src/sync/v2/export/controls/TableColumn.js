"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableCustomColumn = exports.TableColumnActionIntentBased = exports.TableColumnAction = exports.TableColumn = void 0;
const Action_1 = require("./Action");
const ux_specification_types_1 = require("@sap/ux-specification-types");
const decoration_1 = require("../../../common/decoration");
const common_1 = require("../../../common");
/**
 * Create stable ID for Action Column
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Action Column
 */
const buildColumnActionId = (baseId, idBreadcrumbs, breadcrumbs) => {
    const columnTemplate = 'template:::TableColumn';
    const { actionType, actionId } = (0, common_1.getActionBreadcrumbParts)(breadcrumbs);
    const smartTableId = `sSmartTableId::${idBreadcrumbs[0]}`;
    return `${baseId}${columnTemplate}:::${actionType}:::${smartTableId}:::sAction::${actionId}`;
};
/**
 * Create stable ID for Intent Based Action Column
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Action Column
 */
const buildColumnIntentBasedId = (baseId, idBreadcrumbs, breadcrumbs) => {
    const columnTemplate = 'template:::TableColumn';
    const { actionType, actionId, semanticObjectId } = (0, common_1.getActionBreadcrumbParts)(breadcrumbs);
    const smartTableId = `sSmartTableId::${idBreadcrumbs[0]}`;
    return `${baseId}${columnTemplate}:::${actionType}:::${smartTableId}:::sSemanticObject::${semanticObjectId}:::sAction::${actionId}`;
};
/**
 * Create stable ID for Column Action button
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Column Action button
 */
const buildColumnActionButtonId = (baseId, _idBreadcrumbs, breadcrumbs) => {
    const { actionId } = (0, common_1.getActionBreadcrumbParts)(breadcrumbs);
    return `${baseId}action::${actionId.replace(':2f', '::')}`;
};
// TableColumnAction column properties
const flexRuleForColumn = {
    controlId: buildColumnActionId,
    controlType: () => ux_specification_types_1.ControlType.TableColumn,
    createFlexChange: decoration_1.exportToFlexChange
};
// TableColumnAction action properties
const flexRuleForColumnAction = {
    controlId: buildColumnActionButtonId,
    controlType: () => ux_specification_types_1.ControlType.Button,
    createFlexChange: decoration_1.exportToFlexChange
};
// TableColumnActionIntentBased main properties
const flexRuleForColumnIntentBased = {
    ...flexRuleForColumn,
    controlId: buildColumnIntentBasedId
};
// TableColumnActionIntentBased action properties
const flexRuleForColumnIntentBasedAction = {
    ...flexRuleForColumnAction,
    controlId: Action_1.buildIntentBasedActionId
};
class TableColumn {
}
exports.TableColumn = TableColumn;
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: decoration_1.buildColumnControlId,
            controlType: () => ux_specification_types_1.ControlType.TableColumn,
            createFlexChange: decoration_1.exportToFlexChange
        }
    })
], TableColumn.prototype, "width", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: {
            controlId: decoration_1.buildColumnControlId,
            controlType: () => ux_specification_types_1.ControlType.TableColumn,
            createFlexChange: decoration_1.exportToFlexChange
        },
        generate: common_1.addPatternForBindingChangeOfEnumLR
    })
], TableColumn.prototype, "hAlign", void 0);
class TableColumnAction {
}
exports.TableColumnAction = TableColumnAction;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumn
    })
], TableColumnAction.prototype, "width", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumn,
        generate: common_1.addPatternForBindingChangeOfEnumLR
    })
], TableColumnAction.prototype, "hAlign", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnAction
    })
], TableColumnAction.prototype, "tooltip", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnAction
    })
], TableColumnAction.prototype, "icon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnAction
    })
], TableColumnAction.prototype, "activeIcon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnAction
    })
], TableColumnAction.prototype, "type", void 0);
class TableColumnActionIntentBased extends TableColumnAction {
}
exports.TableColumnActionIntentBased = TableColumnActionIntentBased;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnIntentBased
    })
], TableColumnActionIntentBased.prototype, "width", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnIntentBased,
        generate: common_1.addPatternForBindingChangeOfEnumLR
    })
], TableColumnActionIntentBased.prototype, "hAlign", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnIntentBasedAction
    })
], TableColumnActionIntentBased.prototype, "tooltip", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnIntentBasedAction
    })
], TableColumnActionIntentBased.prototype, "icon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnIntentBasedAction
    })
], TableColumnActionIntentBased.prototype, "activeIcon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForColumnIntentBasedAction
    })
], TableColumnActionIntentBased.prototype, "type", void 0);
/**
 * No sync rules are defined for table custom columns, as they are transferred altogether.
 * This approach is needed to support inserts as well as deletions of manifest extensions and fragments
 */
class TableCustomColumn {
}
exports.TableCustomColumn = TableCustomColumn;
//# sourceMappingURL=TableColumn.js.map