"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartSettings = exports.getSmartChartControlId = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const decoration_1 = require("../../../common/decoration");
const decorators_1 = require("../../../common/decoration/decorators");
const application_1 = require("../../application");
const getSmartChartControlId = (baseId) => {
    return baseId + ux_specification_types_1.PropertyName.chart;
};
exports.getSmartChartControlId = getSmartChartControlId;
class ChartSettings {
}
exports.ChartSettings = ChartSettings;
__decorate([
    (0, decorators_1.syncRule)({
        flex: {
            controlId: exports.getSmartChartControlId,
            controlType: () => ux_specification_types_1.ControlType.SmartChart,
            createFlexChange: decoration_1.exportToFlexChange
        }
    })
], ChartSettings.prototype, "showLegendButton", void 0);
__decorate([
    (0, decorators_1.syncRule)({
        flex: {
            controlId: exports.getSmartChartControlId,
            controlType: () => ux_specification_types_1.ControlType.SmartChart,
            createFlexChange: decoration_1.exportToFlexChange
        }
    })
], ChartSettings.prototype, "showDownloadButton", void 0);
__decorate([
    (0, decorators_1.syncRule)({
        flex: {
            controlId: exports.getSmartChartControlId,
            controlType: () => ux_specification_types_1.ControlType.SmartChart,
            createFlexChange: decoration_1.exportToFlexChange
        }
    })
], ChartSettings.prototype, "showChartTypeSelectionButton", void 0);
__decorate([
    (0, decorators_1.syncRule)({
        flex: {
            controlId: exports.getSmartChartControlId,
            controlType: () => ux_specification_types_1.ControlType.SmartChart,
            exportFlexValue: (flexChange, configObject, key) => {
                flexChange.content.newValue = configObject[key].join();
            },
            importFlexValue: (flexChange, configObject, key) => {
                flexChange.content['newValue'] = flexChange.content['newValue'];
                configObject[key] = flexChange.content['newValue'].split(',');
            },
            createFlexChange: decoration_1.exportToFlexChange
        }
    })
], ChartSettings.prototype, "ignoredChartTypes", void 0);
__decorate([
    (0, decorators_1.syncRule)({
        manifest: {
            path: (pageKeys) => (0, application_1.getChartSettingPathV2)(pageKeys)
        }
    }),
    (0, decorators_1.validity)({
        since: '1.81.0'
    })
], ChartSettings.prototype, "showDataLabel", void 0);
//# sourceMappingURL=AnalyticalListPageChart.js.map