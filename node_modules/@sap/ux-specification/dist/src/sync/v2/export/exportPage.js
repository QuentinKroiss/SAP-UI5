"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportConfigEntityByPathV2 = exports.exportPageV2 = exports.calculateBaseId = exports.getExportClassesForSections = exports.getSubsectionClasses = exports.getClassesForSingleSection = void 0;
const i18next_1 = __importDefault(require("i18next"));
const ux_specification_types_1 = require("@sap/ux-specification-types");
const common_1 = require("../../common");
const application_1 = require("../application");
const manifest_1 = require("./manifest");
const import_1 = require("../import");
const factory_1 = require("./factory");
const export_1 = require("./export");
const extensionLogger_1 = require("../../../extensionLogger");
/**
 * Returns a fresh export results object with default values
 */
const getDefaultExportResult = (fragmentFiles) => ({
    flexChanges: [],
    manifest: {
        [ux_specification_types_1.ManifestSection.generic]: { pages: {} }
    },
    manifestChangeIndicator: ux_specification_types_1.ChangeIndicator.NoChange,
    fragments: fragmentFiles
        ? fragmentFiles.map((frg) => {
            return {
                dataSourceUri: frg.dataSourceUri,
                fileContent: frg.fileContent,
                changeIndicator: ux_specification_types_1.ChangeIndicator.NoChange
            };
        })
        : []
});
/**
 * Instantiates the export classes for a single object page section
 * @param currentSection - Export class as an object, to be updated
 * @param sectionId - Current section ID
 * @param {MetadataInstanceInterface} factory - factory for creating metadata instances
 */
function getClassesForSingleSection(currentSection, sectionId, factory) {
    if (currentSection && sectionId === 'custom') {
        // Custom sections
        for (const index in currentSection) {
            if (currentSection[index].className === ux_specification_types_1.SAPUI5_FRAGMENT_CLASS) {
                currentSection[index] = factory.createInstance(ux_specification_types_1.PageTypeV2.ObjectPage, 'ObjectPageCustomSectionFragment', currentSection[index]);
            }
            else {
                currentSection[index] = factory.createInstance(ux_specification_types_1.PageTypeV2.ObjectPage, 'ObjectPageCustomSectionView', currentSection[index]);
            }
        }
    }
}
exports.getClassesForSingleSection = getClassesForSingleSection;
/**
 * Recursive sub-function for handling subsections
 * @param currentSection - Object page section in config
 */
function getSubsectionClasses(currentSection, factory) {
    if (currentSection?.['subsections']) {
        let subSection;
        for (const subSectionId in currentSection['subsections']) {
            subSection = currentSection['subsections'][subSectionId];
            getClassesForSingleSection(subSection, subSectionId, factory);
            getSubsectionClasses(subSection, factory);
        }
    }
}
exports.getSubsectionClasses = getSubsectionClasses;
/**
 * Instantiates the export classes for the object page section
 * @param objectPageConfig - the given object page configuration
 * @param objectPage - the overall object page export class where the sections shall be included
 * @param {MetadataInstanceInterface} factory - factory for creating metadata instances
 */
function getExportClassesForSections(objectPageConfig, objectPage, factory) {
    // Main function
    let section;
    for (const sectionId in objectPageConfig.sections) {
        section = objectPage.sections[sectionId];
        getClassesForSingleSection(section, sectionId, factory);
        getSubsectionClasses(section, factory);
    }
}
exports.getExportClassesForSections = getExportClassesForSections;
/**
 * Determines and validates a v2 listreport page from manifest information
 * @param {string[]} pageKeys - list of page keys, to be filled by the find logic
 * @param {ExportListReportV2Parameters} exportParameters - import parameters for the export
 * @returns the v2 list report page
 */
function findV2Page(pageKeys, exportParameters) {
    const v2Page = (0, import_1.findListReportPageV2)(exportParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages, pageKeys);
    if (!v2Page) {
        (0, extensionLogger_1.log)(exportParameters.logger, {
            severity: "error" /* LogSeverity.Error */,
            message: i18next_1.default.t('NOLR'),
            location: {
                path: ux_specification_types_1.MANIFESTPATH,
                range: [ux_specification_types_1.ManifestSection.generic]
            }
        });
        return;
    }
    if (!v2Page.component) {
        (0, extensionLogger_1.log)(exportParameters.logger, {
            severity: "error" /* LogSeverity.Error */,
            message: i18next_1.default.t('COMPONENTNOTDEFINED', { pageName: ux_specification_types_1.PageTypeV2.ListReport }),
            location: {
                path: ux_specification_types_1.MANIFESTPATH
            }
        });
        return;
    }
    if (!v2Page.component.settings) {
        v2Page.component.settings = {};
    }
    return v2Page;
}
/**
 * Calculates the baseId of the app for flex changes
 * @param {object} config - content of the config file
 * @param {ExportPageUnitionType} exportParameters - all API parameters needed for the export
 * @returns the baseId for changes
 */
function calculateBaseId(config, exportParameters) {
    const pageLayoutInformation = (0, common_1.getPageLayoutInformation)(config);
    return `${exportParameters.appId}::${pageLayoutInformation.id}::${exportParameters.page.entitySet}--`;
}
exports.calculateBaseId = calculateBaseId;
/**
 * Run through the given ListReport config and return respective manifest entry and flex changes
 * @param {ExportListReportV2Parameters} exportParameters - all API parameters needed for the export
 * @param ui5Version - SAP UI5 version
 * @param deletionRequest - if set to true, any manifest setting specified by entityPath gets deleted even if it comprises any unknown property
 *
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportListReportPage(exportParameters, ui5Version, deletionRequest = false) {
    const exportResults = getDefaultExportResult(exportParameters.fragments);
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    const listReportConfig = exportParameters.page.config;
    if (listReportConfig && Object.keys(listReportConfig).length !== 0) {
        const pageKeys = [];
        const v2Page = findV2Page(pageKeys, exportParameters);
        const factory = new factory_1.MetadataInstanceFactoryV2();
        const pageInstance = factory.createPageInstance(ux_specification_types_1.PageTypeV2.ListReport, listReportConfig);
        const transferParameters = {
            v2Page,
            exportResults,
            appId: exportParameters.appId,
            baseId: calculateBaseId(pageInstance, exportParameters),
            appSchema: exportParameters.jsonSchema,
            ui5Version,
            factory,
            pageKeys,
            pageType: ux_specification_types_1.PageTypeV2.ListReport,
            logger: exportParameters.logger,
            entityPathArray: exportParameters['entityPath'],
            deletionRequest
        };
        (0, export_1.transferManifestEntriesAndFlexChange)(transferParameters, pageInstance, [], [], exportParameters.jsonSchema //starting point for target definition
        );
    }
    return exportResults;
}
/**
 * Run through the given AnalyticalListPage config and return respective manifest entry and flex changes
 * @param {ExportAnalyticalListPageV2Parameters} exportParameters - all API parameters needed for the export
 * @param ui5Version - SAP UI5 version
 * @param deletionRequest - if set to true, any manifest setting specified by entityPath gets deleted even if it comprises any unknown property
 *
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportAnalyticalListPage(exportParameters, ui5Version, deletionRequest = false) {
    const analyticalListPageConfig = exportParameters.page.config;
    const exportResults = getDefaultExportResult(exportParameters.fragments);
    exportResults.flexChanges = [];
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    //Instantiate base ID
    const pageKeys = [];
    const v2Page = (0, import_1.findAnalyticalListPage)(exportParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages, pageKeys, exportParameters.logger);
    if (!v2Page) {
        return exportResults;
    }
    if (!v2Page.component.settings) {
        v2Page.component.settings = {};
    }
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    if (analyticalListPageConfig && Object.keys(analyticalListPageConfig).length !== 0) {
        const factory = new factory_1.MetadataInstanceFactoryV2();
        const pageInstance = factory.createPageInstance(ux_specification_types_1.PageTypeV2.AnalyticalListPage, analyticalListPageConfig);
        const transferParameters = {
            v2Page,
            exportResults,
            appId: exportParameters.appId,
            baseId: calculateBaseId(pageInstance, exportParameters),
            appSchema: exportParameters.jsonSchema,
            ui5Version,
            factory,
            pageKeys,
            pageType: ux_specification_types_1.PageTypeV2.AnalyticalListPage,
            logger: exportParameters.logger,
            entityPathArray: exportParameters['entityPath'],
            deletionRequest
        };
        (0, export_1.transferManifestEntriesAndFlexChange)(transferParameters, pageInstance, [], [], exportParameters.jsonSchema //starting point for target definition
        );
    }
    return exportResults;
}
/**
 * Run through the given ObjectPage config and return respective manifest entry and flex changes
 * @param {ExportObjectPageV2Parameters} exportParameters - all API parameters needed for the export
 * @param ui5Version - SAP UI5 version
 * @param deletionRequest - if set to true, any manifest setting specified by entityPath gets deleted even if it comprises any unknown property
 *
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportObjectPage(exportParameters, ui5Version, deletionRequest = false) {
    const objectPageConfig = exportParameters.page.config;
    const entitySet = exportParameters.page.entitySet;
    const exportResults = getDefaultExportResult(exportParameters.fragments);
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    if (objectPageConfig) {
        const pageKeys = [];
        const v2Page = (0, import_1.findObjectPageV2)(exportParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages, entitySet, pageKeys);
        if (!v2Page) {
            (0, extensionLogger_1.log)(exportParameters.logger, {
                severity: "error" /* LogSeverity.Error */,
                message: i18next_1.default.t('NOOBJECTPAGE', { entitySetName: entitySet }),
                location: {
                    path: ux_specification_types_1.MANIFESTPATH,
                    range: [ux_specification_types_1.ManifestSection.generic]
                }
            });
            return exportResults;
        }
        const factory = new factory_1.MetadataInstanceFactoryV2();
        const pageInstance = factory.createPageInstance(ux_specification_types_1.PageTypeV2.ObjectPage, objectPageConfig);
        if (objectPageConfig.sections) {
            getExportClassesForSections(objectPageConfig, pageInstance, factory);
        }
        if (Object.keys(objectPageConfig).length !== 0) {
            const transferParameters = {
                v2Page,
                exportResults,
                appId: exportParameters.appId,
                baseId: calculateBaseId(pageInstance, exportParameters),
                appSchema: exportParameters.jsonSchema,
                ui5Version,
                factory,
                pageKeys,
                pageType: ux_specification_types_1.PageTypeV2.ObjectPage,
                logger: exportParameters.logger,
                entityPathArray: exportParameters['entityPath'],
                deletionRequest
            };
            (0, export_1.transferManifestEntriesAndFlexChange)(transferParameters, pageInstance, [], [], exportParameters.jsonSchema //starting point for target definition
            );
        }
    }
    return exportResults;
}
/**
 * Run through the given ObjectPage config and return respective manifest entry and flex changes
 * @param {ExportOverviewPageV2Parameters} exportParameters - all API parameters needed for the export
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
const exportOverviewPage = (exportParameters) => {
    const exportResults = getDefaultExportResult();
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    const factory = new factory_1.MetadataInstanceFactoryV2();
    const overviewPage = factory.createPageInstance(ux_specification_types_1.PageTypeV2.OverviewPage, exportParameters.page.config);
    if (exportParameters.page.config && Object.keys(exportParameters.page.config).length !== 0) {
        (0, export_1.transferManifestEntriesOVP)(overviewPage, exportResults, exportParameters.jsonSchema, exportParameters.jsonSchema, factory, [], exportParameters['entityPath']);
    }
    return exportResults;
};
/**
 * Exports a Fiori Element V2 application.
 * It converts the entries of the input application (config file) to corresponding manifest settings and flex changes
 * @param application - content of the config file of an application
 * @param manifest - app descriptor (manifest.json)
 * @param jsonSchema - application specific schema
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
const exportApplicationV2 = (application, manifest, jsonSchema) => {
    const exportResults = getDefaultExportResult();
    exportResults.manifest = JSON.parse(JSON.stringify(manifest));
    //transfer application settings
    const applicationV2 = Object.assign(new application_1.ApplicationV2(), application);
    applicationV2.settings = Object.assign(new application_1.AppSettings(), application['settings']);
    for (const key in jsonSchema.definitions.AppSettings['properties']) {
        const syncRule = (0, common_1.getReflectMetadata)(applicationV2.settings, key);
        if (syncRule && syncRule.manifest) {
            const path = syncRule.manifest.path();
            const manifestSection = (0, manifest_1.ensureManifestSectionByPathV2)(exportResults.manifest, path);
            if (application.settings && application.settings[key] !== undefined) {
                manifestSection[key] = application.settings[key];
            }
            else {
                delete manifestSection[key];
                (0, common_1.deleteEmptyStructure)(exportResults.manifest, path, false);
            }
        }
    }
    // transfer pages and routings
    const manifestPages = exportResults.manifest[ux_specification_types_1.ManifestSection.generic]?.pages;
    if (manifestPages && application['pages']) {
        (0, manifest_1.transformPageToNewManifestV2)(application.home, application['pages'], Object.values(manifestPages)[0]);
    }
    return exportResults;
};
/**
 * Exports a Fiori Element V2 page.
 * It converts the entries of the input page (config file) to corresponding manifest settings and flex changes
 * @param exportParametersV2 - list of parameters for the export; the list varies for the different schema types
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportPageV2(exportParametersV2, ui5Version) {
    if (exportParametersV2[ux_specification_types_1.SchemaType.ListReport]) {
        return exportListReportPage(exportParametersV2[ux_specification_types_1.SchemaType.ListReport], ui5Version);
    }
    else if (exportParametersV2[ux_specification_types_1.SchemaType.ObjectPage]) {
        return exportObjectPage(exportParametersV2[ux_specification_types_1.SchemaType.ObjectPage], ui5Version);
    }
    else if (exportParametersV2[ux_specification_types_1.SchemaType.OverviewPage]) {
        return exportOverviewPage(exportParametersV2[ux_specification_types_1.SchemaType.OverviewPage]);
    }
    else if (exportParametersV2[ux_specification_types_1.SchemaType.Application]) {
        const { application, manifest, jsonSchema } = exportParametersV2[ux_specification_types_1.SchemaType.Application];
        return exportApplicationV2(application, manifest, jsonSchema);
    }
    else if (exportParametersV2[ux_specification_types_1.SchemaType.AnalyticalListPage]) {
        return exportAnalyticalListPage(exportParametersV2[ux_specification_types_1.SchemaType.AnalyticalListPage], ui5Version);
    }
}
exports.exportPageV2 = exportPageV2;
/**
 * Exports the config change of a single entity of the config, as indicated by an entityPath
 * It converts the entries of the input page (config file) to corresponding manifest settings and flex changes
 * @param exportParametersV2 - list of parameters for the export; the list varies for the different schema types
 * @param ui5Version - the minUi5Version of the app
 * @param deletionRequest - if set to true, any manifest setting specified by entityPath gets deleted even if it comprises any unknown property
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportConfigEntityByPathV2(exportParametersV2, ui5Version, deletionRequest = false) {
    if (exportParametersV2[ux_specification_types_1.SchemaType.ListReport]) {
        return exportListReportPage(exportParametersV2[ux_specification_types_1.SchemaType.ListReport], ui5Version, deletionRequest);
    }
    else if (exportParametersV2[ux_specification_types_1.SchemaType.ObjectPage]) {
        return exportObjectPage(exportParametersV2[ux_specification_types_1.SchemaType.ObjectPage], ui5Version, deletionRequest);
    }
    else if (exportParametersV2[ux_specification_types_1.SchemaType.OverviewPage]) {
        return exportOverviewPage(exportParametersV2[ux_specification_types_1.SchemaType.OverviewPage]);
    }
    else if (exportParametersV2[ux_specification_types_1.SchemaType.AnalyticalListPage]) {
        return exportAnalyticalListPage(exportParametersV2[ux_specification_types_1.SchemaType.AnalyticalListPage], ui5Version, deletionRequest);
    }
}
exports.exportConfigEntityByPathV2 = exportConfigEntityByPathV2;
//# sourceMappingURL=exportPage.js.map