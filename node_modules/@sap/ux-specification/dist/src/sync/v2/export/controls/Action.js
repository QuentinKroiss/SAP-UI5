"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectPageFooterActionStandard = exports.ObjectPageHeaderActionStandard = exports.HeaderActionStandard = exports.SaveAndEditOP = exports.UpAndDownNavigationOP = exports.ShareOP = exports.Share = exports.FooterAction = exports.ToolBarAction = exports.Action = exports.buildIntentBasedActionId = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const decoration_1 = require("../../../common/decoration");
const common_1 = require("../../../common");
const types_1 = require("../../types");
/**
 * Create stable ID for Simple Action button
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Action button
 */
const getActionButtonId = (baseId, _idBreadcrumbs, breadcrumbs) => {
    const { actionId } = (0, common_1.getActionBreadcrumbParts)(breadcrumbs);
    return `${baseId}action::${(0, common_1.convertActionKeyToStableId)(actionId).replace(':2f', '::')}`;
};
/**
 * Create stable ID for Standard Action button
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Action button
 */
const getStandardActionButtonId = (baseId, _idBreadcrumbs, breadcrumbs) => {
    const { actionId } = (0, common_1.getActionBreadcrumbParts)(breadcrumbs);
    return `${baseId}template::${actionId}`;
};
/**
 * Create stable ID for Standard Action button on Object Page Footer
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Action button
 */
const getStandardFooterActionOPButtonId = (baseId, _idBreadcrumbs, breadcrumbs) => {
    const { actionId } = (0, common_1.getActionBreadcrumbParts)(breadcrumbs);
    return `${baseId}${types_1.OP_STANDARD_FOOTER_ACTION_PREFIX}${actionId}`;
};
/**
 * Create stable ID for Intent Based Action button
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Intent Based Action button
 */
const buildIntentBasedActionId = (baseId, _idBreadcrumbs, breadcrumbs) => {
    const { semanticObjectId, actionId } = (0, common_1.getActionBreadcrumbParts)(breadcrumbs);
    return `${baseId}action::${semanticObjectId}::${(0, common_1.convertActionKeyToStableId)(actionId)}`;
};
exports.buildIntentBasedActionId = buildIntentBasedActionId;
/**
 * Create stable ID for (Intent Based) Footer Action button
 *
 * @param {string} baseId Base Id of the control
 * @param {string[]} _idBreadcrumbs
 * @param {string[]} breadcrumbs
 * @returns {string} stable ID of Footer Action button
 */
const getFooterActionButtonId = (baseId, _idBreadcrumbs, breadcrumbs) => {
    const { actionId } = (0, common_1.getActionBreadcrumbParts)(breadcrumbs);
    return `${baseId}action::${(0, common_1.convertActionKeyToStableId)(actionId).replace(':2f', '::')}::Determining`;
};
const flexRuleForAction = {
    controlId: getActionButtonId,
    controlType: () => ux_specification_types_1.ControlType.Button,
    createFlexChange: decoration_1.exportToFlexChange
};
const flexRuleForStandardAction = {
    controlId: getStandardActionButtonId,
    controlType: () => ux_specification_types_1.ControlType.Button,
    createFlexChange: decoration_1.exportToFlexChange
};
const flexRuleForStandardFooterActionOP = {
    controlId: getStandardFooterActionOPButtonId,
    controlType: () => ux_specification_types_1.ControlType.Button,
    createFlexChange: decoration_1.exportToFlexChange
};
const flexRuleForFooterAction = {
    controlId: getFooterActionButtonId,
    controlType: () => ux_specification_types_1.ControlType.Button,
    createFlexChange: decoration_1.exportToFlexChange
};
class Action {
}
exports.Action = Action;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForAction
    })
], Action.prototype, "tooltip", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForAction
    })
], Action.prototype, "icon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForAction
    })
], Action.prototype, "activeIcon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForAction
    })
], Action.prototype, "type", void 0);
class ToolBarAction {
}
exports.ToolBarAction = ToolBarAction;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForAction
    })
], ToolBarAction.prototype, "tooltip", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForAction
    })
], ToolBarAction.prototype, "icon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForAction
    })
], ToolBarAction.prototype, "activeIcon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForAction
    })
], ToolBarAction.prototype, "type", void 0);
class FooterAction {
}
exports.FooterAction = FooterAction;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForFooterAction
    })
], FooterAction.prototype, "tooltip", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForFooterAction
    })
], FooterAction.prototype, "icon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForFooterAction
    })
], FooterAction.prototype, "activeIcon", void 0);
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForFooterAction
    })
], FooterAction.prototype, "type", void 0);
class Share {
}
exports.Share = Share;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForStandardAction
    })
], Share.prototype, "visible", void 0);
class ShareOP {
}
exports.ShareOP = ShareOP;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForStandardAction
    })
], ShareOP.prototype, "visible", void 0);
class UpAndDownNavigationOP {
}
exports.UpAndDownNavigationOP = UpAndDownNavigationOP;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForStandardAction
    })
], UpAndDownNavigationOP.prototype, "visible", void 0);
class SaveAndEditOP {
}
exports.SaveAndEditOP = SaveAndEditOP;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForStandardFooterActionOP,
        generate: decoration_1.addPatternForBindingChangeOfEnumOP
    })
], SaveAndEditOP.prototype, "visible", void 0);
class HeaderActionStandard {
}
exports.HeaderActionStandard = HeaderActionStandard;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForStandardAction
    })
], HeaderActionStandard.prototype, "visible", void 0);
class ObjectPageHeaderActionStandard {
}
exports.ObjectPageHeaderActionStandard = ObjectPageHeaderActionStandard;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForStandardAction
    })
], ObjectPageHeaderActionStandard.prototype, "visible", void 0);
class ObjectPageFooterActionStandard {
}
exports.ObjectPageFooterActionStandard = ObjectPageFooterActionStandard;
__decorate([
    (0, decoration_1.syncRule)({
        flex: flexRuleForStandardFooterActionOP
    })
], ObjectPageFooterActionStandard.prototype, "visible", void 0);
//# sourceMappingURL=Action.js.map