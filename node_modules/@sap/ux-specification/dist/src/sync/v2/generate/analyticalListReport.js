"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAnalyticalListReportSchemaV2 = void 0;
const utils_1 = require("./utils");
const import_1 = require("../import");
const common_1 = require("../../common");
const ux_specification_types_1 = require("@sap/ux-specification-types");
const listReport_1 = require("./listReport");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../extensionLogger");
const ROOT_PROPERTIES_ORDER = [
    'filterBar',
    'keyPerformanceIndicators',
    'chart',
    'table',
    'footer'
];
/**
 * Returns LineItem and Chart vizualizations from UI annotations based of qualifier.
 * @param {v2.SapUiAppPageV2} v2Page - actual page in the manifest
 * @param {EntityTypeAnnotations_UI} uIAnnotations - annotations of UI namespace of the given entityType
 */
function getVisualizations(v2Page, uIAnnotations) {
    const qualifier = v2Page?.component?.settings?.qualifier;
    const selectionPresentationVariant = uIAnnotations[`SelectionPresentationVariant#${qualifier}`];
    const presentationVariant = selectionPresentationVariant !== undefined ? selectionPresentationVariant['PresentationVariant'] : undefined;
    const vizualizations = presentationVariant !== undefined ? presentationVariant['Visualizations'] : [];
    let lineItem;
    let chart;
    for (const i in vizualizations) {
        const vizualization = vizualizations[i];
        if (vizualization.value.includes('@com.sap.vocabularies.UI.v1.LineItem')) {
            const lineItemName = vizualization.value.replace(ux_specification_types_1.UIVOCABULARYALPHADOT, '');
            lineItem = uIAnnotations[lineItemName];
        }
        else if (vizualization.value.includes('@com.sap.vocabularies.UI.v1.Chart')) {
            const chartName = vizualization.value.replace(ux_specification_types_1.UIVOCABULARYALPHADOT, '');
            chart = uIAnnotations[chartName];
        }
    }
    return {
        lineItem,
        chart
    };
}
/**
 * Adds missing annotation path to chart definition.
 * @param {Definition} appSchema - app specific JSON schema
 * @param {Chart} chartAnnotation - chart annotation data
 */
function addChart(appSchema, chartAnnotation) {
    const chartSettings = appSchema.definitions[ux_specification_types_1.DefinitionName.ChartSettings];
    const pathParts = chartAnnotation.fullyQualifiedName.split('@');
    chartSettings[ux_specification_types_1.SchemaTag.annotationPath] = `/${pathParts[0]}/@${pathParts[1]}`;
}
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param genericSchema - generic JSON schema of a list report
 * @param entityTypeName - the base entity type of the given page
 */
function generateAnalyticalListReportSchemaV2(generateParameters, genericSchema) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema.properties[ux_specification_types_1.PropertyName.table].anyOf[0]['$ref'] =
        common_1.DEFINITION_LINK_PREFIX + 'ALPResponsiveTable<LineItems>';
    const tableDefinitionResponsive = JSON.parse(JSON.stringify(appSchema.definitions.ALPResponsiveTable));
    tableDefinitionResponsive.properties['columns']['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.LineItems}`;
    tableDefinitionResponsive.properties['toolBar']['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.ToolBarLR}`;
    appSchema.definitions['ALPResponsiveTable<LineItems>'] = tableDefinitionResponsive;
    appSchema.properties[ux_specification_types_1.PropertyName.table]['anyOf'][1]['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}ALPGridTable<LineItems>`;
    const tableDefinitionGrid = JSON.parse(JSON.stringify(appSchema['definitions']['ALPGridTable']));
    tableDefinitionGrid.properties.columns['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.LineItems}`;
    tableDefinitionGrid.properties.toolBar['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.ToolBarLR}`;
    appSchema.definitions['ALPGridTable<LineItems>'] = tableDefinitionGrid;
    appSchema.properties[ux_specification_types_1.PropertyName.table]['anyOf'][2]['$ref'] =
        `${common_1.DEFINITION_LINK_PREFIX}ALPAnalyticalTable<LineItems>`;
    const tableDefinitionAnalytical = JSON.parse(JSON.stringify(appSchema.definitions['ALPAnalyticalTable']));
    tableDefinitionAnalytical.properties.columns['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.LineItems}`;
    tableDefinitionAnalytical.properties.toolBar['$ref'] = `${common_1.DEFINITION_LINK_PREFIX}${ux_specification_types_1.DefinitionName.ToolBarLR}`;
    appSchema.definitions['ALPAnalyticalTable<LineItems>'] = tableDefinitionAnalytical;
    // Remove Custom Column non existing extensions - TreeTableColumnsExtension does not exist in ALP
    (0, utils_1.removeElementsFromEnum)(appSchema.definitions.TableColumnExtensionTypeV2['enum'], [
        ux_specification_types_1.v2.TableColumnExtensionTypeV2.TreeTableColumnsExtension
    ]);
    const entityType = generateParameters.entitySet?.entityType;
    if (!entityType) {
        (0, extensionLogger_1.log)(generateParameters.logger, {
            severity: "error" /* LogSeverity.Error */,
            message: i18next_1.default.t('NOENTITYTYPE4SET', { entitySetName: generateParameters.entitySet?.name })
        });
    }
    else {
        // handle header actions
        (0, utils_1.addStandardHeaderActions)(appSchema);
        const pageKeys = [];
        const v2Page = (0, import_1.findAnalyticalListPage)(generateParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages, pageKeys, generateParameters.logger);
        const annotations = entityType?.annotations?.UI;
        const { lineItem, chart } = getVisualizations(v2Page, annotations);
        const lineItemAnnotation = lineItem || annotations.LineItem;
        const chartAnnotation = chart || annotations.Chart;
        //handle line items
        (0, utils_1.addLineItemsType)(appSchema, lineItemAnnotation, entityType);
        // handle chart item
        if (chartAnnotation) {
            addChart(appSchema, chartAnnotation);
        }
        //handle filter fields
        const selectionFieldAnnotation = entityType?.annotations?.UI?.SelectionFields;
        (0, utils_1.addSelectionFields)(appSchema, selectionFieldAnnotation, entityType);
        //add fields for createWithParameterDialog
        (0, common_1.addFieldsType)(appSchema, entityType);
        if (!v2Page) {
            (0, extensionLogger_1.log)(generateParameters.logger, {
                severity: "error" /* LogSeverity.Error */,
                message: i18next_1.default.t('NOLR'),
                location: {
                    path: ux_specification_types_1.MANIFESTPATH,
                    range: [ux_specification_types_1.ManifestSection.generic]
                }
            });
            return appSchema;
        }
        (0, utils_1.addTableColumnExtensions)(appSchema, entityType, v2Page, generateParameters.manifest, generateParameters.fragments);
        (0, listReport_1.addEnumForVariantPaths)(entityType, generateParameters.entitySet, appSchema, generateParameters.serviceAVT);
        // Delete generic definitions that have been replaced
        delete appSchema.definitions.ALPGridTable;
        delete appSchema.definitions.ALPResponsiveTable;
        delete appSchema.definitions.ALPAnalyticalTable;
        delete appSchema.definitions.GenericColumns;
        delete appSchema.definitions.TableColumnAction;
        delete appSchema.definitions.ToolBar;
        delete appSchema.definitions.GenericFooter;
        delete appSchema.definitions.Actions;
        delete appSchema.definitions.FieldPath;
    }
    (0, common_1.updatePropertyIndices)(appSchema, ROOT_PROPERTIES_ORDER);
    return appSchema;
}
exports.generateAnalyticalListReportSchemaV2 = generateAnalyticalListReportSchemaV2;
//# sourceMappingURL=analyticalListReport.js.map