"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateListReportSchemaV2 = exports.addEnumForVariantPaths = void 0;
const utils_1 = require("./utils");
const import_1 = require("../import");
const common_1 = require("../../common");
const i18next_1 = __importDefault(require("i18next"));
const ux_specification_types_1 = require("@sap/ux-specification-types");
const extensionLogger_1 = require("../../../extensionLogger");
const types_1 = require("../types");
const ROOT_PROPERTIES_ORDER = ['filterBar', 'table', 'footer'];
/**
 * Adds the enum types for QuickVariant and QuickVariantX, based on the entity type annotations
 * @param {EntityType} entityType
 * @param {EntitySet} entitySet - current entity set of the page or view
 * @param {Definition} appSchema - app specific JSON schema
 * @param {ConvertedMetadata} oDataServiceAVT - combined service metadata, as returned by annotation vocabularies tools
 */
function addEnumForVariantPaths(entityType, entitySet, appSchema, oDataServiceAVT) {
    (0, common_1.addEnumForSingleTabVariant)(entityType, appSchema, 'QuickVariant');
    (0, common_1.addEnumForMultiTabVariant)(appSchema, 'QuickVariantX', entitySet);
    (0, common_1.addEnumForVariantEntitySet)(oDataServiceAVT, appSchema, 'QuickVariantX');
}
exports.addEnumForVariantPaths = addEnumForVariantPaths;
/**
 * Generates an app specific schema for the FE V2 Listreport from the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {object} genericSchema - generic JSON schema of a list report
 * @returns appSchema - the application specific JSON schema
 */
function generateListReportSchemaV2(generateParameters, genericSchema) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema.properties.table['anyOf']['0']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.MULTISELECTTABLE;
    appSchema.properties.table['anyOf']['1']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.INLINEDELETETABLE;
    appSchema.properties.table['anyOf']['2']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.TREETABLE;
    appSchema.properties.table['anyOf']['3']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.ANALYTICALTABLE;
    appSchema.properties.table['anyOf']['4']['$ref'] = common_1.DEFINITION_LINK_PREFIX + types_1.GRIDTABLE;
    const responsiveTableMultiSelect = JSON.parse(JSON.stringify(genericSchema.definitions.ResponsiveTableWithMultiSelect));
    const responsiveTableInlineDelete = JSON.parse(JSON.stringify(genericSchema.definitions.ResponsiveTableWithInlineDelete));
    const treeTableDefinition = JSON.parse(JSON.stringify(genericSchema.definitions.TreeTable));
    const analyticalTableDefinition = JSON.parse(JSON.stringify(genericSchema.definitions.AnalyticalTable));
    const gridTableDefinition = JSON.parse(JSON.stringify(genericSchema.definitions.GridTable));
    const lrLineItems = {
        $ref: common_1.DEFINITION_LINK_PREFIX + ux_specification_types_1.DefinitionName.LineItems
    };
    responsiveTableMultiSelect.properties.columns = lrLineItems;
    responsiveTableInlineDelete.properties.columns = lrLineItems;
    treeTableDefinition.properties.columns = lrLineItems;
    analyticalTableDefinition.properties.columns = lrLineItems;
    gridTableDefinition.properties.columns = lrLineItems;
    const lrToolBar = common_1.DEFINITION_LINK_PREFIX + ux_specification_types_1.DefinitionName.ToolBarLR;
    appSchema.definitions[types_1.MULTISELECTTABLE] = responsiveTableMultiSelect;
    appSchema.definitions[types_1.INLINEDELETETABLE] = responsiveTableInlineDelete;
    appSchema.definitions[types_1.TREETABLE] = treeTableDefinition;
    appSchema.definitions[types_1.ANALYTICALTABLE] = analyticalTableDefinition;
    appSchema.definitions[types_1.GRIDTABLE] = gridTableDefinition;
    types_1.LINEITEMTABLETYPES.forEach((tableType) => {
        appSchema.definitions[tableType].properties.toolBar['$ref'] = lrToolBar;
    });
    const entityType = generateParameters.entitySet?.entityType;
    if (!entityType) {
        if (generateParameters.entitySet?.name) {
            (0, extensionLogger_1.log)(generateParameters.logger, {
                severity: "error" /* LogSeverity.Error */,
                message: i18next_1.default.t('NOENTITYTYPE4SET', { entitySetName: generateParameters.entitySet?.name })
            });
        }
    }
    else {
        // handle standard header actions
        (0, utils_1.addStandardHeaderActions)(appSchema);
        //handle line items
        const lineItemAnnotation = entityType?.annotations?.UI?.LineItem;
        if (lineItemAnnotation) {
            types_1.LINEITEMTABLETYPES.forEach((tableType) => {
                appSchema.definitions[tableType][ux_specification_types_1.SchemaTag.annotationPath] = (0, common_1.createAnnotationPath)(entityType?.fullyQualifiedName, lineItemAnnotation.term, lineItemAnnotation.qualifier);
            });
        }
        (0, utils_1.addLineItemsType)(appSchema, lineItemAnnotation, entityType);
        //handle filter fields
        const selectionFieldAnnotation = entityType?.annotations?.UI?.SelectionFields;
        (0, utils_1.addSelectionFields)(appSchema, selectionFieldAnnotation, entityType);
        //add fields for createWithParameterDialog
        (0, common_1.addFieldsType)(appSchema, entityType);
        // add entityProperties to a enum, in this case MultiEdit -> ignoredFields
        appSchema.definitions.MultiEdit.properties.ignoredFields['items']['enum'] = [];
        (0, utils_1.addEntityPropertiesToEnum)(appSchema.definitions.MultiEdit.properties.ignoredFields['items']['enum'], entityType);
        const pageKeys = [];
        const v2Page = (0, import_1.findListReportPageV2)(generateParameters.manifest[ux_specification_types_1.ManifestSection.generic].pages, pageKeys);
        if (!v2Page) {
            (0, extensionLogger_1.log)(generateParameters.logger, {
                severity: "error" /* LogSeverity.Error */,
                message: i18next_1.default.t('NOLR'),
                location: {
                    path: ux_specification_types_1.MANIFESTPATH,
                    range: [ux_specification_types_1.ManifestSection.generic]
                }
            });
            return appSchema;
        }
        (0, utils_1.addTableColumnExtensions)(appSchema, entityType, v2Page, generateParameters.manifest, generateParameters.fragments);
        addEnumForVariantPaths(entityType, generateParameters.entitySet, appSchema, generateParameters.serviceAVT);
        (0, common_1.addEnumForFilterBarAnnotationPath)(entityType, appSchema, ux_specification_types_1.DefinitionName.ListReportFilterBar);
        (0, common_1.addEnumFieldGroupAnnotationPath)(entityType, appSchema, ux_specification_types_1.DefinitionName.MultiEditV2);
        //Delete generic definitions
        delete appSchema.definitions.ResponsiveTableWithMultiSelect;
        delete appSchema.definitions.ResponsiveTableWithInlineDelete;
        delete appSchema.definitions.TreeTable;
        delete appSchema.definitions.AnalyticalTable;
        delete appSchema.definitions.GridTable;
        delete appSchema.definitions.GenericColumns;
        delete appSchema.definitions.TableColumnAction;
        delete appSchema.definitions.ToolBar;
        delete appSchema.definitions.Actions;
        delete appSchema.definitions.GenericFooter;
        delete appSchema.definitions.FieldPath;
        delete appSchema.definitions.Share;
    }
    (0, common_1.updatePropertyIndices)(appSchema, ROOT_PROPERTIES_ORDER);
    return appSchema;
}
exports.generateListReportSchemaV2 = generateListReportSchemaV2;
//# sourceMappingURL=listReport.js.map