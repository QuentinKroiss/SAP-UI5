import type { ExtensionLogger, FileData, Manifest } from '@sap/ux-specification-types';
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param {object} genericSchema - generic JSON schema of an object page
 * @param {string} entitySet - the base entity set name of the given page
 * @param {FileData[]} annotations - list of all annotation files (file content plus URI as identifier)
 * @param {object} manifest - manifest.json of the app
 * @param {FileData[]} [fragments] - Array with XML fragments.
 * @param {ExtensionLogger} logger - Logger class for logging messages
 *
 * @returns the app specific JSON schema
 */
export declare function generateObjectPageInterfaceV2(genericSchema: object, entitySet: string, annotations: FileData[], manifest: Manifest, fragments?: FileData[], logger?: ExtensionLogger): object;
/**
 * Generates the app specific schema of a list report out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entitySet - the base entity set name of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param {FileData[]} fragments - list of fragment files and their content
 * @param {ExtensionLogger} logger - Logger class for logging messages
 *
 * @returns the app specific JSON schema
 */
export declare function generateListReportInterfaceV2(genericSchema: object, entitySet: string, annotations: FileData[], manifest: Manifest, fragments?: FileData[], logger?: ExtensionLogger): object;
/**
 * Generates the app specific schema of an analytical list page out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entityType - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param {FileData[]} fragments - list of fragment files and their content
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param {string} appId - application ID
 *
 * @returns the app specific JSON schema
 */
export declare function generateAnalyticalListPageInterfaceV2(genericSchema: object, entitySet: string, annotations: FileData[], manifest: Manifest, fragments?: FileData[], logger?: ExtensionLogger): object;
/**
 * Generates the app specific schema of an overview page
 * @param genericSchema - file content of the generic schema
 * @param manifest - manifest.json of the app
 *
 * @returns the generic schema, as equivalent to the app schema
 */
export declare function generateOVPInterfaceV2(genericSchema: object, manifest: Manifest): object;
//# sourceMappingURL=generate.d.ts.map