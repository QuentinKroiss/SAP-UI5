"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.doNotDelete = exports.addPatternForBindingChangeOfEnumOPV4 = exports.addPatternForBindingChangeOfEnumOP = exports.addPatternForBindingChangeOfEnumLR = exports.getActionBreadcrumbParts = exports.buildColumnControlId = exports.BindingValueV4 = exports.BindingValue = exports.escapeId = exports.convertSectionId = exports.buildControlIdForPage = exports.buildControlIdFromParent = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const utils_1 = require("../utils");
/**
 * General export rule, joining all given breadcrumbs to the base ID
 * @param baseId - base ID, first part of the stable ID
 * @param idBreadcrumbs - array of ID parts
 */
const buildControlIdFromParent = (baseId, idBreadcrumbs) => {
    return baseId + idBreadcrumbs.join('::');
};
exports.buildControlIdFromParent = buildControlIdFromParent;
/**
 * Export rule for pages
 * @param baseId - base ID, first part of the stable ID
 * @param idBreadcrumbs - array of ID parts
 * @param breadcrumbs - array of breadcrumbs
 */
const buildControlIdForPage = (baseId, idBreadcrumbs, breadcrumbs) => {
    return baseId + idBreadcrumbs.join('::') + breadcrumbs[0];
};
exports.buildControlIdForPage = buildControlIdForPage;
/**
 * Converts the section id to the right string for the stable id:
 * If the corresponsing facet has ID maintained, we must take this ID. If ID is not present, take the navigation path.
 * @param sectionId - old ID that shall get converted
 * @param breadcrumbs - array of breadcrumbs
 * @param title - title from JSON schema, comprising the facet ID
 */
const convertSectionId = (sectionId, title) => {
    let convertedSectionId;
    const prefix = ux_specification_types_1.FacetTitlePrefix;
    if (title !== undefined && title.includes(prefix)) {
        convertedSectionId = title.split(prefix)[1];
    }
    else {
        convertedSectionId = sectionId.replace(new RegExp('/@', 'g'), '::').replace(/@com.sap/g, 'com.sap');
    }
    return convertedSectionId;
};
exports.convertSectionId = convertSectionId;
function escapeId(sParam) {
    /* escape all characters not allowed in stable ids with :<hexcode>
     * as we use : as escape character, also escape :
     */
    return sParam.replace(/[^-A-Za-z0-9_.:]/g, function (c) {
        const sCode = c.charCodeAt(0).toString(16);
        return `:${sCode.length === 1 ? '0' : ''}${sCode}`;
    });
}
exports.escapeId = escapeId;
/**
 * V2 - Binding Change values, will be added on object pages  */
var BindingValue;
(function (BindingValue) {
    BindingValue["Editable"] = "{ui>/editable}";
    BindingValue["NotEditable"] = "{= !${ui>/editable}}";
})(BindingValue || (exports.BindingValue = BindingValue = {}));
/**
 * V4 - Binding Change values, will be added on object pages  */
var BindingValueV4;
(function (BindingValueV4) {
    BindingValueV4["Editable"] = "{ui>/isEditable}";
    BindingValueV4["NotEditable"] = "{= !${ui>/isEditable}}";
})(BindingValueV4 || (exports.BindingValueV4 = BindingValueV4 = {}));
/**
 * Consolidates the list of id's and other breadcrumbs into one list, for finding the right stable ID for a column
 * @param idBreadcrumbs - array of ID parts
 * @param localBreadcrumbs - array of breadcrumbs
 * @param title - (section) title = facet ID
 * @returns the consolidated breadcrumbs' list
 */
function mapBreadcrumbs(idBreadcrumbs, localBreadcrumbs, title) {
    let sectionId;
    idBreadcrumbs = idBreadcrumbs.map(function (item) {
        if (item === ux_specification_types_1.PropertyName.sections) {
            for (let index = 0; index < localBreadcrumbs.length; index++) {
                const breadcrumb = localBreadcrumbs[index];
                if (breadcrumb === ux_specification_types_1.PropertyName.sections) {
                    sectionId = localBreadcrumbs[index + 1];
                    if (sectionId.indexOf(ux_specification_types_1.FacetBase.LineItem) !== -1) {
                        localBreadcrumbs[index + 1] = (0, exports.convertSectionId)(sectionId, title) + '::Table';
                        return localBreadcrumbs[index + 1];
                    }
                }
            }
        }
        return item;
    });
    return { idBreadcrumbs };
}
/**
 * Export rule for table columns
 * @param baseId - base ID, first part of the stable ID
 * @param idBreadcrumbs - array of ID parts
 * @param breadcrumbs - array of breadcrumbs
 * @param controlType - controlType function of ecorators, not used here
 * @param title - title from JSON schema, comprising the facet ID
 */
const buildColumnControlId = (baseId, idBreadcrumbs, breadcrumbs, _controlType, title) => {
    let tableId = 'listReport'; //default
    const localBreadcrumbs = [...breadcrumbs];
    ({ idBreadcrumbs } = mapBreadcrumbs(idBreadcrumbs, localBreadcrumbs, title));
    if (localBreadcrumbs[0] === ux_specification_types_1.PropertyName.sections) {
        tableId = localBreadcrumbs[1]
            .replace(/::com.sap.vocabularies/g, ux_specification_types_1.VOCWITHSLASH)
            .replace(/::@com.sap.vocabularies/g, ux_specification_types_1.VOCWITHSLASH);
    }
    else if (idBreadcrumbs[0] === ux_specification_types_1.PropertyName.table) {
        tableId = idBreadcrumbs[0];
    }
    const lastIdPart = localBreadcrumbs[localBreadcrumbs.length - 1]
        .replace(/::com.sap.vocabularies/g, ux_specification_types_1.VOCWITHSLASH)
        .replace(/::@com.sap.vocabularies/g, ux_specification_types_1.VOCWITHSLASH)
        .replace('sTarget/@', 'sTarget::@')
        .replace('/', ':2f');
    let fullId;
    const splitPoint = lastIdPart.indexOf(':::');
    if (lastIdPart.startsWith('DataField') && splitPoint > -1) {
        fullId = `${baseId}template:::TableColumn:::${lastIdPart.substring(0, splitPoint)}:::sSmartTableId::${tableId.replace('::Table', ':3a:3aTable')}:::${lastIdPart.substring(splitPoint + 3)}`;
    }
    else {
        fullId = `${baseId}${idBreadcrumbs.join('::')}-${lastIdPart}`;
    }
    return escapeId(fullId);
};
exports.buildColumnControlId = buildColumnControlId;
/**
 * Split up action breadcrumb and return different parts from it
 * @param breadcrumbs - array of breadcrumbs
 * @returns {object} - actionType, semanticObjectId, actionId of action
 */
const getActionBreadcrumbParts = (breadcrumbs) => {
    const actionIdParts = breadcrumbs[breadcrumbs.length - 1].split(':::');
    let actionType, semanticObjectId, actionId;
    if (actionIdParts.length > 2) {
        actionType = actionIdParts[0];
        semanticObjectId = actionIdParts[1].split('::')[1];
        actionId = actionIdParts[2].split('::')[1];
    }
    else if (actionIdParts.length === 2) {
        actionType = actionIdParts[0];
        actionId = actionIdParts[1].split('sAction::')[1];
    }
    else {
        actionId = actionIdParts[0];
    }
    return { actionType, semanticObjectId, actionId };
};
exports.getActionBreadcrumbParts = getActionBreadcrumbParts;
/**
 * Determines the valid pattern for a binding change
 * @param schemaDefinition - definition in the JSON schema
 * @returns the pattern as string
 */
function determinePattern(schemaDefinition) {
    let pattern = ux_specification_types_1.BindingPropertyRegexAsString;
    if (schemaDefinition.enum) {
        let enumPattern;
        schemaDefinition.enum.forEach((enumValue) => {
            if (!enumValue.toString().startsWith('{')) {
                enumPattern = enumPattern ? `${enumPattern}|${enumValue.toString()}` : enumValue.toString();
            }
        });
        pattern = `^(${enumPattern})$|${pattern}`;
    }
    if (schemaDefinition['type'] && schemaDefinition['type'] === 'boolean') {
        pattern = `^(false|true)$|${pattern}`;
    }
    return pattern;
}
/**
 * Reuseable function for strings that allow binding changes
 * @param schema - the complete JSON schema
 * @param definition - definition in the JSON schema, to be updated
 * @param propertyName - property in the properties' list of the given definition
 * @param bindingValues - values that shall be added to the resulting enum
 */
const addPatternForBindingChangeOfEnum = (schema, definition, propertyName, bindingValues) => {
    const propertyList = definition && definition['properties'];
    if (propertyList[propertyName].pattern) {
        return; //as already processed
    }
    const originalDefinition = propertyList[propertyName];
    let resultDefinition = originalDefinition;
    const targetDefinition = originalDefinition.$ref
        ? schema['definitions'][originalDefinition.$ref.split(utils_1.DEFINITION_LINK_PREFIX)[1]]
        : originalDefinition;
    const description = originalDefinition.description ? originalDefinition.description : targetDefinition.description;
    const pattern = determinePattern(targetDefinition);
    if (targetDefinition['type'] && targetDefinition['type'] === 'boolean') {
        //Always an enum, always with more than one value
        resultDefinition = { enum: [false, true] };
    }
    if (bindingValues && resultDefinition['enum']) {
        bindingValues.forEach((value) => {
            if (resultDefinition['enum'].indexOf(value) === -1) {
                resultDefinition['enum'].push(value);
            }
        });
    }
    propertyList[propertyName] = {
        pattern: pattern,
        anyOf: [
            resultDefinition,
            {
                type: 'string'
            }
        ]
    };
    if (description) {
        propertyList[propertyName].description = description;
        delete originalDefinition.description;
    }
};
const addPatternForBindingChangeOfEnumLR = (schema, definition, propertyName) => {
    addPatternForBindingChangeOfEnum(schema, definition, propertyName);
};
exports.addPatternForBindingChangeOfEnumLR = addPatternForBindingChangeOfEnumLR;
const addPatternForBindingChangeOfEnumOP = (schema, definition, propertyName) => {
    const bindingValues = Object.values(BindingValue);
    addPatternForBindingChangeOfEnum(schema, definition, propertyName, bindingValues);
};
exports.addPatternForBindingChangeOfEnumOP = addPatternForBindingChangeOfEnumOP;
const addPatternForBindingChangeOfEnumOPV4 = (schema, definition, propertyName) => {
    const bindingValues = Object.values(BindingValueV4);
    addPatternForBindingChangeOfEnum(schema, definition, propertyName, bindingValues);
};
exports.addPatternForBindingChangeOfEnumOPV4 = addPatternForBindingChangeOfEnumOPV4;
/**
 * sync rule for preventing the deletion of a property
 */
function doNotDelete() {
    return;
}
exports.doNotDelete = doNotDelete;
//# sourceMappingURL=control.js.map