"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataFactory = void 0;
class MetadataFactory {
    /**
     * Sub-classes for V2 and V4 have to pass their specific (reflect) metadata classes:
     * @param controls - list of imported metadata classes for controls
     * @param pages - list of imported metadata classes for pages
     * @param pageTypes - list of supported pages, entry point to further definitions
     */
    constructor(controls, pages, pageTypes) {
        this.controls = controls;
        this.pages = pages;
        this.pageTypes = pageTypes;
    }
    /**
     * Creates an instance of a metadata class for a given (complex) property of a JSON schema
     * @param {PageTypeV2} pageType - page type of a Fiori Element
     * @param schemaPropertyName - name of the complex property in the JSON schema of the page.
     *                             Used as fallback if no metadataclass can be found by evaluating controlPropertyValue.
     * @param data - data object from which the values shall be taken over, representing a part of the config
     * @param controlPropertyValue - value of a controling property that categorizes the complex property, e.g. table type or card template
     * @returns a class instance comprising the reflect metadata for import or export.
     *          If no metadata class could be identified, assumption is that no dedicated handler class exists; thus the original data object is returned as is.
     */
    createInstance(pageType, schemaPropertyName, data, controlPropertyValue) {
        let metadataClass = this.controls[controlPropertyValue]
            ? this.controls[controlPropertyValue]
            : this.controls[schemaPropertyName];
        if (!metadataClass) {
            metadataClass = this.pageTypes[pageType][controlPropertyValue]
                ? this.pageTypes[pageType][controlPropertyValue]
                : this.pageTypes[pageType][schemaPropertyName];
        }
        return metadataClass ? Object.assign(new metadataClass(), data) : data;
    }
    /**
     * Creates an instance of a metadata class for a given page
     * @param {PageTypeV2} pageType - page type of a Fiori Element
     * @param data - data to be taken over (from the config)
     * @returns a class instance comprising the reflect metadata for import or export
     */
    createPageInstance(pageType, data) {
        const metadataClass = this.pages[pageType];
        return Object.assign(new metadataClass(), data);
    }
}
exports.MetadataFactory = MetadataFactory;
//# sourceMappingURL=factory.js.map