import type { Definition } from 'typescript-json-schema';
import type { SyncRule, DeprecatedProperties, ExtensionLogger } from '@sap/ux-specification-types/dist';
/**
 * Transfers the value of a single manifest setting to the config
 * @param syncRule - Metadata rule
 * @param manifestSection - Section in manifest.json
 * @param propertyKey - Key of the property or setting
 * @param configPart - Part of the config JSON
 * @param sectionId - Section or facet ID
 * @param breadcrumbs - list of breadcrumbs or id's describing the keys of all hierarchy levels
 */
export declare function importProperty(syncRule: SyncRule, manifestSection: {}, propertyKey: string, configPart: {
    [key: string]: any;
}, sectionId?: string, breadcrumbs?: string[]): void;
/**
 * Validation during import: check if properties are marked as deprecated.
 * If so, log them.
 * @param deprecatedProperties - existing list, to be actualized
 * @param manifestSection - Section in manifest.json
 * @param path - path to the section in manifest
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
export declare function checkDeprecatedProperties(deprecatedProperties: DeprecatedProperties | undefined, manifestSection: {}, path: string, logger?: ExtensionLogger): void;
/**
 * Determines the title of a section representation in the app schema, main aspect is checking the facet ID
 * @param schemaSection - Section in manifest.json
 * @param jsonSchema - app specific schema
 */
export declare function getSectionTitle(schemaSection: Definition, jsonSchema: Definition): string | undefined;
/**
 * Method returns target by resolving custom column reference name.
 * For example - 'TableCustomColumns<dummyTarget>' is resolved as 'dummyTarget'.
 * @param {string} ref Reference key.
 * @returns {string | undefined} Resolved target.
 */
export declare function getTargetFromCustomColumnRef(ref: string): string | undefined;
/**
 * Removes part of a given config, if empty
 * @param {object} config - config part
 * @param {string} structure - part of config to be removed
 */
export declare function removeEmptyStructure(config: object, structure: string): void;
//# sourceMappingURL=utils.d.ts.map