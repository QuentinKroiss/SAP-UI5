"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fillFlexChangeContent = exports.parseChangeString = exports.createChangeString = void 0;
const flexUtils = __importStar(require("@ui5/flexibility-utils"));
const changesUtils = flexUtils.default.change;
const defaultValues = {
    isCustomer: false,
    sapui5Version: ' ', // UI5 version should be set via exportConfig(). This is the fallback in case it's missing
    creatingTool: 'SAPFioriTools',
    type: 'propertyChange'
};
/**
 * Create a change as string (calls changeUtils from ui5-flexibility-utils)
 * @param change - properties required to create the change
 * @param manifest - the manifest.json file
 */
function createChangeString(change, manifest) {
    let changeString = '';
    try {
        for (const defaultValue in defaultValues) {
            if (change[defaultValue] === undefined) {
                change[defaultValue] = defaultValues[defaultValue];
            }
        }
        changeString = changesUtils.createChangeString(change, manifest);
    }
    catch (error) {
        console.error(`Error while create flex change.`, error);
    }
    return changeString;
}
exports.createChangeString = createChangeString;
/**
 * Parse string and return the change as object (calls changeUtils from ui5-flexibility-utils)
 * @param changeString - string with serialized change
 */
function parseChangeString(changeString) {
    try {
        return changesUtils.parse(changeString);
    }
    catch (error) {
        return false;
    }
}
exports.parseChangeString = parseChangeString;
/**
 * Creates a flex change based on the given config information
 * @param configObject - current (sub)object of the configuration file
 * @param breadcrumbs - list of breadcrumbs, i.e. ID parts for building the stable ID
 * @param syncRule - export rule from the object classes decorator
 * @param ui5Version - SAP UI5 version
 * @param baseId - selector id of the current page
 * @param ids - list of parent & child ids
 * @param title - title from the app schema (comprising for instance the facet ID)
 * @param key - key of the given property
 * @param layer - layer
 * @returns {ChangeDefinitionInCreation} - the newly created flex change
 */
function fillFlexChangeContent(configObject, syncRule, ui5Version, key, controlId) {
    const isCustomer = ui5Version.layer ? ui5Version.layer === "CUSTOMER_BASE" /* FlexChangeLayer.Customer */ : true;
    const flexChange = {
        controlId, //syncRule.flex.controlId(baseId, ids, breadcrumbs, syncRule.flex.controlType, title),
        controlType: syncRule.flex.controlType(),
        content: {
            property: key
        },
        sapui5Version: ui5Version.ui5Version,
        isCustomer
    };
    if (configObject[key] !== undefined) {
        if (syncRule.flex.exportFlexValue) {
            syncRule.flex.exportFlexValue(flexChange, configObject, key);
        }
        else if (configObject[key].toString().startsWith('{')) {
            flexChange.content.newBinding = configObject[key];
            flexChange.type = 'propertyBindingChange';
        }
        else {
            flexChange.content.newValue = configObject[key];
        }
    }
    else {
        flexChange.content.newValue = null;
    }
    return flexChange;
}
exports.fillFlexChangeContent = fillFlexChangeContent;
//# sourceMappingURL=flexUtils.js.map