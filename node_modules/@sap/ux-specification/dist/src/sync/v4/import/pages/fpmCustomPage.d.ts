import type { v4, ImportFPMCustomPageV4Parameters, SchemaDefinition, PageConfig, ExtensionLogger, ImportObjectPageV4Parameters } from '@sap/ux-specification-types';
import type { ExtensionFileData } from '../../types';
/**
 * Method coverts xml file with json schema to page config.
 * @param {ExtensionFileData} fileData XML file data.
 * @param {SchemaDefinition} schema Schema of target config.
 * @param {ExtensionLogger} logger Logger.
 * @returns {PageConfig} Converted config.
 */
export declare function convertXmlFileToConfig(fileData: ExtensionFileData, schema: SchemaDefinition, logger: ExtensionLogger): PageConfig;
/**
 * Imports the content of fpm custom page by parsing associated view file.
 * @param {ImportFPMCustomPageV4Parameters} importParameters Object comprising all input data.
 * @param {FeatureToggle[]} [featureToggles] - array of supported features.
 * @returns {v4.ListReportConfigV4 | undefined} Result of import.
 */
export declare function createCustomPageConfig(importParameters: ImportFPMCustomPageV4Parameters): v4.ListReportConfigV4 | undefined;
/**
 * Imports the content of fpm custom page by parsing associated fragment file.
 * @param {ImportObjectPageV4Parameters} importParameters Object comprising all input data.
 * @param {string} fragmentName Fragment full namespace.
 * @param {FeatureToggle[]} [featureToggles] - array of supported features.
 * @returns {v4.ListReportConfigV4 | undefined} Result of import.
 */
export declare function createCustomFragmentConfig(importParameters: ImportObjectPageV4Parameters, fragmentName: string): v4.ListReportConfigV4 | undefined;
//# sourceMappingURL=fpmCustomPage.d.ts.map