import type { ExtensionLogger, FileData, Manifest, FeatureToggle } from '@sap/ux-specification-types';
import { TemplateType } from '@sap/ux-specification-types';
/**
 * Generates the app specific schema of an object page out of the generic schema for the same page.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entitySetName - the base entity set of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param {FileData[]} fragments - list of fragment files and their content
 * @param {string} contextPath - contextPath of the actual (object) page
 * @param {object} genericMacrosSchema - generic macros schema of the app
 * @param {FeatureToggle[]} [featureToggles] - array of supported features
 *
 * @returns the app specific JSON schema
 */
export declare function generateObjectPageInterfaceV4(genericSchema: object, entitySetName: string, annotations: FileData[], manifest: Manifest, logger?: ExtensionLogger, fragments?: FileData[], contextPath?: string, genericMacrosSchema?: object, featureToggles?: FeatureToggle[]): object;
/**
 * Generates the app specific schema of a list report out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {TemplateType} templateType - the template type allows distinguishing LR and ALP
 * @param genericSchema - generic JSON schema of a list report
 * @param entitySetName - the base entity set of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param manifest - manifest.json of the app
 *
 * @returns the app specific JSON schema
 */
export declare function generateListReportInterfaceV4(templateType: TemplateType, genericSchema: object, entitySetName: string, annotations: FileData[], logger?: ExtensionLogger, manifest?: Manifest, contextPath?: string): object;
/**
 * Generates the app specific schema of a freestyle page out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {TemplateType} templateType - the template type allows distinguishing LR and ALP
 * @param genericSchema - generic JSON schema of a list report
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param manifest - manifest.json of the app
 *
 * @returns the app specific JSON schema
 */
export declare function generateFreestyleInterfaceV4(templateType: TemplateType, genericSchema: object, annotations: FileData[], manifest?: Manifest, _entitySetName?: string, logger?: ExtensionLogger): object;
/**
 * Generates the app specific schema of a FPM Custom page out of the generic schema.
 * @param {object} genericSchema - generic JSON schema of a list report.
 * @param {string} routingId - page id in routing.
 * @param {Manifest} manifest - manifest.json of the app.
 * @param {FileData[]} views - array of views.xml files.
 * @param {FeatureToggle[]} [featureToggles] - array of supported features.
 * @param {ExtensionLogger} [logger] - Logger class for logging messages.
 *
 * @returns the app specific JSON schema.
 */
export declare function generateFPMCustomPageInterfaceV4(genericSchema: object, routingId: string, manifest: Manifest, views: FileData[], annotations: FileData[], featureToggles?: FeatureToggle[], logger?: ExtensionLogger): object;
//# sourceMappingURL=generate.d.ts.map