"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFragments = void 0;
const macros_1 = require("../../utils/macros");
const utils_1 = require("../../utils/utils");
const generator_1 = require("./generator");
/**
 * Method to populate all templates/fragments by parsing manifest extensions.
 * @param manifestSections Object containing sections
 * @param templates Templates to populate
 */
function populateTemplates(manifestSections, templates) {
    if (typeof manifestSections === 'object') {
        for (const id in manifestSections) {
            const section = manifestSections[id];
            if ('template' in section && section.template && typeof section.template === 'string') {
                templates.push(section.template);
            }
            if ('subSections' in section) {
                populateTemplates(section.subSections, templates);
            }
        }
    }
}
/**
 * Generates schema for custom extension fragments.
 * @param {SchemaDefinition} appSchema - Schema of the app
 * @param {SchemaDefinition} genericMacrosSchema - generic macros schema of the app
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {string} pageId - page id from manifest targets
 *
 * @returns the app specific JSON schema
 */
function resolveFragments(appSchema, genericMacrosSchema, generateParameters, pageId) {
    const targetManifest = (0, utils_1.getManifestPage)(generateParameters.manifest, pageId);
    const templates = [];
    populateTemplates(targetManifest?.options?.settings.content?.body?.sections || {}, templates);
    for (const fragmentName of templates) {
        if (!fragmentName) {
            continue;
        }
        const definition = {
            additionalProperties: false,
            description: 'Custom Extension Fragment',
            metadata: {},
            properties: {}
        };
        const definitionKey = (0, macros_1.getCustomExtensionFragmentDefinitionKey)(fragmentName);
        appSchema['definitions'][definitionKey] = definition;
        const extensionFile = (0, utils_1.getPageCustomExtensionFile)(generateParameters.fragments, targetManifest, generateParameters.manifest, 'fragment', fragmentName);
        if (extensionFile) {
            // assign relative file path to project for fragment
            definition.metadata.filePath = extensionFile.relativeFilePath;
            // get fragment schema
            const { properties = {}, definitions = {} } = (0, generator_1.generateMacrosSchemaDefinition)(genericMacrosSchema, extensionFile, generateParameters.serviceAVT, generateParameters.logger) || {};
            definition.properties = properties;
            // copy schema definitions from macros schema to app schema
            for (const i in definitions) {
                if (!appSchema.definitions[i]) {
                    appSchema.definitions[i] = definitions[i];
                }
            }
        }
    }
    return genericMacrosSchema;
}
exports.resolveFragments = resolveFragments;
//# sourceMappingURL=pageExtensions.js.map