import { Visualization } from '@sap/ux-specification-types';
import type { ExtensionLogger, GenerateAppSchemaParameters } from '@sap/ux-specification-types';
import type { AnnotationTerm, EntityType, ConvertedMetadata } from '@sap-ux/vocabularies-types';
import type { SelectionFields } from '@sap-ux/vocabularies-types/vocabularies/UI';
import type { Definition } from 'typescript-json-schema';
/**
 * Adds the selection fields to the app schema, as properties of the FilterBar
 * @param {EntityType} entityType - the entity type as part of the AVT ConvertedMetadata
 * @param {Definition} appSchema - the app specific schema that shall get enhanced
 * @param {AnnotationTerm<SelectionFields>} selectionFieldsAnnotation - the UI.SelectionField annotation
 * @param {Definition} [selectionFieldsDefinition] - Schema definitions of selection fields
 */
export declare function addSelectionFields(entityType: EntityType, appSchema: Definition, selectionFieldsAnnotation: AnnotationTerm<SelectionFields>, selectionFieldsDefinition?: Definition): Definition;
/**
 * An annotationPath must be analyzed, to find the right target annotation and visualization
 * @param annotationPath - given annotationPath
 * @param uIAnnotations - annotations of UI namespace of the given entityType
 * @param serviceAVT Combined service metadata, as returned by annotation vocabularies tools.
 * @param viewKey - allows to distinguish the different view types (LR or ALP)
 * @param visualizationType - allows to find the right visualization if there are many.
 * @param logger - extension logger.
 * @returns { visualization: string describing the visualization of the annotation,
 *            targetAnnotation: the target annotation behind the visualization
 *            namespace: namespace of the annotation,
 *            title: title to be shown, derived from the annotation }
 */
export declare function analyzeViewAnnotation(annotationPath: string, uIAnnotations: object, serviceAVT: ConvertedMetadata, viewKey?: string, visualizationType?: Visualization, logger?: ExtensionLogger): {
    visualization: string;
    targetAnnotation: string;
    namespace: string;
    title: string;
};
/**
 * Generates an app specific schema for the FE V4 ListReport from the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param genericSchema  - generic JSON schema of an object page
 * @param {string} templateName - allows to distinguish list report from ALP
 * @param {string} contextPath - entity set (AVT object) that is relevant for the given page
 *
 * @returns {object} application-specific schema of the list report
 */
export declare function generateListReportSchemaV4(generateParameters: GenerateAppSchemaParameters, genericSchema: object, templateName: string, contextPath: string): object;
//# sourceMappingURL=listReport.d.ts.map