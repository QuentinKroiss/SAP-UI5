"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.controllerExtensions = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const PAGE_TYPE_TO_CONTROLLER_EXTENSION_MAP = new Map([
    [ux_specification_types_1.PageTypeV2.ListReport, ux_specification_types_1.v4.SAPUI5_VIEW_EXTENSION_LIST_REPORT],
    [ux_specification_types_1.PageTypeV2.ObjectPage, ux_specification_types_1.v4.SAPUI5_VIEW_EXTENSION_OBJECT_PAGE]
]);
/**
 * Method transfers values of 'controllerNames' and 'controllerName' from source to target.
 * Method can be uses in both ways - import or export.
 * @param {SapUi5ControllerExtensionV4} source - source object
 * @param {SapUi5ControllerExtensionV4} target - target object
 */
const applyControllerNameProperties = (source, target) => {
    const properties = ['controllerNames', 'controllerName'];
    for (const property of properties) {
        if (property in source) {
            target[property] = source[property];
        }
        else if (property in target) {
            // Deletion of property happens
            delete target[property];
        }
    }
};
/**
 * Method returns extension key for import(page.json).
 * @param {string} manifestKey - extension name in manifest.
 * @returns - extension key for import.
 */
const getExtensionKeyForImport = (manifestKey) => {
    for (const [pageType, key] of PAGE_TYPE_TO_CONTROLLER_EXTENSION_MAP) {
        if (manifestKey?.startsWith(key)) {
            // Replace SAPUI5 specific key like 'sap.fe.templates.ObjectPage.ObjectPageController' with more readable PageTypeV2
            let configKey = pageType;
            if (manifestKey.includes('#')) {
                // Append with page id
                const id = manifestKey.split('#')[1]?.split('::')[1];
                configKey += `#${id}`;
            }
            return configKey;
        }
    }
    return undefined;
};
/**
 * Method returns extension key for export(manifest.json).
 * @param {string} configKey - extension name in config.
 * @param {string} appId - application id.
 * @returns - extension key for export.
 */
const getExtensionKeyForExport = (configKey, appId) => {
    let manifestKey = '';
    for (const [pageType, key] of PAGE_TYPE_TO_CONTROLLER_EXTENSION_MAP) {
        if (configKey.startsWith(pageType)) {
            manifestKey = key;
        }
    }
    const idParts = configKey.split('#');
    if (idParts.length > 1) {
        const pageId = idParts[1];
        manifestKey = `${manifestKey}#${appId}::${pageId}`;
    }
    return manifestKey;
};
exports.controllerExtensions = {
    manifest: {
        path: () => `sap.ui5/extends/extensions/${ux_specification_types_1.v4.SAPUI5_CONTROLLER_EXTENSION}`,
        import: (extensions) => {
            const result = {};
            if (extensions && typeof extensions === 'object') {
                for (const manifestKey in extensions) {
                    const configKey = getExtensionKeyForImport(manifestKey);
                    if (configKey) {
                        result[configKey] = {};
                        applyControllerNameProperties(extensions[manifestKey], result[configKey]);
                    }
                }
            }
            return Object.keys(result).length ? result : undefined;
        },
        export: (manifestSection, configObject, key) => {
            const appId = configObject?.id || '';
            const configExtensions = configObject?.settings?.[key] || {};
            // Go through all config extensions
            for (const configKey in configExtensions) {
                const manifestKey = getExtensionKeyForExport(configKey, appId);
                if (!manifestSection[manifestKey]) {
                    manifestSection[manifestKey] = {};
                }
                applyControllerNameProperties(configExtensions[configKey], manifestSection[manifestKey]);
            }
            // Handle removed extensions
            for (const manifestKey in manifestSection) {
                const configKey = getExtensionKeyForImport(manifestKey);
                if (configKey && !configExtensions[configKey]) {
                    delete manifestSection[manifestKey];
                }
            }
        }
    }
};
//# sourceMappingURL=controllerExtensions.js.map