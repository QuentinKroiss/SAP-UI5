"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStableIdPartFromDataField = exports.getStableIdPartFromSemanticObjectAndAction = exports.getStableIdPartFromValue = exports.prepareId = exports.replaceSpecialChars = void 0;
const utils_1 = require("../../common/utils");
/**
 * Stable Id helper (parts copied from sap.fe.core/helpers/StableIdHelper.ts)
 */
function replaceSpecialChars(sId) {
    if (typeof sId !== 'string') {
        return;
    }
    sId = sId
        .replace(/^\/|^@|^#|^\*/, '') // remove special characters from the beginning of the string
        .replace(/\/$|@$|#$|\*$/, '') // remove special characters from the end of the string
        .replace(/[/@()#*]/g, '::'); // replace special characters with ::
    // Replace double occurrences of the separator with a single separator
    while (sId.indexOf('::::') > -1) {
        sId = sId.replace('::::', '::');
    }
    // If there is a :: at the end of the ID remove it
    if (sId.slice(-2) === '::') {
        sId = sId.slice(0, -2);
    }
    return sId;
}
exports.replaceSpecialChars = replaceSpecialChars;
const prepareId = function (sId) {
    return replaceSpecialChars((0, utils_1.removeNamespaces)(sId));
};
exports.prepareId = prepareId;
function evaluateConcat(oValue) {
    let sPathConcat = '';
    for (const applyValue of oValue.Apply.Path) {
        if (applyValue._text) {
            if (sPathConcat) {
                sPathConcat += '::';
            }
            sPathConcat += applyValue._text;
        }
    }
    return sPathConcat;
}
function getStableIdPartFromValue(oValue) {
    if (oValue?.$Path || oValue?.path) {
        return oValue.$Path || oValue.path;
    }
    if (oValue?.Apply?._attributes.Function === 'odata.concat') {
        return evaluateConcat(oValue);
    }
    if (oValue) {
        if (typeof oValue === 'string') {
            return replaceSpecialChars(oValue.replace(/ /g, '_'));
        }
    }
}
exports.getStableIdPartFromValue = getStableIdPartFromValue;
const getStableIdPartFromSemanticObjectAndAction = function (oDataField) {
    let sIdPart = '';
    if (typeof oDataField.SemanticObject === 'string') {
        sIdPart += oDataField.SemanticObject;
    }
    else if (oDataField.SemanticObject.$Path) {
        sIdPart += oDataField.SemanticObject.$Path;
    }
    if (typeof oDataField.Action === 'string') {
        sIdPart += '::' + oDataField.Action;
    }
    else if (oDataField.Action && oDataField.Action.$Path) {
        sIdPart += '::' + oDataField.Action.$Path;
    }
    if (oDataField['RequiresContext']) {
        sIdPart += '::RequiresContext';
    }
    return sIdPart;
};
exports.getStableIdPartFromSemanticObjectAndAction = getStableIdPartFromSemanticObjectAndAction;
const getStableIdPartFromDataField = function (oDataField) {
    let sIdPart = '';
    if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* UIAnnotationTypes.DataFieldForAction */) {
        sIdPart = 'DataFieldForAction::';
        sIdPart += oDataField.Action;
        return (0, exports.prepareId)(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" /* UIAnnotationTypes.DataFieldForIntentBasedNavigation */) {
        sIdPart = 'DataFieldForIntentBasedNavigation::';
        sIdPart += (0, exports.getStableIdPartFromSemanticObjectAndAction)(oDataField);
        return sIdPart;
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" /* UIAnnotationTypes.DataFieldForAnnotation */) {
        sIdPart = 'DataFieldForAnnotation::';
        sIdPart += (0, exports.prepareId)(oDataField.Target.$AnnotationPath || oDataField.Target.value);
        return sIdPart;
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithAction" /* UIAnnotationTypes.DataFieldWithAction */) {
        sIdPart = 'DataFieldWithAction::';
        if (oDataField.Value) {
            sIdPart += getStableIdPartFromValue(oDataField.Value) + '::';
        }
        sIdPart += oDataField.Action;
        return (0, exports.prepareId)(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataField" /* UIAnnotationTypes.DataField */) {
        sIdPart = 'DataField::';
        sIdPart += getStableIdPartFromValue(oDataField.Value);
        return (0, exports.prepareId)(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation" /* UIAnnotationTypes.DataFieldWithIntentBasedNavigation */) {
        sIdPart = 'DataFieldWithIntentBasedNavigation::';
        sIdPart += getStableIdPartFromValue(oDataField.Value) + '::';
        sIdPart += (0, exports.getStableIdPartFromSemanticObjectAndAction)(oDataField);
        return (0, exports.prepareId)(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath" /* UIAnnotationTypes.DataFieldWithNavigationPath */) {
        sIdPart = 'DataFieldWithNavigationPath::';
        sIdPart += getStableIdPartFromValue(oDataField.Value);
        if (oDataField.Target && oDataField.Target['$NavigationPropertyPath']) {
            sIdPart += '::' + oDataField.Target['$NavigationPropertyPath'];
        }
        return (0, exports.prepareId)(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" /* UIAnnotationTypes.DataFieldWithUrl */) {
        sIdPart = 'DataFieldWithUrl::';
        sIdPart += getStableIdPartFromValue(oDataField.Value);
        return (0, exports.prepareId)(sIdPart);
    }
    else {
        // In case of a string or unknown property
        // Log.error("Stable ID Helper: Unable to create a stable ID. Please check the annotations.");
    }
    return undefined;
};
exports.getStableIdPartFromDataField = getStableIdPartFromDataField;
//# sourceMappingURL=StableIdHelper.js.map