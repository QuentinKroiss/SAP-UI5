"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRootElement = exports.getCustomExtensionFragmentDefinitionKey = exports.parseXML = exports.traverseSchema = void 0;
const xml_js_1 = require("xml-js");
const ast_1 = require("@xml-tools/ast");
const parser_1 = require("@xml-tools/parser");
const i18next_1 = __importDefault(require("i18next"));
const ux_specification_types_1 = require("@sap/ux-specification-types");
const utils_1 = require("../../common/utils");
const extensionLogger_1 = require("../../../extensionLogger");
/**
 * Method finds element by XML path.
 * @param {Element} element Element to look in.
 * @param {MacrosXMLPath} path XML path to search.
 * @returns {Element | undefined} Element is returned if element found by passed path.
 */
function findElementByXMLPath(element, path) {
    let currentElement = element;
    for (const subPath of path) {
        const elements = currentElement?.elements?.filter((element) => element.type !== 'comment');
        currentElement = elements?.[subPath.index];
    }
    return currentElement;
}
/**
 * Method ensures that inner object exists for passed property name.
 * @param {object} obj Object to check and update.
 * @param {string} name Property name in object to check and update.
 * @returns {boolean} True if object created.
 */
function ensureObjectExists(obj, name) {
    if (!obj[name]) {
        obj[name] = {};
        return true;
    }
    return false;
}
/**
 * Method gets properties from full schema definitions using current schema $ref property.
 * @param {SchemaDefinition} fullSchema Full schema object.
 * @param {string} $ref $ref property of current schema object.
 * @returns {Definition}
 */
function getPropertiesFromRef(fullSchema, $ref) {
    let properties = {};
    const key = (0, utils_1.getDefinitionKey)($ref);
    if (fullSchema.definitions && fullSchema.definitions[key]) {
        const definition = fullSchema.definitions[key];
        if (typeof definition === 'object' && definition.properties) {
            properties = definition.properties;
        }
    }
    return properties;
}
/**
 * Method traverses schema for default aggregation.
 * @param {TraverseData} traverseData Traverse data object.
 * @param {TraverseCallback} callback Callbck to handle export or import.
 * @param {MacrosSchemaMetadata} metadata Metadata with default aggregation.
 * @returns {boolean} Is changes applied during export or import.
 */
function traverseDefaultAggregation(traverseData, callback, metadata) {
    const { defaultAggregation } = metadata;
    const { schema, element, contextPath, config = {}, fullSchema } = traverseData;
    const { properties = {} } = schema;
    const differs = ensureObjectExists(config, defaultAggregation);
    const contextConfig = config[defaultAggregation];
    return (traverseSchema({
        fullSchema,
        schema: properties[defaultAggregation],
        element: element,
        contextPath: contextPath,
        config: contextConfig,
        parent: traverseData
    }, callback) || differs);
}
/**
 * Method checks if passed schema is eligable for default aggregation handling.
 * @param {Definition} properties Schema properties which can contain default aggregation.
 * @param {MacrosSchemaMetadata} [metadata] Metadata with default aggregation.
 * @returns {boolean} True if passed schema is eligable for default aggregation handling.
 */
function isDefaultAggregationAppliable(properties, metadata) {
    return (metadata?.defaultAggregation && properties[metadata.defaultAggregation]?.['metadata']?.['path']?.length === 0);
}
/**
 * Method traverses schema together with XML element.
 * @param {TraverseData} traverseData Traverse data object.
 * @param {TraverseCallback} callback Callbck to handle export or import.
 * @returns {boolean} Is changes applied during export or import.
 */
function traverseSchema(traverseData, callback) {
    const { schema, element, contextPath, config = {}, fullSchema } = traverseData;
    let differs = false;
    let { properties = {} } = schema;
    const { metadata = {} } = schema;
    if (schema.$ref && !schema.properties) {
        properties = getPropertiesFromRef(fullSchema, schema.$ref);
    }
    for (const name in properties) {
        const property = properties[name];
        let shouldTraverse = typeof property === 'object';
        // Handle default aggregation
        if (shouldTraverse &&
            metadata?.defaultAggregation === name &&
            isDefaultAggregationAppliable(properties, metadata)) {
            // Special hook to apply default aggregation
            differs = traverseDefaultAggregation(traverseData, callback, metadata) || differs;
            shouldTraverse = false;
        }
        if (!shouldTraverse) {
            continue;
        }
        // Check if object contains "metadata" to map with XML element
        if (property['metadata']?.['path']?.length) {
            const path = property['metadata']['path'];
            const checkPath = path.slice(contextPath.length);
            const targetElement = findElementByXMLPath(element, checkPath);
            differs = ensureObjectExists(config, name) || differs;
            const contextConfig = config[name];
            differs =
                traverseSchema({
                    fullSchema: traverseData.fullSchema,
                    schema: property,
                    element: targetElement,
                    contextPath: path,
                    config: contextConfig,
                    parent: traverseData
                }, callback) || differs;
        }
        else {
            differs = callback(traverseData, property, config, name) || differs;
        }
    }
    return differs;
}
exports.traverseSchema = traverseSchema;
function parseXML(xmlFile, providePositions, logger) {
    let element;
    try {
        if (providePositions) {
            const { cst, tokenVector } = (0, parser_1.parse)(xmlFile.fileContent);
            const xmlDocument = (0, ast_1.buildAst)(cst, tokenVector);
            if (!xmlDocument.rootElement) {
                // Throw exception than invalid xml string provided
                throw new Error('Invalid XML');
            }
            element = xmlDocument;
        }
        else {
            element = (0, xml_js_1.xml2js)(xmlFile.fileContent);
        }
    }
    catch (error) {
        (0, extensionLogger_1.log)(logger, {
            severity: "error" /* LogSeverity.Error */,
            message: i18next_1.default.t('XMLPARSEFAILURE', { error: (0, utils_1.getErrorMessage)(error) }),
            location: {
                path: xmlFile.dataSourceUri
            }
        });
    }
    return element;
}
exports.parseXML = parseXML;
/**
 * Resolves definition key for custom extension fragment.
 * @param {string} fragmentName Name of the fragment.
 * @returns {string} Definition key for custom extension fragment.
 */
function getCustomExtensionFragmentDefinitionKey(fragmentName) {
    return `${ux_specification_types_1.DefinitionName.CustomExtensionFragment}<${fragmentName}>`;
}
exports.getCustomExtensionFragmentDefinitionKey = getCustomExtensionFragmentDefinitionKey;
/**
 * Method find first renderable element for passed definition element.
 * @param element Definition element.
 * @returns First renderable element.
 */
function getRootElement(element) {
    return element.elements?.find((root) => root.type !== 'comment');
}
exports.getRootElement = getRootElement;
//# sourceMappingURL=macros.js.map