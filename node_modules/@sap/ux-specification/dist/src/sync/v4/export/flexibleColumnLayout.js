"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateFcl = void 0;
const ux_specification_types_1 = require("@sap/ux-specification-types");
const manifest_1 = require("./manifest");
const utils_1 = require("./utils");
// Aggregations mapping for target levels
// 0 - BeginColumnPages, 1 - MidColumnPages, 2 - EndColumnPages
const fclAggregations = [
    ux_specification_types_1.FlexibleColumnLayoutAggregations.BeginColumnPages,
    ux_specification_types_1.FlexibleColumnLayoutAggregations.MidColumnPages,
    ux_specification_types_1.FlexibleColumnLayoutAggregations.EndColumnPages
];
/**
 * Recursive method which updates manifest routing to enable FCL support.
 * Method contains some parts like setting 'ThreeColumnsEndExpanded' to 2st->3rd page navigation - it was requested for demo purposes.
 * @param {SapUi5} manifestUI5 - SAPUI5 manifest data.
 * @param {Application} app - Project application.
 * @param {string} pageName - Page name which should be used to apply FCL.
 * @param {Array<string>} targetPages - Current array of target pages to join in.
 * For example to display two column FCL we have - ['1stLevelPage', '2ndLevelPage']
 * @param {number} level - Current navigation level.
 */
const applyFCLRouting = (manifestUI5, app, pageName, targetPages = [], level = 0) => {
    const routeOfPage = manifestUI5.routing.routes.find((route) => {
        return route.name === pageName;
    });
    if (!routeOfPage) {
        return;
    }
    // Update route
    if (typeof routeOfPage.target === 'string') {
        // 1-3 level navigation is placed like [`1st Page`, `2nd Page`, `3rd Page`]
        // 4+ level navigation is placed as fullscreen - [`4th+n Page`]
        routeOfPage.target = level <= 2 ? [...targetPages, routeOfPage.target] : [routeOfPage.target];
    }
    // Update target
    const target = manifestUI5.routing.targets[pageName];
    const page = app.pages?.[pageName];
    if (!page) {
        return;
    }
    if ('controlAggregation' in page) {
        target.controlAggregation = page.controlAggregation;
    }
    else if (fclAggregations[level]) {
        target.controlAggregation = fclAggregations[level];
    }
    else {
        target.controlAggregation = ux_specification_types_1.FlexibleColumnLayoutAggregations.EndColumnPages;
    }
    const pattern = routeOfPage.pattern.replace(manifest_1.Constants.OptionalQuery, '');
    if (pattern) {
        target.contextPattern = pattern.startsWith('/') ? pattern : `/${pattern}`;
    }
    else {
        target.contextPattern = '';
    }
    // Loop further pages
    if (page.navigation) {
        level++;
        for (const pageId in page.navigation) {
            applyFCLRouting(manifestUI5, app, page.navigation[pageId]['route'], routeOfPage.target, level);
        }
    }
};
/**
 * Method enables FCL support by updating Manifest.
 * @param {SapUi5} manifestUI5 - SAPUI5 manifest data.
 * @param {Application} app - Project application.
 */
const enableFcl = (manifestUI5, app) => {
    // Apply config with router class
    manifestUI5.routing.config.routerClass = ux_specification_types_1.v4.FIORI_FCL_ROUTER_CLASS;
    // Make changes in
    applyFCLRouting(manifestUI5, app, app.home);
    // Update 'rootView'
    const rootView = {
        viewName: ux_specification_types_1.FIORI_FCL_ROOT_VIEW_NAME,
        type: ux_specification_types_1.ViewTypes.XML,
        async: true,
        id: ux_specification_types_1.FIORI_FCL_ROOT_ID
    };
    manifestUI5.rootView = manifestUI5.rootView ? { ...manifestUI5.rootView, ...rootView } : rootView;
    // Added in scope of #523. Starting from SAPUI5 1.83+ - we need make sure that dependency to `sap.f` library is added to manifest.
    (0, utils_1.updateDependencyLib)(manifestUI5, ux_specification_types_1.v4.SAPUI5_DEPENDENCY_LIB_SAP_F);
};
/**
 * Method disables FCL support by updating Manifest.
 * @param {SapUi5} manifestUI5 - SAPUI5 manifest data.
 */
const disableFcl = (sapui5) => {
    if (sapui5.rootView && sapui5.rootView.viewName === ux_specification_types_1.FIORI_FCL_ROOT_VIEW_NAME) {
        // FCL is disabled and rootview name is equal to FCL ROOT VIEW, then remove rootview
        delete sapui5.rootView;
    }
    if (sapui5.routing) {
        if (sapui5.routing.config && sapui5.routing.config.routerClass === ux_specification_types_1.v4.FIORI_FCL_ROUTER_CLASS) {
            // Remove routing class
            delete sapui5.routing.config.routerClass;
        }
        const routes = sapui5.routing.routes || [];
        for (const route of routes) {
            if (route.target && Array.isArray(route.target)) {
                // In 'applyFCLRouting' we set property 'target' as Array
                // When FCL is disabled, property 'target' should not be an array anymore - resetting back.
                route.target = route.name;
            }
        }
    }
};
/**
 * Method updates Manifest depending on is FCL ON or OFF.
 * @param {SapUi5} manifestUI5 - SAPUI5 manifest data.
 * @param {Application} app - Project application.
 */
const updateFcl = (manifestUI5, app) => {
    if (app.settings && app.settings.flexibleColumnLayout) {
        enableFcl(manifestUI5, app);
    }
    else {
        disableFcl(manifestUI5);
    }
};
exports.updateFcl = updateFcl;
//# sourceMappingURL=flexibleColumnLayout.js.map