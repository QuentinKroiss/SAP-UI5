"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGenericSchema = exports.getPathToGenericSchema = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const ux_specification_types_1 = require("@sap/ux-specification-types");
/**
 * Return the path to the generic JSON schema
 * @param version - Fiori elements version
 * @param schemaType - Type of the schema, e.g Application, ListReport, ObjectPage, ...
 */
const getPathToGenericSchema = (version, schemaType, directory = __dirname) => {
    let fileName;
    switch (schemaType) {
        case ux_specification_types_1.SchemaType.Application: {
            fileName = `${ux_specification_types_1.SchemaType.Application}${version.toUpperCase()}.json`;
            break;
        }
        case ux_specification_types_1.SchemaType.FPMCustomPage: {
            // Use building blocks generic schema for FPM custom pages
            fileName = `${ux_specification_types_1.SchemaType.BuildingBlocks}Config.json`;
            break;
        }
        default: {
            fileName = `${schemaType}Config.json`;
            break;
        }
    }
    if (directory.endsWith('dist')) {
        return (0, path_1.join)(directory, 'schemas', version, fileName);
    }
    else if (directory.endsWith((0, path_1.join)('specification', 'packages', 'specification'))) {
        return (0, path_1.join)(directory, 'dist', 'schemas', version, fileName);
    }
    else if (directory.endsWith((0, path_1.join)('src', 'specification'))) {
        return (0, path_1.join)(directory, '..', '..', 'dist', 'schemas', version, fileName);
    }
    else if (directory.indexOf('node_modules') > -1) {
        const moduleRoot = directory.substring(0, directory.indexOf('node_modules') + 12);
        return (0, path_1.join)(moduleRoot, '@sap', 'ux-specification', 'dist', 'schemas', version, fileName);
    }
    return undefined;
};
exports.getPathToGenericSchema = getPathToGenericSchema;
/**
 * Read JSON schema from given path
 * @param path - path to schema file
 */
const readJsonSchema = async (path) => {
    return new Promise((resolve, reject) => {
        (0, fs_1.readFile)(path, { encoding: 'utf8' }, (err, data) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(JSON.parse(data));
            }
        });
    });
};
/**
 * Return the generic schema for a given version and type
 * @param version - Fiori elements version, e.g. v2 or v4
 * @param schemaType - Type of the schema, e.g Application, ListReport, ObjectPage, ...
 * @returns the generic schema for the given Fiori Elements version and schema type
 */
const getGenericSchema = async (version, schemaType) => {
    try {
        const path = (0, exports.getPathToGenericSchema)(version, schemaType, __dirname);
        return await readJsonSchema(path);
    }
    catch (error) {
        throw new Error(`No schema available for type: ${schemaType}, version: ${version}. Error was ${error.message}`);
    }
};
exports.getGenericSchema = getGenericSchema;
//# sourceMappingURL=schemaAccess.js.map