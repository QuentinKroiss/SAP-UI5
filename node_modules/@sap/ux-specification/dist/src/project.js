"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProject = exports.getChanges = exports.isDirectory = exports.readDirectory = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const readFile = async (path) => {
    return new Promise((resolve, reject) => {
        (0, fs_1.readFile)(path, { encoding: 'utf8' }, (err, data) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
    });
};
const readJSON = async (path) => {
    return JSON.parse(await readFile(path));
};
const readDirectory = async (path) => {
    return new Promise((resolve, reject) => {
        (0, fs_1.readdir)(path, { encoding: 'utf8' }, (err, data) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
    });
};
exports.readDirectory = readDirectory;
const isDirectory = async (path) => {
    return new Promise((resolve) => {
        (0, fs_1.stat)(path, (err, stats) => {
            if (err) {
                resolve(false);
            }
            else {
                resolve(stats.isDirectory());
            }
        });
    });
};
exports.isDirectory = isDirectory;
const resourceExists = async (path) => {
    return new Promise((resolve) => {
        (0, fs_1.exists)(path, (doesExist) => {
            resolve(doesExist);
        });
    });
};
const getManifest = async (path) => {
    return readJSON((0, path_1.join)(path, 'manifest.json'));
};
const getChanges = async (webapp) => {
    const changes = [];
    const changesDirectory = (0, path_1.join)(webapp, 'changes');
    if (!(await resourceExists(changesDirectory))) {
        return changes;
    }
    const extensions = [
        '.change',
        '.variant',
        '.ctrl_variant',
        '.ctrl_variant_change',
        '.ctrl_variant_management_change'
    ];
    const files = await (0, exports.readDirectory)(changesDirectory);
    for (const file of files) {
        if (extensions.some((ext) => file.endsWith(ext))) {
            changes.push(await readFile((0, path_1.join)(changesDirectory, file)));
        }
    }
    return changes;
};
exports.getChanges = getChanges;
const getExtensionFiles = async (webAppPath, folder = 'fragments') => {
    const fragments = [];
    const directoryPath = (0, path_1.join)(webAppPath, 'ext', folder);
    if (!(await resourceExists(directoryPath))) {
        return fragments;
    }
    const files = await (0, exports.readDirectory)(directoryPath);
    for (const file of files) {
        const filePath = (0, path_1.join)(directoryPath, file);
        const data = await readFile(filePath);
        fragments.push({
            dataSourceUri: filePath,
            fileContent: data
        });
    }
    return fragments;
};
const getAnnotations = async (manifest, webAppPath) => {
    const annotationData = [];
    const serviceDataSources = manifest?.['sap.app']?.dataSources;
    if (serviceDataSources?.mainService?.settings?.localUri) {
        const metadataPath = (0, path_1.join)(webAppPath, serviceDataSources.mainService.settings.localUri);
        annotationData.push({
            dataSourceUri: metadataPath,
            fileContent: await readFile(metadataPath)
        });
    }
    if (serviceDataSources?.mainService?.settings?.annotations) {
        for (const annotationRef of serviceDataSources.mainService.settings.annotations) {
            if (serviceDataSources[annotationRef]?.settings?.localUri) {
                const annotationFilePath = (0, path_1.join)(webAppPath, serviceDataSources[annotationRef].settings.localUri);
                annotationData.push({
                    dataSourceUri: annotationFilePath,
                    fileContent: await readFile(annotationFilePath)
                });
            }
        }
    }
    //Consider CAP/multiple services
    if (annotationData.length === 0) {
        for (const key in serviceDataSources) {
            const dataSource = serviceDataSources[key];
            if (dataSource?.type === 'ODataAnnotation' && dataSource?.settings?.localUri) {
                const annotationFilePath = (0, path_1.join)(webAppPath, dataSource.settings.localUri);
                annotationData.push({
                    dataSourceUri: annotationFilePath,
                    fileContent: await readFile(annotationFilePath)
                });
            }
        }
    }
    return annotationData;
};
/**
 * Get the project artefacts, like manifest, service metadata, annotations
 * @param root - project root where package.json is
 */
const getProject = async (root) => {
    const name = (0, path_1.basename)(root);
    const webappPath = (0, path_1.join)(root, 'webapp');
    const manifest = await getManifest(webappPath);
    const annotations = await getAnnotations(manifest, webappPath);
    const changes = await (0, exports.getChanges)(webappPath);
    const fragments = await getExtensionFiles(webappPath);
    const views = await getExtensionFiles(webappPath, 'views');
    return {
        root,
        name,
        manifest,
        annotations,
        changes,
        fragments,
        views
    };
};
exports.getProject = getProject;
//# sourceMappingURL=project.js.map