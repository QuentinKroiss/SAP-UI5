"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveTaskConfiguration = void 0;
const fs = require("fs");
const path = require("path");
const _ = require("lodash");
const comment_json_1 = require("comment-json");
const DEFAULT_TASKS_JSON_CONTENT = { version: "2.0.0", tasks: [] };
function getTaskJsonContentAsJsonObject(taskJsonFilePath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const tasksJsonString = yield fs.promises.readFile(taskJsonFilePath, { encoding: "utf8" });
            const tasksJson = (0, comment_json_1.parse)(tasksJsonString);
            return _.assign(DEFAULT_TASKS_JSON_CONTENT, tasksJson);
        }
        catch (e) {
            return DEFAULT_TASKS_JSON_CONTENT;
        }
    });
}
function saveTaskConfiguration(wsFolderPath, configuration) {
    return __awaiter(this, void 0, void 0, function* () {
        const taskJsonFilePath = path.join(wsFolderPath, ".vscode", "tasks.json");
        const tasksJson = yield getTaskJsonContentAsJsonObject(taskJsonFilePath);
        const existingTaskindex = tasksJson.tasks.findIndex((task) => task.label === configuration.label);
        if (existingTaskindex >= 0) {
            tasksJson.tasks[existingTaskindex] = configuration;
        }
        else {
            tasksJson.tasks.push(configuration);
        }
        yield fs.promises.writeFile(taskJsonFilePath, (0, comment_json_1.stringify)(tasksJson, undefined, "  "));
    });
}
exports.saveTaskConfiguration = saveTaskConfiguration;
//# sourceMappingURL=task.js.map