import { ProgressHandler, CFResource, CancellationToken, CFTarget, ServiceInstanceInfo, ServiceInfo, PlanInfo, IServiceQuery, ITarget, UpsTypeInfo, Api } from './types';
export declare function resolveEndpoint(query: string): Promise<string>;
export declare function clearCacheServiceInstances(): void;
export declare function cfGetUpsInstances(query?: IServiceQuery, token?: CancellationToken): Promise<ServiceInstanceInfo[]>;
export declare function cfCreateService(planGuid: string, instanceName: string, params: any, tags: string[], progress?: ProgressHandler, maxNumberOfAttemps?: number): Promise<CFResource>;
export declare function cfCreateUpsInstance(info: UpsTypeInfo): Promise<CFResource>;
export declare function cfLogin(endpoint: string, user: string, pwd: string): Promise<string>;
export declare function cfGetAvailableOrgs(query?: IServiceQuery): Promise<any[]>;
export declare function cfGetAvailableSpaces(orgGuid?: string): Promise<any[]>;
export declare function cfGetServicePlansList(query?: IServiceQuery, token?: CancellationToken): Promise<PlanInfo[]>;
export declare function cfGetServiceInstances(query?: IServiceQuery, token?: CancellationToken): Promise<ServiceInstanceInfo[]>;
export declare function cfGetManagedServiceInstances(query?: IServiceQuery, token?: CancellationToken): Promise<ServiceInstanceInfo[]>;
export declare function cfSetOrgSpace(org: string, space?: string): Promise<void>;
export declare function cfGetTargets(): Promise<CFTarget[]>;
export declare function cfGetServices(query?: IServiceQuery, cancellationToken?: CancellationToken): Promise<ServiceInfo[]>;
export declare function cfGetSpaceServices(query?: IServiceQuery, spaceGUID?: string, cancellationToken?: CancellationToken): Promise<ServiceInfo[]>;
export declare function cfBindLocalServices(filePath: string, instanceNames: string[], tags?: string[], serviceKeyNames?: string[], serviceKeyParams?: unknown[]): Promise<void>;
export declare function cfBindLocalUps(filePath: string, instanceNames: string[], tags?: string[]): Promise<void>;
export declare function cfGetInstanceMetadata(instanceName: string): Promise<any>;
export declare function cfGetAuthToken(): Promise<string>;
export declare function cfGetTarget(weak?: boolean): Promise<ITarget>;
export declare function cfGetServicePlans(servicePlansUrl: string): Promise<PlanInfo[]>;
export declare function cfLogout(): Promise<void>;
export declare function cfGetServiceKeys(query?: IServiceQuery, token?: CancellationToken): Promise<CFResource[]>;
export declare function cfGetInstanceCredentials(query?: IServiceQuery, token?: CancellationToken): Promise<any[]>;
export declare function cfGetInstanceKeyParameters(instanceName: string): Promise<any | undefined>;
export declare function cfGetServiceInstancesList(query?: IServiceQuery, token?: CancellationToken): Promise<ServiceInstanceInfo[]>;
export declare function cfGetApps(query?: IServiceQuery, token?: CancellationToken): Promise<any>;
export declare function cfApi(params?: {
    url?: string;
    skip_ssl_validation?: boolean;
    unset?: boolean;
}): Promise<Api>;
