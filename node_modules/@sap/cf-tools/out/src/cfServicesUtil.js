"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTargetSet = exports.getInstanceMetadata = exports.createServiceInstance = exports.getInstanceCredentials = exports.getServicesInstancesFilteredByType = void 0;
const cli_1 = require("./cli");
const _ = require("lodash");
const types_1 = require("./types");
const cf_local_1 = require("./cf-local");
function getServicesInstancesFilteredByType(serviceTypes) {
    return __awaiter(this, void 0, void 0, function* () {
        const guids = _.map(yield (0, cf_local_1.cfGetServicePlansList)({ filters: [{ key: types_1.eFilters.service_offering_names, value: _.join(_.map(serviceTypes, encodeURIComponent)) }] }), 'guid');
        return _.size(guids) ? (0, cf_local_1.cfGetManagedServiceInstances)({ 'filters': [{ key: types_1.eFilters.service_plan_guids, value: _.join(guids) }] }) : [];
    });
}
exports.getServicesInstancesFilteredByType = getServicesInstancesFilteredByType;
function getInstanceCredentials(instanceName) {
    return (0, cf_local_1.cfGetInstanceKeyParameters)(instanceName);
}
exports.getInstanceCredentials = getInstanceCredentials;
function createServiceInstance(serviceType, servicePlan, serviceInstanceName, config) {
    let args = ["create-service", serviceType, servicePlan, serviceInstanceName];
    if (config) {
        args = args.concat(["-c", config]);
    }
    return cli_1.Cli.execute(args);
}
exports.createServiceInstance = createServiceInstance;
function getInstanceMetadata(instanceName) {
    return (0, cf_local_1.cfGetInstanceMetadata)(instanceName);
}
exports.getInstanceMetadata = getInstanceMetadata;
function isTargetSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const target = yield (0, cf_local_1.cfGetTarget)();
        return !_.isEmpty(target.org) && !_.isEmpty(target.space);
    });
}
exports.isTargetSet = isTargetSet;
//# sourceMappingURL=cfServicesUtil.js.map