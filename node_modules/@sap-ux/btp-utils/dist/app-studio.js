"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listDestinations = exports.getDestinationUrlForAppStudio = exports.getCredentialsForDestinationService = exports.getAppStudioProxyURL = exports.isAppStudio = exports.BAS_DEST_INSTANCE_CRED_HEADER = void 0;
const axios_1 = __importDefault(require("axios"));
const cf_tools_1 = require("@sap/cf-tools");
const app_studio_env_1 = require("./app-studio.env");
/**
 * HTTP header that is to be used for encoded credentials when communicating with a destination service instance.
 */
exports.BAS_DEST_INSTANCE_CRED_HEADER = 'bas-destination-instance-cred';
/**
 * Check if this is exectued in SAP Business Application Studio.
 *
 * @returns true if yes
 */
function isAppStudio() {
    return !!process.env[app_studio_env_1.ENV.H2O_URL];
}
exports.isAppStudio = isAppStudio;
/**
 * Read and return the BAS proxy url.
 *
 * @returns the proxy url or undefined if called outside of BAS.
 */
function getAppStudioProxyURL() {
    return process.env[app_studio_env_1.ENV.PROXY_URL];
}
exports.getAppStudioProxyURL = getAppStudioProxyURL;
/**
 * Asynchronously creates a base64 encoded credentials for the given destination service instance based on the client information fetched from BTP.
 *
 * @param instance name/id of the destination service instance
 * @returns the base64 encoded user
 */
function getCredentialsForDestinationService(instance) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const serviceInfo = yield (0, cf_tools_1.cfGetInstanceKeyParameters)(instance);
            if (!serviceInfo) {
                throw new Error(`No destination instance ${instance} found`);
            }
            const serviceCredentials = serviceInfo.credentials;
            if (!serviceCredentials) {
                throw new Error(`No credentials for destination instance ${instance} found`);
            }
            const clientId = ((_a = serviceCredentials.uaa) === null || _a === void 0 ? void 0 : _a.clientid) || serviceCredentials.clientid;
            const clientSecret = ((_b = serviceCredentials.uaa) === null || _b === void 0 ? void 0 : _b.clientsecret) || serviceCredentials.clientsecret;
            return Buffer.from(`${encodeURIComponent(clientId)}:${encodeURIComponent(clientSecret)}`).toString('base64');
        }
        catch (error) {
            throw new Error(`An error occurred while retrieving service key for the destination instance ${instance}: ${error}`);
        }
    });
}
exports.getCredentialsForDestinationService = getCredentialsForDestinationService;
/**
 * Returns a url for AppStudio for the given url with the given destination.
 *
 * @param name name of the destination
 * @param path optional path
 * @returns destination url working in BAS
 */
function getDestinationUrlForAppStudio(name, path) {
    const origin = `https://${name}.dest`;
    return path && path.length > 1 ? new URL(path, origin).toString() : origin;
}
exports.getDestinationUrlForAppStudio = getDestinationUrlForAppStudio;
/**
 * Get a list of available destinations in SAP Business Application Studio.
 *
 * @returns the list of destinations
 */
function listDestinations() {
    return __awaiter(this, void 0, void 0, function* () {
        const destinations = {};
        yield axios_1.default.get('/reload', { baseURL: process.env[app_studio_env_1.ENV.PROXY_URL] });
        const response = yield axios_1.default.get('/api/listDestinations', { baseURL: process.env[app_studio_env_1.ENV.H2O_URL] });
        const list = Array.isArray(response.data) ? response.data : [];
        list.forEach((destination) => {
            if (destination.WebIDEEnabled) {
                destinations[destination.Name] = destination;
            }
        });
        return destinations;
    });
}
exports.listDestinations = listDestinations;
//# sourceMappingURL=app-studio.js.map