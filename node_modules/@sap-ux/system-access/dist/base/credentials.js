"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCredentialsWithPrompts = exports.getCredentialsFromEnvVariables = exports.storeCredentials = exports.getCredentialsFromStore = exports.isServiceAuth = exports.isBasicAuth = void 0;
const store_1 = require("@sap-ux/store");
const btp_utils_1 = require("@sap-ux/btp-utils");
const prompts_1 = __importDefault(require("prompts"));
const prompts_2 = require("./prompts");
/**
 * Checks if credentials are of basic auth type.
 *
 * @param authOpts credential options
 * @returns boolean
 */
function isBasicAuth(authOpts) {
    return !!authOpts && authOpts.password !== undefined;
}
exports.isBasicAuth = isBasicAuth;
/**
 * Checks if credentials are of service auth type.
 *
 * @param authOpts credential options
 * @returns boolean
 */
function isServiceAuth(authOpts) {
    return !!authOpts && authOpts.serviceKeys !== undefined;
}
exports.isServiceAuth = isServiceAuth;
/**
 * Check the secure storage if it has credentials for the given target.
 *
 * @param target ABAP target
 * @param logger - reference to the logger instance
 * @returns credentials from the store or undefined.
 */
function getCredentialsFromStore(target, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!(0, btp_utils_1.isAppStudio)()) {
                const systemService = yield (0, store_1.getService)({ entityName: 'system' });
                let system = yield systemService.read(new store_1.BackendSystemKey({ url: target.url, client: target.client }));
                // check if there are credentials for the default client
                if (!system && target.client) {
                    system = yield systemService.read(new store_1.BackendSystemKey({ url: target.url }));
                }
                return system;
            }
        }
        catch (error) {
            logger.warn('Reading credentials from store failed');
            logger.debug(error.message);
        }
        return undefined;
    });
}
exports.getCredentialsFromStore = getCredentialsFromStore;
/**
 * Store the credentials in the secure storage.
 *
 * @param name system name
 * @param target target
 * @param target.url system url
 * @param target.client optional system client
 * @param credentials basic auth credentials
 * @param credentials.username username
 * @param credentials.password password
 * @param logger reference to the logger instance
 * @returns true if the credentials are successfully stored
 */
function storeCredentials(name, target, credentials, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const systemService = yield (0, store_1.getService)({ entityName: 'system' });
            const system = new store_1.BackendSystem(Object.assign(Object.assign({ name }, target), credentials));
            yield systemService.write(system);
            return true;
        }
        catch (error) {
            logger.error('Could not store credentials.');
            logger.debug(error);
            return false;
        }
    });
}
exports.storeCredentials = storeCredentials;
/**
 * Checks the environment variables for Fiori tools settings.
 *
 * @returns basic auth credentials from the environment or undefined.
 */
function getCredentialsFromEnvVariables() {
    if (process.env.FIORI_TOOLS_USER && process.env.FIORI_TOOLS_PASSWORD) {
        return {
            username: process.env.FIORI_TOOLS_USER,
            password: process.env.FIORI_TOOLS_PASSWORD
        };
    }
    else {
        return undefined;
    }
}
exports.getCredentialsFromEnvVariables = getCredentialsFromEnvVariables;
/**
 * Prompt for username and password.
 *
 * @param username - optional username that is to be offered as default
 * @returns credentials object with username/password
 */
function getCredentialsWithPrompts(username) {
    return __awaiter(this, void 0, void 0, function* () {
        const credentials = yield (0, prompts_1.default)([
            Object.assign(Object.assign({}, prompts_2.questions.username), { initial: username }),
            prompts_2.questions.password
        ]);
        return credentials;
    });
}
exports.getCredentialsWithPrompts = getCredentialsWithPrompts;
//# sourceMappingURL=credentials.js.map