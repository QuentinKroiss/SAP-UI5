"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAbapServiceProvider = exports.isUrlTarget = void 0;
const axios_extension_1 = require("@sap-ux/axios-extension");
const credentials_1 = require("./credentials");
const btp_utils_1 = require("@sap-ux/btp-utils");
const prompts_1 = require("./prompts");
const prompts_2 = __importDefault(require("prompts"));
const fs_1 = require("fs");
/**
 * Check if it is a url or destination target.
 *
 * @param target target configuration
 * @returns true is it is a UrlAbapTarget
 */
function isUrlTarget(target) {
    return target.url !== undefined;
}
exports.isUrlTarget = isUrlTarget;
/**
 * Enhance axios options and create a service provider instance for an ABAP Cloud system.
 *
 * @param options - predefined axios options
 * @param target - url target configuration
 * @param prompt - prompt the user for missing information
 * @param logger - reference to the logger instance
 * @returns an abap service provider
 */
function createAbapCloudServiceProvider(options, target, prompt, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const providerConfig = Object.assign(Object.assign({}, options), { environment: axios_extension_1.AbapCloudEnvironment.Standalone, service: target.serviceKey });
        if (!providerConfig.service) {
            // first try reading the keys from the store
            const storedOpts = yield (0, credentials_1.getCredentialsFromStore)(target, logger);
            if ((0, credentials_1.isServiceAuth)(storedOpts)) {
                providerConfig.service = storedOpts.serviceKeys;
                providerConfig.refreshToken = storedOpts.refreshToken;
                logger.info(`Using system [${storedOpts.name}] from System store`);
            }
            if (!providerConfig.service && prompt) {
                const { path } = yield (0, prompts_2.default)(prompts_1.questions.serviceKeysPath);
                providerConfig.service = JSON.parse((0, fs_1.readFileSync)(path, 'utf-8'));
            }
        }
        // if no keys are available throw and error
        if (providerConfig.service) {
            return (0, axios_extension_1.createForAbapOnCloud)(providerConfig);
        }
        else {
            throw new Error('Service keys required for ABAP Cloud environment.');
        }
    });
}
/**
 * Enhance axios options and create a service provider instance for an on-premise ABAP system.
 *
 * @param options predefined axios options
 * @param target url target configuration
 * @param prompt - prompt the user for missing information
 * @param logger reference to the logger instance
 * @returns an ABAPServiceProvider instance
 */
function createAbapOnPremServiceProvider(options, target, prompt, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        options.baseURL = target.url;
        if (target.client) {
            options.params['sap-client'] = target.client;
        }
        if (!options.auth) {
            const storedOpts = yield (0, credentials_1.getCredentialsFromStore)(target, logger);
            if ((0, credentials_1.isBasicAuth)(storedOpts)) {
                options.auth = {
                    username: storedOpts.username,
                    password: storedOpts.password
                };
            }
            else {
                if ((0, credentials_1.isServiceAuth)(storedOpts)) {
                    throw new Error('This is an ABAP Cloud system, please correct your configuration.');
                }
                if (prompt) {
                    const credentials = yield (0, credentials_1.getCredentialsWithPrompts)(storedOpts === null || storedOpts === void 0 ? void 0 : storedOpts.username);
                    options.auth = credentials;
                    process.env.FIORI_TOOLS_USER = credentials.username;
                    process.env.FIORI_TOOLS_PASSWORD = credentials.password;
                }
            }
        }
        return (0, axios_extension_1.createForAbap)(options);
    });
}
/**
 * Create an instance of an ABAP service provider connected to the given target configuration.
 *
 * @param target - target configuration
 * @param requestOptions - additional AxiosRequestOptions
 * @param prompt - prompt the user for missing information
 * @param logger - optional reference to the logger instance
 * @returns service instance
 */
function createAbapServiceProvider(target, requestOptions, prompt, logger) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        let provider;
        const options = Object.assign({ params: (_a = target.params) !== null && _a !== void 0 ? _a : {} }, requestOptions);
        // Destination only supported on Business Application studio
        if ((0, btp_utils_1.isAppStudio)() && target.destination) {
            // Need additional properties to determine the type of destination we are dealing with
            const destinations = yield (0, btp_utils_1.listDestinations)();
            const destination = destinations === null || destinations === void 0 ? void 0 : destinations[target.destination];
            if (!destination) {
                throw new Error(`Destination ${target.destination} not found on subaccount`);
            }
            provider = (0, axios_extension_1.createForDestination)(options, destination);
        }
        else if (isUrlTarget(target)) {
            if (target.scp) {
                provider = yield createAbapCloudServiceProvider(options, target, prompt, logger);
            }
            else {
                provider = yield createAbapOnPremServiceProvider(options, target, prompt, logger);
            }
        }
        else {
            throw new Error('Unable to handle the configuration in the current environment.');
        }
        return provider;
    });
}
exports.createAbapServiceProvider = createAbapServiceProvider;
//# sourceMappingURL=connect.js.map