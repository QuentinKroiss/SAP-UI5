"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupRedirectHandling = void 0;
const http_1 = __importDefault(require("http"));
const error_1 = require("../error");
const message_1 = require("../../abap/message");
const static_1 = require("../static");
/**
 *
 * @param options options object
 * @param options.resolve Callback for when redirect is successful
 * @param options.reject Callback for when redirect fails
 * @param options.timeout timeout in milliseconds
 * @param options.backend backend ABAP System
 * @param options.logger logger
 * @returns a `Redirect` object
 */
function setupRedirectHandling({ resolve, reject, timeout, backend, logger }) {
    const REDIRECT_PATH = '/redirect';
    // eslint-disable-next-line prefer-const
    let server;
    const handleTimeout = () => {
        server === null || server === void 0 ? void 0 : server.close();
        reject(new error_1.TimeoutError(`Timeout. Did not get a response within ${(0, message_1.prettyPrintTimeInMs)(timeout)}`));
    };
    const timer = setTimeout(handleTimeout, timeout);
    server = http_1.default.createServer((req, res) => {
        var _a;
        const reqUrl = new URL(req.url, `http://${req.headers.host}`);
        if (reqUrl.pathname === REDIRECT_PATH) {
            if (timer) {
                clearTimeout(timer);
            }
            const reentranceTicket = (_a = reqUrl.searchParams.get('reentrance-ticket')) === null || _a === void 0 ? void 0 : _a.toString();
            if (reentranceTicket) {
                logger.debug('Got reentrance ticket: ' + reentranceTicket);
                res.writeHead(200, { 'Content-Type': 'text/html' });
                res.end(Buffer.from((0, static_1.redirectSuccessHtml)(backend.logoffUrl())));
                server.close();
                resolve({ reentranceTicket, apiUrl: backend.apiHostname() });
            }
            else {
                logger.error('Error getting reentrance ticket');
                logger.debug(req);
                res.writeHead(500, { 'Content-Type': 'text/html' });
                res.end(Buffer.from((0, static_1.redirectErrorHtml)()));
                server.close();
                reject(new error_1.ConnectionError('Error getting reentrance ticket'));
            }
        }
    });
    return {
        server,
        redirectUrl: (port) => `http://localhost:${port}${REDIRECT_PATH}`
    };
}
exports.setupRedirectHandling = setupRedirectHandling;
//# sourceMappingURL=redirect.js.map