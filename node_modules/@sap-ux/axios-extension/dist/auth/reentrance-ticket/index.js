"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReentranceTicket = void 0;
const open = require("open");
const connection_1 = require("../connection");
const abap_system_1 = require("./abap-system");
const redirect_1 = require("./redirect");
/**
 * DO NOT USE THIS SERVICE ENDPOINT DIRECTLY.
 *  It might change without notice.
 */
const ADT_REENTRANCE_ENDPOINT = '/sap/bc/adt/core/http/reentranceticket';
/**
 * Get the reentrance ticket from the backend.
 *
 * @param options options
 * @param options.backendUrl backend Url
 * @param options.logger  logger
 * @param options.timeout timeout in milliseconds
 */
function getReentranceTicket({ backendUrl, logger, timeout = connection_1.defaultTimeout }) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            var _a;
            const backend = new abap_system_1.ABAPSystem(backendUrl);
            // Start local server to listen to redirect call, with timeout
            const { server, redirectUrl } = (0, redirect_1.setupRedirectHandling)({ resolve, reject, timeout, backend, logger });
            server.listen();
            const redirectPort = server.address().port;
            // Open browser to handle SAML flow and return the reentrance ticket
            const url = `${backend.uiHostname()}${ADT_REENTRANCE_ENDPOINT}?redirect-url=${redirectUrl(redirectPort)}`;
            (_a = open(url)) === null || _a === void 0 ? void 0 : _a.catch((error) => logger.error(error));
        });
    });
}
exports.getReentranceTicket = getReentranceTicket;
//# sourceMappingURL=index.js.map