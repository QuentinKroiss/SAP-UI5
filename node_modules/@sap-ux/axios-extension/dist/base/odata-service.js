"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ODataService = exports.ODataVersion = void 0;
const axios_1 = require("axios");
/**
 * OData versions supported by Fiori elements
 */
var ODataVersion;
(function (ODataVersion) {
    ODataVersion["v2"] = "2";
    ODataVersion["v4"] = "4";
})(ODataVersion || (exports.ODataVersion = ODataVersion = {}));
/**
 * Parse a JSON based OData response and extract the content from the OData structure.
 *
 * @returns an object of the provided type
 */
function parseODataResponse() {
    const data = this.data ? JSON.parse(this.data) : {};
    if (data.d) {
        // v2
        if (data.d.results) {
            return data.d.results;
        }
        else {
            return data.d;
        }
    }
    else if (data['@odata.context']) {
        // v4
        if (data.value) {
            return data.value;
        }
        else {
            return data;
        }
    }
    // not an OData response, let the caller figure it out
    return data;
}
/**
 * Class extending Axios representing an OData service.
 */
class ODataService extends axios_1.Axios {
    /**
     * Get the service description document.
     *
     * @returns a service description containing all exposed entities
     */
    document() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.doc) {
                const response = yield this.get('/');
                const data = response.odata();
                if (data['EntitySets']) {
                    this.doc = data;
                }
                else {
                    this.doc = {
                        EntitySets: data.map((obj) => obj.name)
                    };
                }
            }
            return this.doc;
        });
    }
    /**
     * Get the metadata of the service.
     *
     * @returns service metadata
     */
    metadata() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.metadataDoc) {
                const response = yield this.get('/$metadata', { headers: { Accept: 'application/xml' } });
                this.metadataDoc = response.data;
            }
            return this.metadataDoc;
        });
    }
    /**
     * Send a get request to the OData service with some preset always used parameters.
     *
     * @param url relative url to the service
     * @param config additional axios request config
     * @returns a response enhanced with an OData parse method
     */
    get(url, config = {}) {
        const _super = Object.create(null, {
            get: { get: () => super.get }
        });
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            // request json if not otherwise specified
            if (((_a = config.params) === null || _a === void 0 ? void 0 : _a['$format']) === undefined && !((_b = config.headers) === null || _b === void 0 ? void 0 : _b.Accept)) {
                config.params = (_c = config.params) !== null && _c !== void 0 ? _c : {};
                config.params['$format'] = 'json';
                config.headers = (_d = config.headers) !== null && _d !== void 0 ? _d : {};
                config.headers.Accept = 'application/json';
            }
            const response = yield _super.get.call(this, url, config);
            if (response.data && ((_e = config.params) === null || _e === void 0 ? void 0 : _e['$format']) === 'json') {
                response.odata = parseODataResponse.bind(response);
            }
            return response;
        });
    }
}
exports.ODataService = ODataService;
//# sourceMappingURL=odata-service.js.map