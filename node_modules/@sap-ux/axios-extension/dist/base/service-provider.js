"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceProvider = void 0;
const axios_1 = require("axios");
const logger_1 = require("@sap-ux/logger");
const odata_service_1 = require("./odata-service");
const auth_1 = require("../auth");
/**
 * Basic service provider class containing generic functionality to create and keep service instances as well as logging
 */
class ServiceProvider extends axios_1.Axios {
    constructor() {
        super(...arguments);
        this.log = new logger_1.ToolsLogger();
        this.cookies = new auth_1.Cookies();
        this.services = {};
    }
    /**
     * Create a service instance or return an existing one for the given path.
     *
     * @param path path of the service relative to the service provider
     * @returns a service instance
     */
    service(path) {
        if (!this.services[path]) {
            this.services[path] = this.createService(path, odata_service_1.ODataService);
        }
        return this.services[path];
    }
    /**
     * Create an axios configuration for a new service instance.
     *
     * @param path path of the service relative to the service provider
     * @returns axios config
     */
    generateServiceConfig(path) {
        var _a, _b;
        const config = Object.assign({}, this.defaults);
        return Object.assign(Object.assign({}, config), { baseURL: this.defaults.baseURL + path, headers: (_b = (_a = this.defaults.headers) === null || _a === void 0 ? void 0 : _a.common) !== null && _b !== void 0 ? _b : {} });
    }
    /**
     * Create a service instance for the given path, service class and public URL.
     *
     * @param path path of the service relative to the service provider
     * @param ServiceClass class type to be used to create an instance
     * @returns a service instance
     */
    createService(path, ServiceClass) {
        const service = new ServiceClass(Object.assign(Object.assign({}, this.generateServiceConfig(path)), { publicUrl: this.publicUrl }));
        service.log = this.log;
        service.interceptors = this.interceptors;
        return service;
    }
    /**
     * Retrieve the public URL exposing the ABAP UI application.
     *
     * @returns string Axios Base URL
     */
    get publicUrl() {
        return this.defaults.baseURL;
    }
}
exports.ServiceProvider = ServiceProvider;
//# sourceMappingURL=service-provider.js.map