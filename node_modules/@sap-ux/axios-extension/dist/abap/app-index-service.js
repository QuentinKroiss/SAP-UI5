"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppIndexService = void 0;
const axios_1 = require("axios");
/**
 * A class representing the app index service allowing to search applications deployed on an ABAP system.
 */
class AppIndexService extends axios_1.Axios {
    /**
     * Returns list of applications matching the search query from the catalog service.
     *
     * @param searchParams key/value list of search parameters
     * @param resultFields list of fields that should be used for the response
     * @returns list of applications
     */
    search(searchParams = {}, resultFields) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = Object.assign({}, searchParams);
            if (resultFields) {
                params['fields'] = resultFields.join(',');
            }
            const response = yield this.get('/', { params });
            return JSON.parse(response.data).results;
        });
    }
}
exports.AppIndexService = AppIndexService;
AppIndexService.PATH = '/sap/bc/ui2/app_index';
//# sourceMappingURL=app-index-service.js.map