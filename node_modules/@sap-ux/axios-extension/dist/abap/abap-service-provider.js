"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbapServiceProvider = void 0;
const service_provider_1 = require("../base/service-provider");
const catalog_1 = require("./catalog");
const ui5_abap_repository_service_1 = require("./ui5-abap-repository-service");
const app_index_service_1 = require("./app-index-service");
const odata_service_1 = require("../base/odata-service");
const lrep_service_1 = require("./lrep-service");
const adt_catalog_service_1 = require("./adt-catalog/adt-catalog-service");
const types_1 = require("./types");
// Can't use an `import type` here. We need the classname at runtime to create object instances:
// eslint-disable-next-line @typescript-eslint/consistent-type-imports
const services_1 = require("./adt-catalog/services");
/**
 * Extension of the service provider for ABAP services.
 */
class AbapServiceProvider extends service_provider_1.ServiceProvider {
    /**
     * Get the name of the currently logged in user. This is the basic implementation that could be overwritten by subclasses.
     * The function returns a promise because it may be required to fetch the information from the backend.
     *
     * @returns the username
     */
    user() {
        var _a;
        return Promise.resolve((_a = this.defaults.auth) === null || _a === void 0 ? void 0 : _a.username);
    }
    /**
     * Set the ATO settings for the provider so that it does not try to fetch them with the first request.
     *
     * @param atoSettings ABAP Transport Organizer settings
     */
    setAtoInfo(atoSettings) {
        this.atoSettings = atoSettings;
    }
    /**
     * Get the ATO settings either locally or from the server if not yet available.
     *
     * @returns ABAP Transport Organizer settings
     */
    getAtoInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.atoSettings) {
                return this.atoSettings;
            }
            let atoService;
            try {
                atoService = yield this.getAdtService(services_1.AtoService);
                if (atoService) {
                    this.atoSettings = yield atoService.getAtoInfo();
                }
                else {
                    this.atoSettings = {};
                }
            }
            catch (error) {
                this.atoSettings = {};
            }
            return this.atoSettings;
        });
    }
    /**
     * Set the public facing URL, typically used for a destination related flows.
     *
     * @param host
     */
    set publicUrl(host) {
        this._publicUrl = host;
    }
    /**
     * Retrieve the public facing URL, default to Axios base URL if not configured.
     *
     * @returns string Axios baseUrl if public URL is not configured by a destination
     */
    get publicUrl() {
        return this._publicUrl || this.defaults.baseURL;
    }
    /**
     * Detect if the given configuration points to an S/4HANA Cloud system.
     *
     * @returns true if it an S/4HANA cloud system
     */
    isS4Cloud() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.s4Cloud === undefined) {
                try {
                    const settings = yield this.getAtoInfo();
                    this.s4Cloud =
                        settings.tenantType === types_1.TenantType.Customer &&
                            settings.operationsType === 'C' &&
                            settings.isExtensibilityDevelopmentSystem === true &&
                            settings.developmentPrefix !== '' &&
                            settings.developmentPackage !== '';
                }
                catch (error) {
                    this.log.warn('Failed to detect whether this is an SAP S/4HANA Cloud system or not.');
                    this.s4Cloud = false;
                }
            }
            return this.s4Cloud;
        });
    }
    /**
     * Create or get an existing instance of AdtCatalogService for fetching ADT schema.
     *
     * @returns AdtCatalogService
     */
    getAdtCatalogService() {
        if (!this.services[adt_catalog_service_1.AdtCatalogService.ADT_DISCOVERY_SERVICE_PATH]) {
            const adtCatalogService = this.createService(adt_catalog_service_1.AdtCatalogService.ADT_DISCOVERY_SERVICE_PATH, adt_catalog_service_1.AdtCatalogService);
            this.services[adt_catalog_service_1.AdtCatalogService.ADT_DISCOVERY_SERVICE_PATH] = adtCatalogService;
        }
        return this.services[adt_catalog_service_1.AdtCatalogService.ADT_DISCOVERY_SERVICE_PATH];
    }
    /**
     * Create or get an existing instance of the catalog service for the given OData version.
     *
     * @param version OData version of the requested catalog service
     * @returns an instance of the catalog service.
     */
    catalog(version) {
        var _a, _b;
        let service;
        if (version === odata_service_1.ODataVersion.v2) {
            service =
                (_a = this.services[catalog_1.V2CatalogService.PATH]) !== null && _a !== void 0 ? _a : this.createService(catalog_1.V2CatalogService.PATH, catalog_1.V2CatalogService);
        }
        else if (version === odata_service_1.ODataVersion.v4) {
            service =
                (_b = this.services[catalog_1.V4CatalogService.PATH]) !== null && _b !== void 0 ? _b : this.createService(catalog_1.V4CatalogService.PATH, catalog_1.V4CatalogService);
        }
        else {
            throw new Error('not implemented yet');
        }
        Object.defineProperty(service, 'isS4Cloud', {
            get: this.isS4Cloud.bind(this)
        });
        return service;
    }
    /**
     * Create or get an existing instance of the UI5 ABAP repository service.
     *
     * @param alias - optional alias path on which the UI5Repository service is exposed
     * @returns an instance of the UI5 ABAP repository service.
     */
    getUi5AbapRepository(alias) {
        const path = alias !== null && alias !== void 0 ? alias : ui5_abap_repository_service_1.Ui5AbapRepositoryService.PATH;
        if (!this.services[path]) {
            this.services[path] = this.createService(path, ui5_abap_repository_service_1.Ui5AbapRepositoryService);
        }
        return this.services[path];
    }
    /**
     * Create or get an existing instance of the app index service.
     *
     * @returns an instance of the app index service.
     */
    getAppIndex() {
        if (!this.services[app_index_service_1.AppIndexService.PATH]) {
            this.services[app_index_service_1.AppIndexService.PATH] = this.createService(app_index_service_1.AppIndexService.PATH, app_index_service_1.AppIndexService);
        }
        return this.services[app_index_service_1.AppIndexService.PATH];
    }
    /**
     * Create or get an existing instance of design time adaptation service.
     *
     * @param alias - optional alias path on which the LREP service is exposed
     * @returns an instance of the design time adaptation service.
     */
    getLayeredRepository(alias) {
        const path = alias !== null && alias !== void 0 ? alias : lrep_service_1.LayeredRepositoryService.PATH;
        if (!this.services[path]) {
            this.services[path] = this.createService(path, lrep_service_1.LayeredRepositoryService);
        }
        return this.services[path];
    }
    /**
     * Retrieve singleton instance of AdtService subclass to serve the specific ADT request query.
     *
     * @example
     * ```ts
     * const transportRequestService = abapServiceProvider.getAdtService<TransportRequestService>(TransportRequestService);
     * ```
     * @param adtServiceSubclass Subclass of class AdtService, type is specified by using AdtService class constructor signature.
     * @returns Subclass type of class AdtService
     */
    getAdtService(adtServiceSubclass) {
        return __awaiter(this, void 0, void 0, function* () {
            const subclassName = adtServiceSubclass.name;
            if (!this.services[subclassName]) {
                // Retrieve ADT schema for the specific input AdtService subclass
                const adtCatalogService = this.getAdtCatalogService();
                const adtSchema = yield adtCatalogService.getServiceDefinition(adtServiceSubclass.getAdtCatagory());
                // No ADT schema available neither locally nor from service query.
                if (!adtSchema) {
                    return null;
                }
                // Create singleton instance of AdtService subclass
                this.services[subclassName] = this.createService(adtSchema.href, adtServiceSubclass);
                this.services[subclassName].attachAdtSchema(adtSchema);
            }
            return this.services[subclassName];
        });
    }
}
exports.AbapServiceProvider = AbapServiceProvider;
//# sourceMappingURL=abap-service-provider.js.map