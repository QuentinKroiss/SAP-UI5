"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtoService = void 0;
const adt_service_1 = require("./adt-service");
const fast_xml_parser_1 = require("fast-xml-parser");
/**
 * AtoService implements ADT requests for fetching ATO settings.
 */
class AtoService extends adt_service_1.AdtService {
    /**
     * @see AdtService.getAdtCatagory()
     * @returns AdtCategory
     */
    static getAdtCatagory() {
        return AtoService.adtCategory;
    }
    /**
     * Send ADT request to fetch ATO settings.
     *
     * @returns AtoSettings
     */
    getAtoInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const acceptHeaders = {
                headers: {
                    Accept: 'application/*'
                }
            };
            const response = yield this.get('', acceptHeaders);
            return this.parseAtoResponse(response.data);
        });
    }
    /**
     * Parse an XML document for ATO (Adaptation Transport Organizer) settings.
     *
     * @param xml xml document containing ATO settings
     * @returns parsed ATO settings
     */
    parseAtoResponse(xml) {
        if (fast_xml_parser_1.XMLValidator.validate(xml) !== true) {
            this.log.warn(`Invalid XML: ${xml}`);
            return {};
        }
        const options = {
            attributeNamePrefix: '',
            ignoreAttributes: false,
            ignoreNameSpace: true,
            parseAttributeValue: true,
            removeNSPrefix: true
        };
        const parser = new fast_xml_parser_1.XMLParser(options);
        const parsed = parser.parse(xml, true);
        return parsed.settings ? parsed.settings : {};
    }
}
exports.AtoService = AtoService;
/**
 * @see AdtService.getAdtCatagory()
 */
AtoService.adtCategory = {
    scheme: 'http://www.sap.com/adt/categories/ato',
    term: 'settings'
};
//# sourceMappingURL=ato-service.js.map