"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListPackageService = void 0;
const adt_service_1 = require("./adt-service");
const fast_xml_parser_1 = require("fast-xml-parser");
/**
 * ListPackageService implements ADT requests for fetching a list of available package names
 * from ABAP backend system.
 *
 * @class
 */
class ListPackageService extends adt_service_1.AdtService {
    /**
     * Get ADT scheme ID.
     *
     * @returns AdtCategory
     */
    static getAdtCatagory() {
        return ListPackageService.adtCategory;
    }
    /**
     * The suggested usage of this API from ADT team is to validate the input package
     * name exists rather than searching through the list to find a package name.
     * Several reasons: 1) there is a large number of package names; 2) ABAP developer
     * works with the same package name most of the time. They are likely to remember
     * the package name, typing the prefix (namespace) of the package, the backend
     * returns few package names that match the prefix, and finally developer selects
     * a package name to minimize risk of typo introduced by manual input.
     *
     * @param params
     *  maxResults Maxmium number of records to be returned by the ADT service.
     *             Based on explanation above, it is suggested to use a relatively small number like 50.
     *  phrase     Search phrase. The input is case sensitive.
     * @returns A list of package names that has prefix matching input parameter `phrase`.
     *          The list is returned in the same order as returned by the ADT API.
     *          No guarantee on alphabetic ordering of package names.
     */
    listPackages(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const { maxResults = 50, phrase = '' } = params;
            const config = {
                headers: {
                    Accept: 'application/xml'
                },
                params: {
                    operation: 'quickSearch',
                    query: `${phrase}*`,
                    useSearchProvider: 'X',
                    maxResults,
                    objectType: 'DEVC/K'
                }
            };
            const response = yield this.get('', config);
            return this.parsePackageListResponse(response.data);
        });
    }
    /**
     * Parse the XML document of package info entries from ADT service.
     *
     * @param xml xml document containing package info entries.
     * @returns A list of package names.
     */
    parsePackageListResponse(xml) {
        var _a;
        if (fast_xml_parser_1.XMLValidator.validate(xml) !== true) {
            this.log.warn(`Invalid XML: ${xml}`);
            return [];
        }
        const options = {
            attributeNamePrefix: '',
            ignoreAttributes: false,
            ignoreNameSpace: true,
            parseAttributeValue: true,
            removeNSPrefix: true
        };
        const parser = new fast_xml_parser_1.XMLParser(options);
        const parsed = parser.parse(xml, true);
        let packageArray = [];
        if ((_a = parsed === null || parsed === void 0 ? void 0 : parsed.objectReferences) === null || _a === void 0 ? void 0 : _a.objectReference) {
            if (Array.isArray(parsed.objectReferences.objectReference)) {
                packageArray = parsed.objectReferences.objectReference;
            }
            else {
                packageArray = [parsed.objectReferences.objectReference];
            }
        }
        return packageArray.map((item) => item.name);
    }
}
exports.ListPackageService = ListPackageService;
/**
 * @see AdtService.getAdtCatagory()
 */
ListPackageService.adtCategory = {
    scheme: 'http://www.sap.com/adt/categories/respository',
    term: 'search'
};
//# sourceMappingURL=list-package-service.js.map