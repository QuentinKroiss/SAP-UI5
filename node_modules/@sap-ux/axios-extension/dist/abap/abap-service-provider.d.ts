import { ServiceProvider } from '../base/service-provider';
import type { CatalogService } from './catalog';
import { Ui5AbapRepositoryService } from './ui5-abap-repository-service';
import { AppIndexService } from './app-index-service';
import { ODataVersion } from '../base/odata-service';
import { LayeredRepositoryService } from './lrep-service';
import type { AtoSettings } from './types';
import { AdtService } from './adt-catalog/services';
/**
 * Extension of the service provider for ABAP services.
 */
export declare class AbapServiceProvider extends ServiceProvider {
    s4Cloud: boolean | undefined;
    protected atoSettings: AtoSettings;
    /**
     * Maintain the public facing URL which is required for destination related flows
     */
    protected _publicUrl: string;
    /**
     * Get the name of the currently logged in user. This is the basic implementation that could be overwritten by subclasses.
     * The function returns a promise because it may be required to fetch the information from the backend.
     *
     * @returns the username
     */
    user(): Promise<string | undefined>;
    /**
     * Set the ATO settings for the provider so that it does not try to fetch them with the first request.
     *
     * @param atoSettings ABAP Transport Organizer settings
     */
    setAtoInfo(atoSettings: AtoSettings): void;
    /**
     * Get the ATO settings either locally or from the server if not yet available.
     *
     * @returns ABAP Transport Organizer settings
     */
    getAtoInfo(): Promise<AtoSettings>;
    /**
     * Set the public facing URL, typically used for a destination related flows.
     *
     * @param host
     */
    set publicUrl(host: string);
    /**
     * Retrieve the public facing URL, default to Axios base URL if not configured.
     *
     * @returns string Axios baseUrl if public URL is not configured by a destination
     */
    get publicUrl(): string;
    /**
     * Detect if the given configuration points to an S/4HANA Cloud system.
     *
     * @returns true if it an S/4HANA cloud system
     */
    isS4Cloud(): Promise<boolean>;
    /**
     * Create or get an existing instance of AdtCatalogService for fetching ADT schema.
     *
     * @returns AdtCatalogService
     */
    private getAdtCatalogService;
    /**
     * Create or get an existing instance of the catalog service for the given OData version.
     *
     * @param version OData version of the requested catalog service
     * @returns an instance of the catalog service.
     */
    catalog(version: ODataVersion): CatalogService;
    /**
     * Create or get an existing instance of the UI5 ABAP repository service.
     *
     * @param alias - optional alias path on which the UI5Repository service is exposed
     * @returns an instance of the UI5 ABAP repository service.
     */
    getUi5AbapRepository(alias?: string): Ui5AbapRepositoryService;
    /**
     * Create or get an existing instance of the app index service.
     *
     * @returns an instance of the app index service.
     */
    getAppIndex(): AppIndexService;
    /**
     * Create or get an existing instance of design time adaptation service.
     *
     * @param alias - optional alias path on which the LREP service is exposed
     * @returns an instance of the design time adaptation service.
     */
    getLayeredRepository(alias?: string): LayeredRepositoryService;
    /**
     * Retrieve singleton instance of AdtService subclass to serve the specific ADT request query.
     *
     * @example
     * ```ts
     * const transportRequestService = abapServiceProvider.getAdtService<TransportRequestService>(TransportRequestService);
     * ```
     * @param adtServiceSubclass Subclass of class AdtService, type is specified by using AdtService class constructor signature.
     * @returns Subclass type of class AdtService
     */
    getAdtService<T extends AdtService>(adtServiceSubclass: typeof AdtService): Promise<T | null>;
}
//# sourceMappingURL=abap-service-provider.d.ts.map