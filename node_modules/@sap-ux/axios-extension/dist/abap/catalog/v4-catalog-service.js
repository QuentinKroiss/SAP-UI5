"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V4CatalogService = void 0;
const base_1 = require("./base");
const odata_service_1 = require("../../base/odata-service");
const odata_request_error_1 = require("../../base/odata-request-error");
const V4_RECOMMENDED_ENTITYSET = 'RecommendedServices';
const V4_CLASSIC_ENTITYSET = 'Services';
/**
 * OData V4 specific implmentation of SAP's catalog service
 */
class V4CatalogService extends base_1.CatalogService {
    /**
     * Map the V4 service information to a version independent structure.
     *
     * @param groups v4 service groups
     * @param entitySet entity set used for service selection
     * @returns version independent information
     */
    mapServices(groups, entitySet) {
        const services = [];
        groups
            .filter((group) => { var _a, _b; return ((_b = (_a = group === null || group === void 0 ? void 0 : group.DefaultSystem) === null || _a === void 0 ? void 0 : _a[entitySet]) === null || _b === void 0 ? void 0 : _b.length) > 0; })
            .forEach((group) => {
            services.push(...group.DefaultSystem[entitySet].map((service) => {
                return {
                    id: service.ServiceId,
                    group: group.GroupId,
                    path: service.ServiceUrl.split('?').shift(),
                    name: `${group.GroupId} > ${service.ServiceAlias || service.ServiceId}`,
                    serviceVersion: service.ServiceVersion,
                    odataVersion: odata_service_1.ODataVersion.v4
                };
            }));
        });
        return services;
    }
    /**
     * Fetch all services from the backend.
     *
     * @returns version independent service information
     */
    fetchServices() {
        const _super = Object.create(null, {
            get: { get: () => super.get }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.entitySet === undefined) {
                const metadata = yield this.metadata();
                this.entitySet = metadata.includes('Name="RecommendedServices"')
                    ? V4_RECOMMENDED_ENTITYSET
                    : V4_CLASSIC_ENTITYSET;
            }
            const params = {
                $count: true,
                $expand: `DefaultSystem($expand=${this.entitySet})`
            };
            let response = yield this.get('/ServiceGroups', { params });
            const serviceGroups = response.odata() || [];
            // paging required
            while (response.data['@odata.nextLink']) {
                const nextLink = new URL(response.data['@odata.nextLink']);
                response = yield _super.get.call(this, '/ServiceGroups', { params: Object.assign(Object.assign({}, params), nextLink.searchParams) });
                serviceGroups.push(...response.odata());
            }
            // check if the service responded with an odata error
            if (odata_request_error_1.ODataRequestError.containsError(serviceGroups)) {
                throw new odata_request_error_1.ODataRequestError(serviceGroups);
            }
            return this.mapServices(serviceGroups, this.entitySet);
        });
    }
    /**
     * For OData v4, all annotations are already included in the metadata and no additional request is required.
     *
     * @returns an empty array
     */
    getAnnotations() {
        return Promise.resolve([]);
    }
}
exports.V4CatalogService = V4CatalogService;
V4CatalogService.PATH = '/sap/opu/odata4/iwfnd/config/default/iwfnd/catalog/0002';
//# sourceMappingURL=v4-catalog-service.js.map