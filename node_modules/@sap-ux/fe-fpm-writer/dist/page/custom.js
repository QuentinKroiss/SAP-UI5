"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = exports.getTemplateRoot = exports.enhanceData = void 0;
const path_1 = require("path");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const ejs_1 = require("ejs");
const common_1 = require("./common");
const defaults_1 = require("../common/defaults");
const validate_1 = require("../common/validate");
const templates_1 = require("../templates");
const semver_1 = require("semver");
const utils_1 = require("../common/utils");
const file_1 = require("../common/file");
/**
 * Enhances the provided custom page configuration with default data.
 *
 * @param data - a custom page configuration object
 * @param manifestPath - path to the application manifest
 * @param fs - mem-fs reference to be used for file access
 * @returns enhanced configuration
 */
function enhanceData(data, manifestPath, fs) {
    const manifest = fs.readJSON(manifestPath);
    // set common defaults
    const config = (0, defaults_1.setCommonDefaults)(data, manifestPath, manifest);
    config.settings = (0, common_1.initializeTargetSettings)(data);
    // set FCL configuration
    const fclConfig = (0, common_1.getFclConfig)(manifest, config.navigation);
    config.fcl = fclConfig.fcl;
    config.controlAggregation = fclConfig.controlAggregation;
    if (config.view === undefined) {
        config.view = {
            title: config.name
        };
    }
    return config;
}
exports.enhanceData = enhanceData;
/**
 * Validate the UI5 version and if valid return the root folder for the templates to be used.
 *
 * @param ui5Version - optional minimum required UI5 version
 * @returns root folder  containg the templates if the version is supported otherwise throws an error
 */
function getTemplateRoot(ui5Version) {
    const minVersion = (0, semver_1.coerce)(ui5Version);
    if (!minVersion || (0, semver_1.gte)(minVersion, '1.94.0')) {
        return (0, templates_1.getTemplatePath)('/page/custom/1.94');
    }
    else {
        return (0, templates_1.getTemplatePath)('/page/custom/1.84');
    }
}
exports.getTemplateRoot = getTemplateRoot;
/**
 * Add a custom page to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomPage} data - the custom page configuration
 * @param {Editor} [fs] - the memfs editor instance
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
function generate(basePath, data, fs) {
    var _a, _b, _c;
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    (0, validate_1.validateVersion)(data.minUI5Version);
    (0, common_1.validatePageConfig)(basePath, data, fs);
    const manifestPath = (0, path_1.join)(basePath, 'webapp/manifest.json');
    const config = enhanceData(data, manifestPath, fs);
    // merge content into existing files
    const root = getTemplateRoot(data.minUI5Version);
    // enhance manifest.json
    (0, file_1.extendJSON)(fs, {
        filepath: manifestPath,
        content: (0, ejs_1.render)(fs.read((0, path_1.join)(root, `manifest.json`)), config, {}),
        replacer: (0, common_1.getManifestJsonExtensionHelper)(config),
        tabInfo: data.tabInfo
    });
    // add extension content
    const viewPath = (0, path_1.join)(config.path, `${config.name}.view.xml`);
    if (!fs.exists(viewPath)) {
        fs.copyTpl((0, path_1.join)(root, 'ext/View.xml'), viewPath, config);
        // i18n.properties
        const manifest = fs.readJSON(manifestPath);
        const defaultI18nPath = 'i18n/i18n.properties';
        const customI18nPath = (_c = (_b = (_a = manifest === null || manifest === void 0 ? void 0 : manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.models) === null || _b === void 0 ? void 0 : _b.i18n) === null || _c === void 0 ? void 0 : _c.uri;
        const i18nPath = (0, path_1.join)(basePath, 'webapp', customI18nPath !== null && customI18nPath !== void 0 ? customI18nPath : defaultI18nPath);
        const i18TemplatePath = (0, path_1.join)(root, 'i18n', 'i18n.properties');
        if (fs.exists(i18nPath)) {
            fs.append(i18nPath, (0, ejs_1.render)(fs.read(i18TemplatePath), config, {}));
        }
        else {
            fs.copyTpl(i18TemplatePath, i18nPath, config);
        }
    }
    const ext = data.typescript ? 'ts' : 'js';
    const controllerPath = (0, path_1.join)(config.path, `${config.name}.controller.${ext}`);
    if (!fs.exists(controllerPath)) {
        fs.copyTpl((0, path_1.join)(root, `ext/Controller.${ext}`), controllerPath, config);
    }
    if (data.typescript) {
        (0, utils_1.addExtensionTypes)(basePath, data.minUI5Version, fs);
    }
    return fs;
}
exports.generate = generate;
//# sourceMappingURL=custom.js.map