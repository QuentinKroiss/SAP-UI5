"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateControllerExtension = exports.UI5_CONTROLLER_EXTENSION_OBJECT_PAGE = exports.UI5_CONTROLLER_EXTENSION_LIST_REPORT = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const ejs_1 = require("ejs");
const types_1 = require("./types");
const validate_1 = require("../common/validate");
const defaults_1 = require("../common/defaults");
const templates_1 = require("../templates");
const utils_1 = require("../common/utils");
const file_1 = require("../common/file");
exports.UI5_CONTROLLER_EXTENSION_LIST_REPORT = 'sap.fe.templates.ListReport.ListReportController';
exports.UI5_CONTROLLER_EXTENSION_OBJECT_PAGE = 'sap.fe.templates.ObjectPage.ObjectPageController';
const UI5_CONTROLLER_EXTENSIONS = 'sap.ui.controllerExtensions';
const EXTENSION_PAGE_TYPE_MAP = new Map([
    [types_1.ControllerExtensionPageType.ListReport, exports.UI5_CONTROLLER_EXTENSION_LIST_REPORT],
    [types_1.ControllerExtensionPageType.ObjectPage, exports.UI5_CONTROLLER_EXTENSION_OBJECT_PAGE]
]);
/**
 * A function appends passed array of values with new value if value does not exist in array.
 *
 * @param values - array of values
 * @param value - value to append
 * @returns Array of values
 */
function appendUniqueEntryToArray(values, value) {
    if (!values.includes(value)) {
        values.push(value);
    }
    return values;
}
/**
 * A function returns existing controller extension from manifest for passed extension id.
 *
 * @param {Manifest} manifest - manifest
 * @param {string} extensionId - extension id
 * @returns {ManifestControllerExtension | undefined} Existing controller extension
 */
function getExistingControllerExtension(manifest, extensionId) {
    var _a, _b, _c;
    const extensions = (_c = (_b = (_a = manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.extends) === null || _b === void 0 ? void 0 : _b.extensions) === null || _c === void 0 ? void 0 : _c[UI5_CONTROLLER_EXTENSIONS];
    if (extensions === null || extensions === void 0 ? void 0 : extensions.hasOwnProperty(extensionId)) {
        return extensions[extensionId];
    }
    return undefined;
}
/**
 * Method enhances the provided controller extension by handling existing controller extension entry from manifest.
 * Logic applies following:
 * 1. Handles public property "overwrite" - if we should append or overwrite existing controller names.
 * 2. Detects transition from "controllerName" to "controllerNames" when new controller is appended to exiusting entry with property "controllerNames".
 * 3. Adds new controller entry to "controllerNames" array.
 *
 * @param {ManifestControllerExtension} manifestExtension - controller extension from manifest
 * @param {InternalControllerExtension} config - internal controller extension configuration
 * @param {string} controllerName - full name of new controller to add or replace/overwrite
 */
function handleExistingManifestExtension(manifestExtension, config, controllerName) {
    if (config.overwrite) {
        if (manifestExtension.controllerNames) {
            // Delete "controllerNames" from manifest because it will be overwritten by single controllerName
            config.deleteProperty = 'controllerNames';
        }
        // Do not need append new controller with existing - exit further handling
        return;
    }
    // Append new controller extension with existing controllers
    if (manifestExtension.controllerName && manifestExtension.controllerName !== config.controllerName) {
        // Manifest has single controller - transfer it into array
        config.controllerNames = manifestExtension.controllerNames ? [...manifestExtension.controllerNames] : [];
        // Check before append
        appendUniqueEntryToArray(config.controllerNames, manifestExtension.controllerName);
        appendUniqueEntryToArray(config.controllerNames, controllerName);
        // Delete "controllerName" from manifest
        config.deleteProperty = 'controllerName';
    }
    else if (manifestExtension.controllerNames && !manifestExtension.controllerNames.includes(controllerName)) {
        // Manifest has array of controllers - append new entry
        config.controllerNames = appendUniqueEntryToArray([...manifestExtension.controllerNames], controllerName);
    }
}
/**
 * Method enhances the provided controller extension configuration with default and additional data.
 *
 * @param {string} extensionName - a controller extension configuration object
 * @returns {ControllerExtensionPageTarget | undefined} Page configuration object if extension name is assigned to supported page type.
 */
function resolvePageDataFromExtension(extensionName) {
    for (const [key, value] of EXTENSION_PAGE_TYPE_MAP) {
        if (extensionName.startsWith(value)) {
            return {
                pageType: key
            };
        }
    }
    return undefined;
}
/**
 * Method enhances the provided controller extension configuration with default and additional data.
 *
 * @param {ControllerExtension} data - a controller extension configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(data, manifestPath, manifest) {
    // clone input
    const config = Object.assign({}, data);
    // Apply default data
    (0, defaults_1.setCommonDefaults)(config, manifestPath, manifest);
    // Create `controllerName` with full path/namespace
    config.controllerName = `${config.ns}.${config.name}`;
    // Resolve controller extension id/key
    let extensionId;
    if (typeof config.extension === 'object') {
        // Use default as List Report
        config.extension.pageType = config.extension.pageType || types_1.ControllerExtensionPageType.ListReport;
        const { pageType, pageId } = config.extension;
        extensionId = EXTENSION_PAGE_TYPE_MAP.get(pageType) || exports.UI5_CONTROLLER_EXTENSION_LIST_REPORT;
        if (pageId) {
            // Prepend project id
            extensionId = `${extensionId}#${manifest['sap.app'].id}::${pageId}`;
        }
    }
    else {
        // Try to resolve page type from manual extension
        extensionId = config.extension;
        config.extension = resolvePageDataFromExtension(config.extension) || config.extension;
    }
    config.extensionId = extensionId;
    // Get existing controller extension entry from manifest
    const manifestExtension = getExistingControllerExtension(manifest, extensionId);
    // If controller extension already exists in manifest - append new controller
    if (manifestExtension) {
        handleExistingManifestExtension(manifestExtension, config, config.controllerName);
    }
    return config;
}
/**
 * A function that transforms JSON object during JSON.stringify call.
 * Method is used to remove 'controllerName' or 'controllerNames' properties from manifest in case when we have transition from 'controllerName' to 'controllerNames'.
 *
 * @param {InternalControllerExtension} config - a controller extension configuration object
 * @returns Json replacer method
 */
function getManifestReplacer(config) {
    let isRoot = true;
    const { deleteProperty } = config;
    if (!deleteProperty) {
        // No request to delete any property
        return undefined;
    }
    return (key, value) => {
        // Handle only root - more stable solution instead of checking 'key'
        if (key === '' && isRoot) {
            isRoot = false;
            const extension = getExistingControllerExtension(value, config.extensionId);
            if (extension) {
                delete extension[deleteProperty];
            }
        }
        return value;
    };
}
/**
 * Add a controller extension to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {ControllerExtension} controllerConfig - the controller extension configuration
 * @param {Editor} [fs] - the memfs editor instance
 * @returns {Editor} the updated memfs editor instance
 */
function generateControllerExtension(basePath, controllerConfig, fs) {
    // Validate the base and view paths
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    (0, validate_1.validateBasePath)(basePath, fs);
    const manifestPath = (0, path_1.join)(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    // merge with defaults
    const internalConfig = enhanceConfig(controllerConfig, manifestPath, manifest);
    // enhance manifest with view definition
    const filledTemplate = (0, ejs_1.render)(fs.read((0, templates_1.getTemplatePath)('controller-extension/manifest.json')), internalConfig, {});
    (0, file_1.extendJSON)(fs, {
        filepath: manifestPath,
        content: filledTemplate,
        replacer: getManifestReplacer(internalConfig),
        tabInfo: controllerConfig.tabInfo
    });
    // add controller js file
    const ext = controllerConfig.typescript ? 'ts' : 'js';
    const viewPath = (0, path_1.join)(internalConfig.path, `${internalConfig.name}.controller.${ext}`);
    if (!fs.exists(viewPath)) {
        fs.copyTpl((0, templates_1.getTemplatePath)(`controller-extension/Controller.${ext}`), viewPath, internalConfig);
    }
    if (controllerConfig.typescript) {
        (0, utils_1.addExtensionTypes)(basePath, controllerConfig.minUI5Version, fs);
        // Typescript - add declaration ts file for 'sap/ui/core/mvc/ControllerExtension', which allows access to `this.base.getExtensionAPI()` within Controller extension classes
        const declarationFilePath = (0, path_1.join)(basePath, '/webapp/ext/controller/ControllerExtension.d.ts');
        if (!fs.exists(declarationFilePath)) {
            fs.copy((0, templates_1.getTemplatePath)('controller-extension/ControllerExtension.d.ts'), declarationFilePath);
        }
    }
    return fs;
}
exports.generateControllerExtension = generateControllerExtension;
//# sourceMappingURL=index.js.map