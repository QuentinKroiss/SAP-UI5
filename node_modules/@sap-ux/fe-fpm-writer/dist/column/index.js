"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomColumn = exports.getManifestRoot = void 0;
const ejs_1 = require("ejs");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const defaults_1 = require("../common/defaults");
const validate_1 = require("../common/validate");
const event_handler_1 = require("../common/event-handler");
const file_1 = require("../common/file");
const templates_1 = require("../templates");
const semver_1 = require("semver");
/**
 * Get the template folder for the given UI5 version.
 *
 * @param ui5Version required UI5 version.
 * @returns path to the template folder containing the manifest.json ejs template
 */
function getManifestRoot(ui5Version) {
    const minVersion = (0, semver_1.coerce)(ui5Version);
    if (!minVersion || (0, semver_1.gte)(minVersion, '1.86.0')) {
        return (0, templates_1.getTemplatePath)('/column/1.86');
    }
    else if ((0, semver_1.gte)(minVersion, '1.85.0')) {
        return (0, templates_1.getTemplatePath)('/column/1.85');
    }
    else {
        return (0, templates_1.getTemplatePath)('column/1.84');
    }
}
exports.getManifestRoot = getManifestRoot;
/**
 * Enhances the provided custom table column configuration with default data.
 *
 * @param {Editor} fs - the mem-fs editor instance
 * @param {CustomTableColumn} data - a custom column configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(fs, data, manifestPath, manifest) {
    // clone input and set defaults
    const config = Object.assign({}, data);
    (0, defaults_1.setCommonDefaults)(config, manifestPath, manifest);
    // Apply event handler
    if (config.eventHandler) {
        config.eventHandler = (0, event_handler_1.applyEventHandlerConfiguration)(fs, config, config.eventHandler, {
            controllerSuffix: false,
            typescript: config.typescript
        });
    }
    // generate column content
    const content = config.properties && config.properties.length > 0
        ? `{=%{${config.properties.join("} + ' ' + %{")}}}`
        : 'Sample Text';
    config.content = config.control || (0, defaults_1.getDefaultFragmentContent)(content, config.eventHandler);
    return config;
}
/**
 * Add a custom column to an existing UI5 application.
 *
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 * @param {string} basePath - the base path
 * @param {CustomTableColumn} customColumn - the custom column configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 */
function generateCustomColumn(basePath, customColumn, fs) {
    var _a;
    (0, validate_1.validateVersion)(customColumn.minUI5Version);
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    (0, validate_1.validateBasePath)(basePath, fs);
    const manifestPath = (0, path_1.join)(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    // merge with defaults
    const completeColumn = enhanceConfig(fs, customColumn, manifestPath, manifest);
    // enhance manifest with column definition
    const manifestRoot = getManifestRoot(customColumn.minUI5Version);
    const filledTemplate = (0, ejs_1.render)(fs.read((0, path_1.join)(manifestRoot, `manifest.json`)), completeColumn, {});
    (0, file_1.extendJSON)(fs, {
        filepath: manifestPath,
        content: filledTemplate,
        tabInfo: customColumn.tabInfo
    });
    // add fragment
    const viewPath = (0, path_1.join)(completeColumn.path, `${(_a = completeColumn.fragmentFile) !== null && _a !== void 0 ? _a : completeColumn.name}.fragment.xml`);
    if (completeColumn.control || !fs.exists(viewPath)) {
        fs.copyTpl((0, templates_1.getTemplatePath)('common/Fragment.xml'), viewPath, completeColumn);
    }
    return fs;
}
exports.generateCustomColumn = generateCustomColumn;
//# sourceMappingURL=index.js.map