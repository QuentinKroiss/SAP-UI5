"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomView = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const ejs_1 = require("ejs");
const validate_1 = require("../common/validate");
const defaults_1 = require("../common/defaults");
const event_handler_1 = require("../common/event-handler");
const file_1 = require("../common/file");
const templates_1 = require("../templates");
/**
 * Merge the new view into the list of existing views (if any).
 *
 * @param {CustomView & Partial<InternalCustomView>} config - config for the template, views property gets updated
 * @param {Manifest} manifest - the application manifest
 */
function mergeViews(config, manifest) {
    var _a, _b, _c, _d, _e;
    const newViews = {
        paths: [
            {
                'key': config.key,
                'label': config.label,
                'template': `${config.ns}.${config.name}`
            }
        ]
    };
    const existingViews = (_e = (_d = ((_c = (_b = (_a = manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.targets) === null || _c === void 0 ? void 0 : _c[config.target]).options) === null || _d === void 0 ? void 0 : _d.settings) === null || _e === void 0 ? void 0 : _e.views;
    if (existingViews === null || existingViews === void 0 ? void 0 : existingViews.paths) {
        const index = existingViews.paths.findIndex((entry) => entry.key === newViews.paths[0].key);
        if (index > -1) {
            existingViews.paths[index] = newViews.paths[0];
        }
        else {
            existingViews.paths.push(newViews.paths[0]);
        }
        config.views = existingViews;
    }
    else {
        config.views = newViews;
    }
}
/**
 * Enhances the provided custom view configuration with default data.
 *
 * @param {Editor} fs - the mem-fs editor instance
 * @param {CustomView} data - a custom view configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(fs, data, manifestPath, manifest) {
    const config = Object.assign({}, data);
    (0, defaults_1.setCommonDefaults)(config, manifestPath, manifest);
    // apply event handler
    if (config.eventHandler) {
        config.eventHandler = (0, event_handler_1.applyEventHandlerConfiguration)(fs, config, config.eventHandler, {
            controllerSuffix: true,
            typescript: config.typescript
        });
    }
    // fill config.views, merge new data into existing views
    mergeViews(config, manifest);
    // generate view content
    if (typeof config.control === 'string') {
        config.content = config.control;
    }
    else {
        config.content = (0, defaults_1.getDefaultFragmentContent)(config.name, config.eventHandler, true);
    }
    return config;
}
/**
 * Add a custom view to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomView} customView - the custom view configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 */
function generateCustomView(basePath, customView, fs) {
    (0, validate_1.validateVersion)(customView.minUI5Version);
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    (0, validate_1.validateBasePath)(basePath, fs);
    const manifestPath = (0, path_1.join)(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    // merge with defaults
    const completeView = enhanceConfig(fs, customView, manifestPath, manifest);
    // enhance manifest with view definition
    const filledTemplate = (0, ejs_1.render)(fs.read((0, templates_1.getTemplatePath)('view/manifest.json')), completeView, {});
    (0, file_1.extendJSON)(fs, {
        filepath: manifestPath,
        content: filledTemplate,
        tabInfo: customView.tabInfo
    });
    // add fragment
    if (customView.viewUpdate !== false) {
        const viewPath = (0, path_1.join)(completeView.path, `${completeView.name}.fragment.xml`);
        if (completeView.control === true) {
            fs.copyTpl((0, templates_1.getTemplatePath)('view/ext/CustomViewWithTable.xml'), viewPath, completeView);
        }
        else if (!fs.exists(viewPath)) {
            fs.copyTpl((0, templates_1.getTemplatePath)('common/Fragment.xml'), viewPath, completeView);
        }
    }
    return fs;
}
exports.generateCustomView = generateCustomView;
//# sourceMappingURL=index.js.map