"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomAction = exports.enhanceManifestAndGetActionsElementReference = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const types_1 = require("./types");
const path_1 = require("path");
const ejs_1 = require("ejs");
const validate_1 = require("../common/validate");
const defaults_1 = require("../common/defaults");
const event_handler_1 = require("../common/event-handler");
const templates_1 = require("../templates");
const file_1 = require("../common/file");
/**
 * Enhances the provided custom action configuration with default data.
 *
 * @param {CustomAction} data - a custom action configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(data, manifestPath, manifest) {
    // clone input
    const config = Object.assign(Object.assign({}, data), { target: Object.assign({}, data.target), settings: Object.assign({}, data.settings) });
    (0, defaults_1.setCommonDefaults)(config, manifestPath, manifest);
    // set default values for visibility and enabled
    config.settings.enabled = config.settings.enabled || true;
    config.settings.visible = config.settings.visible || true;
    return config;
}
/**
 * Enhance the target object in the manifest with the required nested objects and return a reference to it.
 *
 * @param {Manifest} manifest - the application manifest
 * @param {CustomActionTarget} target - target element
 * @returns Actions object of the given target element.
 */
function enhanceManifestAndGetActionsElementReference(manifest, target) {
    const page = manifest['sap.ui5'].routing.targets[target.page];
    page.options = page.options || {};
    page.options.settings = page.options.settings || {};
    if (target.control === types_1.TargetControl.header || target.control === types_1.TargetControl.footer) {
        page.options.settings.content = page.options.settings.content || {};
        page.options.settings.content[target.control] = page.options.settings.content[target.control] || {};
        page.options.settings.content[target.control].actions =
            page.options.settings.content[target.control].actions || {};
        return page.options.settings.content[target.control].actions;
    }
    else {
        const controlPrefix = target.navProperty ? target.navProperty + '/' : '';
        const controlSuffix = target.qualifier ? '#' + target.qualifier : '';
        const controlId = `${controlPrefix}${target.control}${controlSuffix}`;
        page.options.settings.controlConfiguration = page.options.settings.controlConfiguration || {};
        page.options.settings.controlConfiguration[controlId] =
            page.options.settings.controlConfiguration[controlId] || {};
        page.options.settings.controlConfiguration[controlId].actions =
            page.options.settings.controlConfiguration[controlId].actions || {};
        return page.options.settings.controlConfiguration[controlId].actions;
    }
}
exports.enhanceManifestAndGetActionsElementReference = enhanceManifestAndGetActionsElementReference;
/**
 * Add a custom page to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomAction} actionConfig - the custom action configuration
 * @param {Editor} [fs] - the memfs editor instance
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
function generateCustomAction(basePath, actionConfig, fs) {
    (0, validate_1.validateVersion)(actionConfig.minUI5Version);
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    (0, validate_1.validateBasePath)(basePath, fs);
    const manifestPath = (0, path_1.join)(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    const config = enhanceConfig(actionConfig, manifestPath, manifest);
    // Apply event handler
    if (config.eventHandler) {
        config.eventHandler = (0, event_handler_1.applyEventHandlerConfiguration)(fs, config, config.eventHandler, {
            controllerSuffix: false,
            typescript: config.typescript
        }, event_handler_1.contextParameter);
    }
    // enhance manifest with action definition and controller reference
    const actions = enhanceManifestAndGetActionsElementReference(manifest, config.target);
    Object.assign(actions, JSON.parse((0, ejs_1.render)(fs.read((0, templates_1.getTemplatePath)(`action/manifest.action.json`)), config, {})));
    fs.writeJSON(manifestPath, manifest, undefined, (0, file_1.getJsonSpace)(fs, manifestPath, actionConfig.tabInfo));
    return fs;
}
exports.generateCustomAction = generateCustomAction;
//# sourceMappingURL=index.js.map