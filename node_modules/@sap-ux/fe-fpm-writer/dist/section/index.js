"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomSubSection = exports.generateCustomSection = exports.generateCustomHeaderSection = exports.getManifestRoot = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const ejs_1 = require("ejs");
const validate_1 = require("../common/validate");
const defaults_1 = require("../common/defaults");
const event_handler_1 = require("../common/event-handler");
const file_1 = require("../common/file");
const templates_1 = require("../templates");
const semver_1 = require("semver");
/**
 * Get the template folder for the given UI5 version.
 *
 * @param folderName template folder name.
 * @param ui5Version required UI5 version.
 * @returns path to the template folder containing the manifest.json ejs template
 */
function getManifestRoot(folderName, ui5Version) {
    const minVersion = (0, semver_1.coerce)(ui5Version);
    if (!minVersion || (0, semver_1.gte)(minVersion, '1.86.0')) {
        return (0, templates_1.getTemplatePath)(`/${folderName}/1.86`);
    }
    else {
        return (0, templates_1.getTemplatePath)(`/${folderName}/1.85`);
    }
}
exports.getManifestRoot = getManifestRoot;
/**
 * Get additional dependencies for fragment.xml template based on passed ui5 version.
 *
 * @param ui5Version required UI5 version.
 * @returns String with additional dependencies to add for "FragmentDefinition" element in fragment.xml
 */
function getAdditionalDependencies(ui5Version) {
    const minVersion = (0, semver_1.coerce)(ui5Version);
    return !minVersion || (0, semver_1.gte)(minVersion, '1.90.0') ? 'xmlns:macros="sap.fe.macros"' : undefined;
}
/**
 * Enhances the provided custom section configuration with additonal data.
 *
 * @param {Editor} fs - the mem-fs editor instance
 * @param {CustomSection} data - a custom section configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(fs, data, manifestPath, manifest) {
    const config = Object.assign({}, data);
    (0, defaults_1.setCommonDefaults)(config, manifestPath, manifest);
    // Apply event handler
    if (config.eventHandler) {
        config.eventHandler = (0, event_handler_1.applyEventHandlerConfiguration)(fs, config, config.eventHandler, {
            controllerSuffix: false,
            typescript: config.typescript
        });
    }
    // generate section content
    config.content = config.control || (0, defaults_1.getDefaultFragmentContent)(config.name, config.eventHandler);
    // Additional dependencies to include into 'Fragment.xml'
    config.dependencies = getAdditionalDependencies(config.minUI5Version);
    return config;
}
/**
 * Add a custom section or sub section to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomSection} customSection - the custom section configuration
 * @param {string} manifestTemplateRoot - path to the template folder containing the manifest.json ejs template
 * @param {Editor} [fs] - the mem-fs editor instance
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 */
function generate(basePath, customSection, manifestTemplateRoot, fs) {
    var _a;
    (0, validate_1.validateVersion)(customSection.minUI5Version);
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    (0, validate_1.validateBasePath)(basePath, fs);
    const manifestPath = (0, path_1.join)(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    // merge with defaults
    const completeSection = enhanceConfig(fs, customSection, manifestPath, manifest);
    // enhance manifest with section definition
    const filledTemplate = (0, ejs_1.render)(fs.read((0, path_1.join)(manifestTemplateRoot, `manifest.json`)), completeSection, {});
    (0, file_1.extendJSON)(fs, {
        filepath: manifestPath,
        content: filledTemplate,
        tabInfo: customSection.tabInfo
    });
    // add fragment
    const viewPath = (0, path_1.join)(completeSection.path, `${(_a = completeSection.fragmentFile) !== null && _a !== void 0 ? _a : completeSection.name}.fragment.xml`);
    if (!fs.exists(viewPath)) {
        fs.copyTpl((0, templates_1.getTemplatePath)('common/FragmentWithVBox.xml'), viewPath, completeSection);
    }
    return { editor: fs, section: completeSection };
}
/**
 * Add a custom header section to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomHeaderSection} customHeaderSection - the custom header section configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 */
function generateCustomHeaderSection(basePath, customHeaderSection, fs) {
    var _a;
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    const manifestRoot = getManifestRoot('header-section', customHeaderSection.minUI5Version);
    const minVersion = (0, semver_1.coerce)(customHeaderSection.minUI5Version);
    let editSection;
    // Prepare 'templateEdit' - apply namespace and folder path resolution
    if (customHeaderSection.edit && (!minVersion || (0, semver_1.gte)(minVersion, '1.86.0'))) {
        editSection = customHeaderSection.edit;
        const manifestPath = (0, path_1.join)(basePath, 'webapp/manifest.json');
        const manifest = fs.readJSON(manifestPath);
        // Set folder, ns and path for edit fragment
        (0, defaults_1.setCommonDefaults)(editSection, manifestPath, manifest);
    }
    // Call standard custom section generation
    const { editor, section } = generate(basePath, customHeaderSection, manifestRoot, fs);
    // Handle 'templateEdit' - edit fragment details
    if (editSection) {
        // Apply event handler for edit fragment
        if (editSection.eventHandler) {
            editSection.eventHandler = (0, event_handler_1.applyEventHandlerConfiguration)(editor, editSection, editSection.eventHandler, {
                controllerSuffix: false,
                typescript: section.typescript,
                eventHandlerFnName: 'onChange'
            });
        }
        // Generate edit fragment content
        editSection.content =
            (_a = editSection.control) !== null && _a !== void 0 ? _a : (0, defaults_1.getDefaultFragmentContent)(editSection.name, editSection.eventHandler, false, true);
        if (editSection.path) {
            const viewPath = (0, path_1.join)(editSection.path, `${editSection.name}.fragment.xml`);
            if (!editor.exists(viewPath)) {
                editor.copyTpl((0, templates_1.getTemplatePath)('common/FragmentWithForm.xml'), viewPath, editSection);
            }
        }
    }
    return editor;
}
exports.generateCustomHeaderSection = generateCustomHeaderSection;
/**
 * Add a custom section to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomSection} customSection - the custom section configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 */
function generateCustomSection(basePath, customSection, fs) {
    const manifestRoot = getManifestRoot('section', customSection.minUI5Version);
    return generate(basePath, customSection, manifestRoot, fs).editor;
}
exports.generateCustomSection = generateCustomSection;
/**
 * Add a custom sub section to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomSubSection} customSubSection - the custom sub section configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 */
function generateCustomSubSection(basePath, customSubSection, fs) {
    const manifestRoot = getManifestRoot('subsection', customSubSection.minUI5Version);
    return generate(basePath, customSubSection, manifestRoot, fs).editor;
}
exports.generateCustomSubSection = generateCustomSubSection;
//# sourceMappingURL=index.js.map