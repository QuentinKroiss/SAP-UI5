"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomFilter = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const ejs_1 = require("ejs");
const validate_1 = require("../common/validate");
const defaults_1 = require("../common/defaults");
const templates_1 = require("../templates");
const file_1 = require("../common/file");
const event_handler_1 = require("../common/event-handler");
/**
 * Enhances the provided custom filter configuration with default data.
 *
 * @param {CustomFilter} data - a custom filter configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(data, manifestPath, manifest) {
    var _a, _b;
    // clone input
    const config = data;
    (0, defaults_1.setCommonDefaults)(config, manifestPath, manifest);
    // set default values for requirement, language, the fragment file name
    config.required = (_a = config.required) !== null && _a !== void 0 ? _a : false;
    config.typescript = !!config.typescript;
    config.fragmentFile = (_b = config.fragmentFile) !== null && _b !== void 0 ? _b : config.name;
    if (config.eventHandler === true) {
        config.eventHandler = {};
    }
    if (typeof config.eventHandler === 'object' && !config.eventHandler.fnName) {
        config.eventHandler.fnName = 'filterItems';
    }
    return config;
}
/**
 * Add a custom filter to the filter bar of an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomFilter} filterConfig - the custom filter configuration
 * @param {Editor} [fs] - the memfs editor instance
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
function generateCustomFilter(basePath, filterConfig, fs) {
    if (!fs) {
        fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
    }
    (0, validate_1.validateBasePath)(basePath, fs);
    const manifestPath = (0, path_1.join)(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    const config = enhanceConfig(filterConfig, manifestPath, manifest);
    // Apply event handler
    if (config.eventHandler) {
        config.eventHandler = (0, event_handler_1.applyEventHandlerConfiguration)(fs, config, config.eventHandler, {
            controllerSuffix: false,
            typescript: config.typescript,
            templatePath: 'filter/Controller'
        }, event_handler_1.contextParameter);
    }
    // enhance manifest with the filter definition and controller reference
    const filters = enhanceManifestAndGetFiltersReference(manifest);
    Object.assign(filters, JSON.parse((0, ejs_1.render)(fs.read((0, templates_1.getTemplatePath)(`filter/manifest.json`)), config, {})));
    fs.writeJSON(manifestPath, manifest, undefined, (0, file_1.getJsonSpace)(fs, manifestPath, filterConfig.tabInfo));
    // create a fragment file
    const fragmentPath = (0, path_1.join)(config.path, `${config.fragmentFile}.fragment.xml`);
    if (!fs.exists(fragmentPath)) {
        fs.copyTpl((0, templates_1.getTemplatePath)(`filter/fragment.xml`), fragmentPath, config);
    }
    return fs;
}
exports.generateCustomFilter = generateCustomFilter;
/**
 * Enhance the target object in the manifest with the required nested objects and return a reference to it.
 *
 * @param {Manifest} manifest - the application manifest
 * @returns Filters object of the first page
 */
function enhanceManifestAndGetFiltersReference(manifest) {
    var _a, _b;
    var _c, _d, _e, _f;
    if ((_b = (_a = manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.targets) {
        const pages = manifest['sap.ui5'].routing.targets;
        const lrPage = Object.values(pages)[0];
        lrPage.options || (lrPage.options = {});
        (_c = lrPage.options).settings || (_c.settings = {});
        (_d = lrPage.options.settings).controlConfiguration || (_d.controlConfiguration = {});
        (_e = lrPage.options.settings.controlConfiguration)['@com.sap.vocabularies.UI.v1.SelectionFields'] || (_e['@com.sap.vocabularies.UI.v1.SelectionFields'] = {});
        (_f = lrPage.options.settings.controlConfiguration['@com.sap.vocabularies.UI.v1.SelectionFields']).filterFields || (_f.filterFields = {});
        return lrPage.options.settings.controlConfiguration['@com.sap.vocabularies.UI.v1.SelectionFields'].filterFields;
    }
    return {};
}
//# sourceMappingURL=index.js.map