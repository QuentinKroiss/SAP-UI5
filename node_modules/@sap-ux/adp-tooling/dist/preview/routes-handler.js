"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const ejs_1 = require("ejs");
const sanitize_filename_1 = __importDefault(require("sanitize-filename"));
/**
 * @description Handles API Routes
 */
class RoutesHandler {
    /**
     * Constructor taking project as input.
     *
     * @param project Reference to the root of the project
     * @param util middleware utilities provided by the UI5 CLI
     * @param logger Logger instance
     */
    constructor(project, util, logger) {
        this.project = project;
        this.util = util;
        this.logger = logger;
        /**
         * Handler for reading all fragment files from the workspace.
         *
         * @param _ Request
         * @param res Response
         * @param next Next Function
         */
        this.handleReadAllFragments = (_, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const files = yield this.readAllFilesByGlob('/**/changes/fragments/*.fragment.xml');
                const fileNames = files.map((f) => ({
                    fragmentName: f.getName()
                }));
                this.sendFilesResponse(res, {
                    fragments: fileNames,
                    message: `${fileNames.length} fragments found in the project workspace.`
                });
                this.logger.debug(`Read fragments ${JSON.stringify(fileNames)}`);
            }
            catch (e) {
                this.handleErrorMessage(res, next, e);
            }
        });
        /**
         * Handler for writing a fragment file to the workspace.
         *
         * @param req Request
         * @param res Response
         * @param next Next Function
         */
        this.handleWriteFragment = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const data = req.body;
                const fragmentName = (0, sanitize_filename_1.default)(data.fragmentName);
                const sourcePath = this.util.getProject().getSourcePath();
                if (!fragmentName) {
                    res.status(400 /* HttpStatusCodes.BAD_REQUEST */).send('Fragment name was not provided!');
                    this.logger.debug('Bad request. Fragment name was not provided!');
                    return;
                }
                const fullPath = path.join(sourcePath, "changes" /* FolderTypes.CHANGES */, "fragments" /* FolderTypes.FRAGMENTS */);
                const filePath = path.join(fullPath, `${fragmentName}.fragment.xml`);
                if (!fs.existsSync(fullPath)) {
                    fs.mkdirSync(fullPath, { recursive: true });
                }
                if (fs.existsSync(filePath)) {
                    res.status(409 /* HttpStatusCodes.CONFLICT */).send(`Fragment with name "${fragmentName}" already exists`);
                    this.logger.debug(`XML Fragment with name "${fragmentName}" was created`);
                    return;
                }
                // Copy the template XML Fragment to the project's workspace
                const fragmentTemplatePath = path.join(__dirname, '../../templates/rta', "fragment.xml" /* TemplateFileName.Fragment */);
                fs.copyFileSync(fragmentTemplatePath, filePath);
                const message = 'XML Fragment created';
                res.status(201 /* HttpStatusCodes.CREATED */).send(message);
                this.logger.debug(`XML Fragment with name "${fragmentName}" was created`);
            }
            catch (e) {
                const sanitizedMsg = (0, sanitize_filename_1.default)(e.message);
                this.logger.error(sanitizedMsg);
                res.status(500 /* HttpStatusCodes.INTERNAL_SERVER_ERROR */).send(sanitizedMsg);
                next(e);
            }
        });
        /**
         * Handler for reading all controller extension files from the workspace.
         *
         * @param _ Request
         * @param res Response
         * @param next Next Function
         */
        this.handleReadAllControllers = (_, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const files = yield this.readAllFilesByGlob('/**/changes/coding/*.js');
                const fileNames = files.map((f) => ({
                    controllerName: f.getName()
                }));
                this.sendFilesResponse(res, {
                    controllers: fileNames,
                    message: `${fileNames.length} controllers found in the project workspace.`
                });
                this.logger.debug(`Read controllers ${JSON.stringify(fileNames)}`);
            }
            catch (e) {
                this.handleErrorMessage(res, next, e);
            }
        });
        /**
         * Handler for retrieving existing controller extension data from the workspace.
         *
         * @param req Request
         * @param res Response
         * @param next Next Function
         */
        this.handleGetControllerExtensionData = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const params = req.params;
                const controllerName = (0, sanitize_filename_1.default)(params.controllerName);
                const codeExtFiles = yield this.readAllFilesByGlob('/**/changes/*_codeExt.change');
                let controllerPathFromRoot = '';
                let controllerExists = false;
                let controllerPath = '';
                let changeFilePath = '';
                const project = this.util.getProject();
                const sourcePath = project.getSourcePath();
                const projectName = project.getName();
                const getPath = (projectPath, fileName, folder = "coding" /* FolderTypes.CODING */) => path.join(projectPath, "changes" /* FolderTypes.CHANGES */, folder, fileName).split(path.sep).join(path.posix.sep);
                for (const file of codeExtFiles) {
                    const fileStr = yield file.getString();
                    const change = JSON.parse(fileStr);
                    if (change.selector.controllerName === controllerName) {
                        const fileName = change.content.codeRef.replace('coding/', '');
                        controllerPath = getPath(sourcePath, fileName);
                        controllerPathFromRoot = getPath(projectName, fileName);
                        changeFilePath = getPath(projectName, file.getName(), '');
                        controllerExists = true;
                        break;
                    }
                }
                if (controllerExists && !fs.existsSync(controllerPath)) {
                    const errorMsg = `Please delete the change file at "${changeFilePath}" and retry creating the controller extension.`;
                    this.logger.debug(errorMsg);
                    res.status(404 /* HttpStatusCodes.NOT_FOUND */).send({ message: errorMsg });
                    return;
                }
                this.sendFilesResponse(res, {
                    controllerExists,
                    controllerPath: os.platform() === 'win32' ? `/${controllerPath}` : controllerPath,
                    controllerPathFromRoot
                });
                this.logger.debug(controllerExists
                    ? `Controller exists at '${controllerPath}'`
                    : `Controller with controllerName '${controllerName}' does not exist`);
            }
            catch (e) {
                this.handleErrorMessage(res, next, e);
            }
        });
        /**
         * Handler for writing a controller extension file to the workspace.
         *
         * @param req Request
         * @param res Response
         * @param next Next Function
         */
        this.handleWriteControllerExt = (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            try {
                const data = req.body;
                const controllerExtName = (0, sanitize_filename_1.default)(data.controllerName);
                const projectId = data.projectId;
                const sourcePath = this.util.getProject().getSourcePath();
                if (!controllerExtName) {
                    res.status(400 /* HttpStatusCodes.BAD_REQUEST */).send('Controller extension name was not provided!');
                    this.logger.debug('Bad request. Controller extension name was not provided!');
                    return;
                }
                const fullPath = path.join(sourcePath, "changes" /* FolderTypes.CHANGES */, "coding" /* FolderTypes.CODING */);
                const filePath = path.join(fullPath, `${controllerExtName}.js`);
                if (!fs.existsSync(fullPath)) {
                    fs.mkdirSync(fullPath, { recursive: true });
                }
                if (fs.existsSync(filePath)) {
                    res.status(409 /* HttpStatusCodes.CONFLICT */).send(`Controller extension with name "${controllerExtName}" already exists`);
                    this.logger.debug(`Controller extension with name "${controllerExtName}" already exists`);
                    return;
                }
                const controllerExtPath = `${projectId}.${controllerExtName}`;
                const controllerTemplateFilePath = path.join(__dirname, '../../templates/rta', "controller.ejs" /* TemplateFileName.Controller */);
                (0, ejs_1.renderFile)(controllerTemplateFilePath, { controllerExtPath }, {}, (err, str) => {
                    if (err) {
                        throw new Error('Error rendering template: ' + err.message);
                    }
                    fs.writeFileSync(filePath, str, { encoding: 'utf8' });
                });
                const message = 'Controller extension created!';
                res.status(201 /* HttpStatusCodes.CREATED */).send(message);
                this.logger.debug(`Controller extension with name "${controllerExtName}" was created`);
            }
            catch (e) {
                const sanitizedMsg = (0, sanitize_filename_1.default)(e.message);
                this.logger.error(sanitizedMsg);
                res.status(500 /* HttpStatusCodes.INTERNAL_SERVER_ERROR */).send(sanitizedMsg);
                next(e);
            }
        });
    }
    /**
     * Reads files from workspace by given search pattern.
     *
     * @param pattern Search pattern
     * @returns Array of files
     */
    readAllFilesByGlob(pattern) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.project.byGlob(pattern);
        });
    }
    /**
     * Sends response with data to the client.
     *
     * @param res Response
     * @param data Data that is sent to the client
     * @param contentType Content type, defaults to json
     */
    sendFilesResponse(res, data, contentType = 'application/json') {
        res.status(200 /* HttpStatusCodes.OK */).contentType(contentType).send(data);
    }
    /**
     * Sanitizes and handles error messages.
     *
     * @param res Response
     * @param next Next function
     * @param e Error
     * @param e.message Error message
     */
    handleErrorMessage(res, next, e) {
        const sanitizedMsg = (0, sanitize_filename_1.default)(e.message);
        this.logger.error(sanitizedMsg);
        res.status(500 /* HttpStatusCodes.INTERNAL_SERVER_ERROR */).send({ message: sanitizedMsg });
        next(e);
    }
}
exports.default = RoutesHandler;
//# sourceMappingURL=routes-handler.js.map