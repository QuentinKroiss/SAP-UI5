"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateChange = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const writer_factory_1 = require("./changes/writer-factory");
/**
 * Generates and applies changes to a project based on a specified generator type.
 *
 * This function initializes the file system editor if not provided, selects the appropriate writer based on the generator type,
 * and then invokes the writer's write method to apply changes. The changes are made in-memory and need to be committed
 * to be reflected on the disk.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {T} type - The type of generator.
 * @param {GeneratorData<T>} data - The data specific to the type of generator, containing information necessary for making changes.
 * @param {Editor | null} [fs] - The `mem-fs-editor` instance used for file operations.
 * @returns {Promise<Editor>} A promise that resolves to the mem-fs editor instance used for making changes, allowing for further operations or committing changes to disk.
 * @template T - A type parameter extending `ChangeType`, ensuring the function handles a defined set of generator types.
 */
function generateChange(projectPath, type, data, fs = null) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!fs) {
            fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
        }
        const writer = writer_factory_1.WriterFactory.createWriter(type, fs, projectPath);
        yield writer.write(data);
        return fs;
    });
}
exports.generateChange = generateChange;
//# sourceMappingURL=editors.js.map