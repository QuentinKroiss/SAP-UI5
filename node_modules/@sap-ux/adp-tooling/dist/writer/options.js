"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enhanceUI5DeployYaml = exports.hasDeployConfig = exports.enhanceUI5Yaml = void 0;
/**
 * Generate the configuration for the middlewares required for the ui5.yaml.
 *
 * @param ui5Config configuration representing the ui5.yaml
 * @param config full project configuration
 */
function enhanceUI5Yaml(ui5Config, config) {
    var _a;
    const middlewares = ((_a = config.options) === null || _a === void 0 ? void 0 : _a.fioriTools) ? getFioriToolsMiddlwares(config) : getOpenSourceMiddlewares(config);
    ui5Config.addCustomMiddleware(middlewares);
}
exports.enhanceUI5Yaml = enhanceUI5Yaml;
/**
 * Checks if a writer config has a deploy configuration.
 *
 * @param config a writer configuration
 * @returns typecasted config if it contains a deploy config
 */
function hasDeployConfig(config) {
    return !!config.deploy;
}
exports.hasDeployConfig = hasDeployConfig;
/**
 * Generate the configuration for the tasks required for the ui5-deploy.yaml.
 *
 * @param ui5Config configuration representing the ui5.yaml
 * @param config full project configuration
 */
function enhanceUI5DeployYaml(ui5Config, config) {
    var _a;
    ui5Config.addAbapDeployTask(config.target, config.deploy, ((_a = config.options) === null || _a === void 0 ? void 0 : _a.fioriTools) === true);
}
exports.enhanceUI5DeployYaml = enhanceUI5DeployYaml;
/**
 * Get a list of required middlewares using the Fiori tools.
 *
 * @param config full project configuration
 * @returns list of required middlewares.
 */
function getFioriToolsMiddlwares(config) {
    return [
        {
            name: 'fiori-tools-preview',
            afterMiddleware: 'compression',
            configuration: {
                adp: {
                    target: config.target,
                    ignoreCertErrors: false
                }
            }
        },
        {
            name: 'fiori-tools-proxy',
            afterMiddleware: 'fiori-tools-preview',
            configuration: {
                ignoreCertErrors: false,
                ui5: {
                    path: ['/resources', '/test-resources'],
                    url: 'https://ui5.sap.com'
                },
                backend: [
                    Object.assign(Object.assign({}, config.target), { path: '/sap' })
                ]
            }
        }
    ];
}
/**
 * Get a list of required middlewares using the open source middlewares.
 *
 * @param config full project configuration
 * @returns list of required middlewares.
 */
function getOpenSourceMiddlewares(config) {
    return [
        {
            name: 'preview-middleware',
            afterMiddleware: 'compression',
            configuration: {
                adp: {
                    target: config.target,
                    ignoreCertErrors: false
                },
                rta: {
                    editors: [
                        {
                            path: '/test/adaptation-editor.html',
                            developerMode: true
                        }
                    ]
                }
            }
        },
        {
            name: 'ui5-proxy-middleware',
            afterMiddleware: 'preview-middleware'
        },
        {
            name: 'backend-proxy-middleware',
            afterMiddleware: 'preview-middleware',
            configuration: {
                backend: Object.assign(Object.assign({}, config.target), { path: '/sap' }),
                options: {
                    secure: true
                }
            }
        }
    ];
}
//# sourceMappingURL=options.js.map