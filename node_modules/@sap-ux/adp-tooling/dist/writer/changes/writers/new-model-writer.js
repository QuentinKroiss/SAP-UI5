"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewModelWriter = void 0;
const change_utils_1 = require("../../../base/change-utils");
/**
 * Handles the creation and writing of new sapui5 model data changes for a project.
 */
class NewModelWriter {
    /**
     * @param {Editor} fs - The filesystem editor instance.
     * @param {string} projectPath - The root path of the project.
     */
    constructor(fs, projectPath) {
        this.fs = fs;
        this.projectPath = projectPath;
    }
    /**
     * Constructs the content for an new model change based on provided data.
     *
     * @param {NewModelData} data - The answers object containing information needed to construct the content property.
     * @returns {object} The constructed content object for the new model change.
     */
    constructContent({ service, annotation, addAnnotationMode }) {
        const content = {
            dataSource: {
                [service.name]: {
                    uri: service.uri,
                    type: 'OData',
                    settings: {
                        version: service.version
                    }
                }
            },
            model: {
                [service.modelName]: {
                    dataSource: service.name
                }
            }
        };
        if (service.modelSettings && service.modelSettings.length !== 0) {
            content.model[service.modelName].settings = (0, change_utils_1.parseStringToObject)(service.modelSettings);
        }
        if (addAnnotationMode) {
            content.dataSource[service.name].settings.annotations = [`${annotation.dataSourceName}`];
            content.dataSource[annotation.dataSourceName] = {
                uri: annotation.dataSourceURI,
                type: 'ODataAnnotation'
            };
            if (annotation.settings && annotation.settings.length !== 0) {
                content.dataSource[annotation.dataSourceName].settings = (0, change_utils_1.parseStringToObject)(annotation.settings);
            }
        }
        return content;
    }
    /**
     * Writes the new model change to the project based on the provided data.
     *
     * @param {NewModelData} data - The new model data containing all the necessary information to construct and write the change.
     * @returns {Promise<void>} A promise that resolves when the change writing process is completed.
     */
    write(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = this.constructContent(data);
            const change = (0, change_utils_1.getGenericChange)(data, content, "appdescr_ui5_addNewModel" /* ChangeType.ADD_NEW_MODEL */);
            (0, change_utils_1.writeChangeToFolder)(this.projectPath, change, `id_${data.timestamp}_addNewModel.change`, this.fs, "manifest" /* FolderTypes.MANIFEST */);
        });
    }
}
exports.NewModelWriter = NewModelWriter;
//# sourceMappingURL=new-model-writer.js.map