"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentUsagesWriter = void 0;
const change_utils_1 = require("../../../base/change-utils");
/**
 * Handles the creation and writing of component usages data changes for a project.
 */
class ComponentUsagesWriter {
    /**
     * @param {Editor} fs - The filesystem editor instance.
     * @param {string} projectPath - The root path of the project.
     */
    constructor(fs, projectPath) {
        this.fs = fs;
        this.projectPath = projectPath;
    }
    /**
     * Constructs the content for an component usages change based on provided data.
     *
     * @param {ComponentUsagesData} data - The answers object containing information needed to construct the content property.
     * @returns {object} The constructed content object for the component usages change.
     */
    constructContent({ component }) {
        const { data, usageId, settings, isLazy } = component;
        const componentUsages = {
            [usageId]: {
                name: usageId,
                lazy: isLazy === 'true',
                settings: (0, change_utils_1.parseStringToObject)(settings),
                data: (0, change_utils_1.parseStringToObject)(data)
            }
        };
        return {
            componentUsages
        };
    }
    /**
     * Constructs the content for an library reference change based on provided data.
     *
     * @param {ComponentUsagesData} data - The answers object containing information needed to construct the content property.
     * @returns {object | undefined} The constructed content object for the library reference change.
     */
    constructLibContent(data) {
        const library = data.library;
        if (!library.reference) {
            return undefined;
        }
        return {
            libraries: {
                [library.reference]: {
                    lazy: library.referenceIsLazy === 'true'
                }
            }
        };
    }
    /**
     * Writes the component usages change to the project based on the provided data.
     *
     * @param {ComponentUsagesData} data - The component usages data containing all the necessary information to construct and write the change.
     * @returns {Promise<void>} A promise that resolves when the change writing process is completed.
     */
    write(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const componentUsagesContent = this.constructContent(data);
            const libRefContent = this.constructLibContent(data);
            const shouldAddLibRef = libRefContent !== undefined;
            const compUsagesChange = (0, change_utils_1.getGenericChange)(data, componentUsagesContent, "appdescr_ui5_addComponentUsages" /* ChangeType.ADD_COMPONENT_USAGES */);
            (0, change_utils_1.writeChangeToFolder)(this.projectPath, compUsagesChange, `id_${data.timestamp}_addComponentUsages.change`, this.fs, "manifest" /* FolderTypes.MANIFEST */);
            if (shouldAddLibRef) {
                data.timestamp += 1;
                const refLibChange = (0, change_utils_1.getGenericChange)(data, libRefContent, "appdescr_ui5_addLibraries" /* ChangeType.ADD_LIBRARY_REFERENCE */);
                (0, change_utils_1.writeChangeToFolder)(this.projectPath, refLibChange, `id_${data.timestamp}_addLibraries.change`, this.fs, "manifest" /* FolderTypes.MANIFEST */);
            }
        });
    }
}
exports.ComponentUsagesWriter = ComponentUsagesWriter;
//# sourceMappingURL=component-usages-writer.js.map