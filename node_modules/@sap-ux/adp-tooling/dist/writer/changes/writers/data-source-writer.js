"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSourceWriter = void 0;
const change_utils_1 = require("../../../base/change-utils");
/**
 * Handles the creation and writing of data source data changes for a project.
 */
class DataSourceWriter {
    /**
     * @param {Editor} fs - The filesystem editor instance.
     * @param {string} projectPath - The root path of the project.
     */
    constructor(fs, projectPath) {
        this.fs = fs;
        this.projectPath = projectPath;
    }
    /**
     * Constructs content for a data source change.
     *
     * @param {string} dataSourceId - The ID of the data source being modified.
     * @param {string} dataSourceUri - The new URI to update the data source with.
     * @param {number} [maxAge] - Optional maximum age.
     * @returns {object} The constructed content object for the change data source change.
     */
    constructContent(dataSourceId, dataSourceUri, maxAge) {
        const content = {
            dataSourceId: dataSourceId,
            entityPropertyChange: [
                {
                    propertyPath: 'uri',
                    operation: 'UPDATE',
                    propertyValue: dataSourceUri
                }
            ]
        };
        if (maxAge) {
            content.entityPropertyChange.push({
                propertyPath: 'settings/maxAge',
                operation: 'UPSERT',
                propertyValue: Number(maxAge)
            });
        }
        return content;
    }
    /**
     * Writes the change data source change to the project based on the provided data.
     *
     * @param {DataSourceData} data - The change data source data containing all the necessary information to construct and write the change.
     * @returns {Promise<void>} A promise that resolves when the change writing process is completed.
     */
    write(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const { dataSourcesDictionary, service } = data;
            const content = this.constructContent(service.name, service.uri, service.maxAge);
            const change = (0, change_utils_1.getGenericChange)(data, content, "appdescr_app_changeDataSource" /* ChangeType.CHANGE_DATA_SOURCE */);
            (0, change_utils_1.writeChangeToFolder)(this.projectPath, change, `id_${data.timestamp}_changeDataSource.change`, this.fs, "manifest" /* FolderTypes.MANIFEST */);
            const shouldAddAnnotation = service.annotationUri && service.annotationUri.length > 0;
            if (shouldAddAnnotation) {
                data.timestamp += 1;
                const annotationContent = this.constructContent(dataSourcesDictionary[service.name], service.annotationUri);
                const annotationChange = (0, change_utils_1.getGenericChange)(data, annotationContent, "appdescr_app_changeDataSource" /* ChangeType.CHANGE_DATA_SOURCE */);
                (0, change_utils_1.writeChangeToFolder)(this.projectPath, annotationChange, `id_${data.timestamp}_changeDataSource.change`, this.fs, "manifest" /* FolderTypes.MANIFEST */);
            }
        });
    }
}
exports.DataSourceWriter = DataSourceWriter;
//# sourceMappingURL=data-source-writer.js.map