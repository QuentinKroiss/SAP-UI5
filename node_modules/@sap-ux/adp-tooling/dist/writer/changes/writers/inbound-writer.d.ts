import type { Editor } from 'mem-fs-editor';
import type { IWriter, InboundData } from '../../../types';
/**
 * Handles the creation and writing of inbound data changes for a project.
 */
export declare class InboundWriter implements IWriter<InboundData> {
    private fs;
    private projectPath;
    /**
     * @param {Editor} fs - The filesystem editor instance.
     * @param {string} projectPath - The root path of the project.
     */
    constructor(fs: Editor, projectPath: string);
    /**
     * Constructs the content for an inbound data change based on provided data.
     *
     * @param {InboundData} data - The answers object containing information needed to construct the content property.
     * @returns {object} The constructed content object for the inbound data change.
     */
    private constructContent;
    /**
     * Enhances the provided content object based on the values provided in answers.
     *
     * @param {InboundData} data - An object containing potential values for title, subTitle, and icon.
     * @param {InboundContent} content - The initial content object to be enhanced.
     * @returns {void}
     */
    private getEnhancedContent;
    /**
     * Processes the provided answers object to parse its properties into the correct format.
     *
     * @param {InboundData} data - An object containing raw answers for inboundId, title, subTitle, and icon.
     * @returns {InboundData} A new answers object with properties modified
     *                           to ensure they are in the correct format for use in content construction.
     */
    private getModifiedData;
    /**
     * Writes the inbound data change to the project based on the provided data.
     *
     * @param {InboundData} data - The inbound data containing all the necessary information to construct and write the change.
     * @returns {Promise<void>} A promise that resolves when the change writing process is completed.
     */
    write(data: InboundData): Promise<void>;
}
//# sourceMappingURL=inbound-writer.d.ts.map