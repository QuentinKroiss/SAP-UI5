"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptTarget = exports.promptGeneratorInput = void 0;
const prompts_1 = __importDefault(require("prompts"));
const system_access_1 = require("@sap-ux/system-access");
const helper_1 = require("./helper");
/**
 * Prompt the user for the required properties for an adaptation project.
 *
 * @param defaults optional default values for the prompts
 * @param logger optional logger instance
 * @returns a configuration for the adp writer
 */
function promptGeneratorInput(defaults, logger) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        defaults = defaults !== null && defaults !== void 0 ? defaults : {};
        const { target, apps, layer } = yield promptTarget(defaults, logger);
        const app = yield (0, prompts_1.default)([
            {
                type: 'autocomplete',
                name: 'reference',
                message: 'Original application:',
                initial: defaults.reference,
                choices: apps.map((app) => {
                    var _a;
                    return ({
                        title: `${app['sap.app/title']} (${((_a = app['sap.fiori/registrationIds']) !== null && _a !== void 0 ? _a : []).join(',')})`,
                        value: app['sap.app/id']
                    });
                }),
                suggest: (input, choices) => Promise.resolve(choices.filter((i) => i.title.includes(input)))
            },
            {
                type: 'text',
                name: 'id',
                message: (_prev) => {
                    if (layer === 'CUSTOMER_BASE') {
                        return 'New adaptation id (prefix "customer" will be automatically added to the id):';
                    }
                    else {
                        return 'New adaptation id:';
                    }
                },
                initial: defaults.id,
                format: (input) => {
                    if (layer === 'CUSTOMER_BASE' && !input.startsWith('customer.')) {
                        return `customer.${input}`;
                    }
                    else {
                        return input;
                    }
                },
                validate: (input) => (input === null || input === void 0 ? void 0 : input.length) > 0
            },
            {
                type: 'text',
                name: 'title',
                message: 'Application title:'
            }
        ]);
        const deploy = yield (0, prompts_1.default)([
            {
                type: 'text',
                name: 'package',
                message: 'Deployment package:',
                initial: (_a = defaults.package) !== null && _a !== void 0 ? _a : '$TMP',
                validate: (input) => (input === null || input === void 0 ? void 0 : input.length) > 0
            },
            {
                type: 'text',
                name: 'transport',
                message: 'Transport request (optional):',
                initial: defaults.transport
            }
        ]);
        const options = yield (0, prompts_1.default)([
            {
                type: 'confirm',
                name: 'fioriTools',
                message: 'Enable Fiori tools?',
                initial: defaults.ft !== false,
                validate: (input) => (input === null || input === void 0 ? void 0 : input.length) > 0
            }
        ]);
        return {
            app: Object.assign(Object.assign({}, app), { layer }),
            target,
            options,
            deploy
        };
    });
}
exports.promptGeneratorInput = promptGeneratorInput;
/**
 * Prompt the user for the target system.
 *
 * @param defaults default values for the prompts
 * @param logger logger instance
 * @returns apps, layer, target url and client
 */
function promptTarget(defaults, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        let count = 0;
        let target = { url: defaults.url, client: defaults.client };
        while (count < 3) {
            try {
                count++;
                target = yield (0, prompts_1.default)([
                    {
                        type: 'text',
                        name: 'url',
                        message: 'Target system url:',
                        initial: target.url,
                        validate: helper_1.isNotEmptyString,
                        format: (input) => input.trim()
                    },
                    {
                        type: 'text',
                        name: 'client',
                        message: 'Client (optional):',
                        initial: target.client,
                        validate: helper_1.isValidSapClient
                    }
                ]);
                const systemInfo = yield fetchSystemInformation(target, defaults.ignoreCertErrors, logger);
                return Object.assign({ target }, systemInfo);
            }
            catch (error) {
                logger.error('Error while fetching system information. Please check your input.');
                logger.debug(error.message);
                if (error.code === 'UNABLE_TO_GET_ISSUER_CERT_LOCALLY') {
                    logger.error('If you are using a self-signed certificate, please use the --ignore-cert-errors flag.');
                    const confirm = yield (0, prompts_1.default)([
                        {
                            type: 'confirm',
                            name: 'ignoreCertErrors',
                            message: 'Do you want to ignore certificate errors?'
                        }
                    ]);
                    defaults.ignoreCertErrors = confirm.ignoreCertErrors;
                }
            }
        }
        throw new Error('Unable to fetch system information.');
    });
}
exports.promptTarget = promptTarget;
/**
 * Fetches the system information from the target system.
 *
 * @param target target system
 * @param ignoreCertErrors ignore certificate errors
 * @param logger logger instance
 * @returns app index and layer
 */
function fetchSystemInformation(target, ignoreCertErrors, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const provider = yield (0, system_access_1.createAbapServiceProvider)(target, {
            ignoreCertErrors
        }, true, logger);
        logger.info('Fetching system information...');
        const ato = yield provider.getAtoInfo();
        const layer = ato.tenantType === 'SAP' ? 'VENDOR' : 'CUSTOMER_BASE';
        logger.info(`Target layer: ${layer}`);
        logger.info('Fetching list of available applications... (it can take a moment)');
        const appIndex = provider.getAppIndex();
        const apps = yield appIndex.search({
            'sap.ui/technology': 'UI5',
            'sap.app/type': 'application'
        }, ['sap.app/id', 'sap.app/title', 'sap.fiori/registrationIds']);
        return { apps, layer };
    });
}
//# sourceMappingURL=prompt.js.map