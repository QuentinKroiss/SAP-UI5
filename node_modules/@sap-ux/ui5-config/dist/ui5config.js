"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UI5Config = void 0;
const yaml_1 = require("@sap-ux/yaml");
const middlewares_1 = require("./middlewares");
/**
 * Represents a UI5 config file in yaml format (ui5(-*).yaml) with utility functions to manipulate the yaml document.
 *
 * @class UI5Config
 */
class UI5Config {
    /**
     * Returns a new instance of UI5Config.
     *
     * @static
     * @param {string} serializedYaml - the serialized yaml string
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    static newInstance(serializedYaml) {
        return __awaiter(this, void 0, void 0, function* () {
            const instance = new UI5Config();
            instance.document = yield yaml_1.YamlDocument.newInstance(serializedYaml);
            return instance;
        });
    }
    /**
     * Tries reading the resources/configuration object from the config.
     *
     * @returns resources/configuration object from config or an empty object
     * @memberof UI5Config
     */
    getConfiguration() {
        var _a;
        let resources;
        try {
            resources = this.document.getMap({ path: 'resources' }).toJSON();
        }
        catch (error) {
            resources = {};
        }
        return (_a = resources.configuration) !== null && _a !== void 0 ? _a : {};
    }
    /**
     * Adds or replaces the resources/configuration object in the config.
     *
     * @param config configuration object that is to be written to the config
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    setConfiguration(config) {
        this.document.setIn({
            path: 'resources',
            value: { configuration: config }
        });
        return this;
    }
    /**
     * Set the metadata object in the yaml file.
     * See also https://sap.github.io/ui5-tooling/pages/Configuration/#metadata for reference.
     *
     * @param {Ui5Document['metadata']} value metadata of the project or application
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    setMetadata(value) {
        this.document.setIn({ path: 'metadata', value });
        return this;
    }
    /**
     * Set the type in the yaml file.
     * See also https://sap.github.io/ui5-tooling/pages/Configuration/#general-configuration for reference.
     *
     * @param {Ui5Document['type']} value - type of the application
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    setType(value) {
        this.document.setIn({ path: 'type', value });
        return this;
    }
    /**
     * Add a custom configuration to the yaml.
     *
     * @param key key/name of the custom property
     * @param value the properties value
     */
    addCustomConfiguration(key, value) {
        try {
            const configNode = this.document.getMap({ path: 'customConfiguration' });
            configNode.setIn([key], value);
        }
        catch (_error) {
            this.document.setIn({
                path: 'customConfiguration',
                value: {
                    [key]: value
                }
            });
        }
    }
    /**
     * Get a custom configuration from the yaml.
     *
     * @param key key/name of the custom property
     * @returns the value of the property or undefined
     */
    getCustomConfiguration(key) {
        var _a, _b;
        try {
            const node = this.document.getMap({ path: 'customConfiguration' }).get(key);
            return (_b = (_a = node === null || node === void 0 ? void 0 : node.toJSON) === null || _a === void 0 ? void 0 : _a.call(node)) !== null && _b !== void 0 ? _b : node === null || node === void 0 ? void 0 : node.toString();
        }
        catch (_error) {
            return undefined;
        }
    }
    /**
     * Adds a UI5 Framework entry to the yaml file.
     *
     * @param {string} ui5Framework - whether to user SAPUI5 or OpenUI5
     * @param {string} ui5Version - ui5 version
     * @param {string[]} ui5Libraries - a list of libraries
     * @param {string} ui5Theme - optional ui5 theme
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    addUI5Framework(ui5Framework, ui5Version, ui5Libraries, ui5Theme = 'sap_fiori_3') {
        const libraryObjs = [];
        for (const library of ui5Libraries) {
            libraryObjs.push({ name: library });
        }
        // Add theme lib (dark theme versions are provided by base theme lib)
        libraryObjs.push({ name: `themelib_${ui5Theme.replace(/_dark$|_hcw$|_hcb$/, '')}` });
        this.document.setIn({
            path: 'framework',
            value: { name: ui5Framework, version: ui5Version, libraries: libraryObjs }
        });
        return this;
    }
    /**
     * Adds a list of custom tasks to the config.
     *
     * @param {CustomTask<any>[]} tasks - the list of custom tasks
     * @param {NodeComment<CustomMiddleware<any>>[]} comments - a list of comments
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    addCustomTasks(tasks, comments) {
        for (const task of tasks) {
            this.document.appendTo({ path: 'builder.customTasks', value: task, comments });
        }
        return this;
    }
    /**
     * Adds a list of custom middlewares to the config.
     *
     * @param {CustomMiddleware<any>[]} middlewares - the list of custom middlewares
     * @param {NodeComment<CustomMiddleware<any>>[]} comments - a list of comments
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    addCustomMiddleware(middlewares, comments) {
        for (const mw of middlewares) {
            this.document.appendTo({ path: 'server.customMiddleware', value: mw, comments });
        }
        return this;
    }
    /**
     * Adds a instance of the Fiori tools app-reload middleware to the config.
     *
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    addFioriToolsAppReloadMiddleware() {
        this.document.appendTo({
            path: 'server.customMiddleware',
            value: (0, middlewares_1.getAppReloadMiddlewareConfig)()
        });
        return this;
    }
    /**
     * Adds a instance of the Fiori tools proxy middleware to the config.
     *
     * @param proxyConfig proxy configuration containing an optional array of backend and an option UI5 host configuration
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    addFioriToolsProxydMiddleware(proxyConfig) {
        const { config, comments } = (0, middlewares_1.getFioriToolsProxyMiddlewareConfig)(proxyConfig.backend, proxyConfig.ui5);
        this.document.appendTo({
            path: 'server.customMiddleware',
            value: config,
            comments: comments
        });
        return this;
    }
    /**
     * Adds a backend configuration to an existing fiori-tools-proxy middleware. If the config does not contain a fiori-tools-proxy middleware, an error is thrown.
     *
     * @param backend config of backend that is to be proxied
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    addBackendToFioriToolsProxydMiddleware(backend) {
        const middlewareList = this.document.getSequence({ path: 'server.customMiddleware' });
        const proxyMiddleware = this.document.findItem(middlewareList, (item) => item.name === 'fiori-tools-proxy');
        if (!proxyMiddleware) {
            throw new Error('Could not find fiori-tools-proxy');
        }
        this.document.getMap({ start: proxyMiddleware, path: 'configuration' }).set('backend', [backend]);
        return this;
    }
    /**
     * Adds a ui configuration to an existing fiori-tools-proxy middleware. If the config does not contain a fiori-tools-proxy middleware, an error is thrown.
     *
     * @param ui5 config of backend that is to be proxied
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    addUi5ToFioriToolsProxydMiddleware(ui5) {
        const middlewareList = this.document.getSequence({ path: 'server.customMiddleware' });
        const proxyMiddleware = this.document.findItem(middlewareList, (item) => item.name === 'fiori-tools-proxy');
        if (!proxyMiddleware) {
            throw new Error('Could not find fiori-tools-proxy');
        }
        this.document.getMap({ start: proxyMiddleware, path: 'configuration' }).set('ui5', [ui5]);
        return this;
    }
    /**
     * Adds a instance of the mockserver middleware to the config.
     *
     * @param path option path that is to be mocked
     * @param annotationsConfig optional annotations config that is to be mocked
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    addMockServerMiddleware(path, annotationsConfig) {
        this.document.appendTo({
            path: 'server.customMiddleware',
            value: (0, middlewares_1.getMockServerMiddlewareConfig)(path, annotationsConfig)
        });
        return this;
    }
    /**
     * Adds the ABAP deployment task to the config.
     *
     * @param target system that this app is to be deployed to
     * @param app application configuration for the deployment to ABAP
     * @param fioriTools if true use the middleware included in the @sap/ux-ui5-tooling module
     * @returns this UI5Config instance
     * @memberof UI5Config
     */
    addAbapDeployTask(target, app, fioriTools = true) {
        this.document.appendTo({
            path: 'builder.resources.excludes',
            value: '/test/**'
        });
        this.document.appendTo({
            path: 'builder.resources.excludes',
            value: '/localService/**'
        });
        this.document.appendTo({
            path: 'builder.customTasks',
            value: {
                name: fioriTools ? 'deploy-to-abap' : 'abap-deploy-task',
                afterTask: 'generateCachebusterInfo',
                configuration: { target, app }
            }
        });
        return this;
    }
    /**
     * Remove a middleware form the UI5 config.
     *
     * @param name name of the middleware that is to be removed
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    removeCustomMiddleware(name) {
        this.document.deleteAt({
            path: 'server.customMiddleware',
            matcher: { key: 'name', value: name }
        });
        return this;
    }
    /**
     * Remove a task form the UI5 config.
     *
     * @param name name of the task that is to be removed
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    removeCustomTask(name) {
        this.document.deleteAt({
            path: 'builder.customTasks',
            matcher: { key: 'name', value: name }
        });
        return this;
    }
    /**
     * Find a custom item in the UI5 config.
     *
     * @param name name of the item (task or middlewre) that is to be looked for
     * @param path path to the root of the sequence that is to be searched
     * @returns the configuration as object or undefined if not found
     * @memberof UI5Config
     */
    findCustomActivity(name, path) {
        let list;
        try {
            list = this.document.getSequence({ path });
        }
        catch (error) {
            // if the document does not contain the builder > customTasks section and error is thrown
        }
        let item;
        if (list) {
            item = this.document.findItem(list, (item) => item.name === name);
        }
        return item ? item.toJSON() : undefined;
    }
    /**
     * Find a middleware in the UI5 config.
     *
     * @param name name of the middleware that is to be looked for
     * @returns the middleware configuration as object or undefined if not found
     * @memberof UI5Config
     */
    findCustomMiddleware(name) {
        return this.findCustomActivity(name, 'server.customMiddleware');
    }
    /**
     * Find a task in the UI5 config.
     *
     * @param name name of the task that is to be looked for
     * @returns the middleware configuration as object or undefined if not found
     * @memberof UI5Config
     */
    findCustomTask(name) {
        return this.findCustomActivity(name, 'builder.customTasks');
    }
    /**
     * Update an existing custom middleware or create it. Existing custom middleware be overwritten, not merged.
     * If the custom middleware doesn't exist, it will be added.
     *
     * @param middleware - middleware config
     * @returns {UI5Config} the UI5Config instance
     * @memberof UI5Config
     */
    updateCustomMiddleware(middleware) {
        const name = middleware.name;
        if (this.findCustomMiddleware(name)) {
            this.document.updateAt({
                path: 'server.customMiddleware',
                matcher: { key: 'name', value: name },
                value: middleware,
                mode: 'overwrite'
            });
        }
        else {
            this.addCustomMiddleware([middleware]);
        }
        return this;
    }
    /**
     * Returns a string representation of the config.
     *
     * @returns {string} the string representation
     * @memberof UI5Config
     */
    toString() {
        return this.document.toString();
    }
}
exports.UI5Config = UI5Config;
//# sourceMappingURL=ui5config.js.map