import * as Authorization from "./Authorization";
import * as Core from "./Core";
import * as Edm from "../Edm";
import AnnotationTerm = Edm.AnnotationTerm;
import PropertyAnnotationValue = Edm.PropertyAnnotationValue;
import ComplexType = Edm.RecordComplexType;
/**
  The conformance level achieved by this service
*/
export type ConformanceLevel = ConformanceLevelType | ConformanceLevelTypeValues;
export declare const enum ConformanceLevelType {
    /**
    Minimal conformance level
    */
    /**
    undefined
    */
    Minimal = "Capabilities.ConformanceLevelType/Minimal",
    /**
    Intermediate conformance level
    */
    /**
    undefined
    */
    Intermediate = "Capabilities.ConformanceLevelType/Intermediate",
    /**
    Advanced conformance level
    */
    /**
    undefined
    */
    Advanced = "Capabilities.ConformanceLevelType/Advanced"
}
export declare const enum ConformanceLevelTypeValues {
    /**
    Minimal conformance level
    */
    /**
    undefined
    */
    Minimal = 0,
    /**
    Intermediate conformance level
    */
    /**
    undefined
    */
    Intermediate = 1,
    /**
    Advanced conformance level
    */
    /**
    undefined
    */
    Advanced = 2
}
/**
  Media types of supported formats, including format parameters
*/
export type SupportedFormats = {
    term: CapabilitiesAnnotationTerms.SupportedFormats;
} & AnnotationTerm<Edm.String[]>;
/**
  Media types of supported formats for $metadata, including format parameters
*/
export type SupportedMetadataFormats = {
    term: CapabilitiesAnnotationTerms.SupportedMetadataFormats;
} & AnnotationTerm<Edm.String[]>;
/**
  List of acceptable compression methods for ($batch) requests, e.g. gzip
*/
export type AcceptableEncodings = {
    term: CapabilitiesAnnotationTerms.AcceptableEncodings;
} & AnnotationTerm<Edm.String[]>;
/**
  Service supports the asynchronous request preference
*/
export type AsynchronousRequestsSupported = {
    term: CapabilitiesAnnotationTerms.AsynchronousRequestsSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Service supports the continue on error preference. Supports $batch requests. Services that apply the BatchContinueOnErrorSupported term should also specify the ContinueOnErrorSupported property from the BatchSupport term.
*/
export type BatchContinueOnErrorSupported = {
    term: CapabilitiesAnnotationTerms.BatchContinueOnErrorSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Supported odata.isolation levels
*/
export type IsolationSupported = IsolationLevel | IsolationLevelValues[];
export declare const enum IsolationLevel {
    /**
    All data returned for a request, including multiple requests within a batch or results retrieved across multiple pages, will be consistent as of a single point in time
    */
    /**
    undefined
    */
    Snapshot = "Capabilities.IsolationLevel/Snapshot"
}
export declare const enum IsolationLevelValues {
    /**
    All data returned for a request, including multiple requests within a batch or results retrieved across multiple pages, will be consistent as of a single point in time
    */
    /**
    undefined
    */
    Snapshot = 1
}
/**
  Supports cross joins for the entity sets in this container
*/
export type CrossJoinSupported = {
    term: CapabilitiesAnnotationTerms.CrossJoinSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Supports callbacks for the specified protocols
*/
export type CallbackSupported = {
    term: CapabilitiesAnnotationTerms.CallbackSupported;
} & AnnotationTerm<CallbackTypeTypes>;
/**
  A non-empty collection lists the full set of supported protocols. A empty collection means 'only HTTP is supported'
*/
export type CallbackType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.CallbackType;
    /**
        List of supported callback protocols, e.g. `http` or `wss`
    */
    CallbackProtocols: CallbackProtocolTypes[];
};
export type CallbackProtocol = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.CallbackProtocol;
    /**
        Protocol Identifier
    */
    Id?: Edm.String;
    /**
        URL Template including parameters. Parameters are enclosed in curly braces {} as defined in RFC6570
    */
    UrlTemplate?: Edm.String;
    /**
        Human readable description of the meaning of the URL Template parameters
    */
    DocumentationUrl?: Edm.String;
};
/**
  Change tracking capabilities of this service or entity set
*/
export type ChangeTracking = {
    term: CapabilitiesAnnotationTerms.ChangeTracking;
} & AnnotationTerm<ChangeTrackingTypeTypes>;
export type ChangeTrackingType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.ChangeTrackingType;
    /**
        This entity set supports the odata.track-changes preference
    */
    Supported: Edm.Boolean;
    /**
        Change tracking supports filters on these properties
    */
    FilterableProperties: Edm.PropertyPath[];
    /**
        Change tracking supports these properties expanded
    */
    ExpandableProperties: Edm.NavigationPropertyPath[];
};
/**
  Restrictions on /$count path suffix and $count=true system query option
*/
export type CountRestrictions = {
    term: CapabilitiesAnnotationTerms.CountRestrictions;
} & AnnotationTerm<CountRestrictionsTypeTypes>;
export type CountRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.CountRestrictionsType;
    /**
        Entities can be counted (only valid if targeting an entity set)
    */
    Countable: Edm.Boolean;
    /**
        Members of these collection properties cannot be counted
    */
    NonCountableProperties: Edm.PropertyPath[];
    /**
        Members of these navigation properties cannot be counted
    */
    NonCountableNavigationProperties: Edm.NavigationPropertyPath[];
};
/**
  Restrictions on navigating properties according to OData URL conventions
*/
export type NavigationRestrictions = {
    term: CapabilitiesAnnotationTerms.NavigationRestrictions;
} & AnnotationTerm<NavigationRestrictionsTypeTypes>;
export type NavigationRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.NavigationRestrictionsType;
    /**
        Default navigability for all navigation properties of the annotation target. Individual navigation properties can override this value via `RestrictedProperties/Navigability`.
    */
    Navigability?: NavigationType;
    /**
        List of navigation properties with restrictions
    */
    RestrictedProperties: NavigationPropertyRestrictionTypes[];
};
export type NavigationPropertyRestriction = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.NavigationPropertyRestriction;
    /**
        Navigation properties can be navigated
    */
    NavigationProperty: Edm.NavigationPropertyPath;
    /**
        Supported navigability of this navigation property
    */
    Navigability?: NavigationType;
    /**
        List of functions and operators supported in filter expressions
    */
    FilterFunctions: Edm.String[];
    /**
        Restrictions on filter expressions
    */
    FilterRestrictions?: FilterRestrictionsTypeTypes;
    /**
        Restrictions on search expressions
    */
    SearchRestrictions?: SearchRestrictionsTypeTypes;
    /**
        Restrictions on orderby expressions
    */
    SortRestrictions?: SortRestrictionsTypeTypes;
    /**
        Supports $top
    */
    TopSupported: Edm.Boolean;
    /**
        Supports $skip
    */
    SkipSupported: Edm.Boolean;
    /**
        Support for $select
    */
    SelectSupport?: SelectSupportTypeTypes;
    /**
        Supports key values according to OData URL conventions
    */
    IndexableByKey: Edm.Boolean;
    /**
        Restrictions on insert operations
    */
    InsertRestrictions?: InsertRestrictionsTypeTypes;
    /**
        Deep Insert Support of the annotated resource (the whole service, an entity set, or a collection-valued resource)
    */
    DeepInsertSupport?: DeepInsertSupportTypeTypes;
    /**
        Restrictions on update operations
    */
    UpdateRestrictions?: UpdateRestrictionsTypeTypes;
    /**
        Deep Update Support of the annotated resource (the whole service, an entity set, or a collection-valued resource)
    */
    DeepUpdateSupport?: DeepUpdateSupportTypeTypes;
    /**
        Restrictions on delete operations
    */
    DeleteRestrictions?: DeleteRestrictionsTypeTypes;
    /**
        Data modification (including insert) along this navigation property requires the use of ETags
    */
    OptimisticConcurrencyControl: Edm.Boolean;
    /**
        Restrictions for retrieving entities
    */
    ReadRestrictions?: ReadRestrictionsTypeTypes;
};
export declare const enum NavigationType {
    /**
    Navigation properties can be recursively navigated
    */
    /**
    undefined
    */
    Recursive = "Capabilities.NavigationType/Recursive",
    /**
    Navigation properties can be navigated to a single level
    */
    /**
    undefined
    */
    Single = "Capabilities.NavigationType/Single",
    /**
    Navigation properties are not navigable
    */
    /**
    undefined
    */
    None = "Capabilities.NavigationType/None"
}
export declare const enum NavigationTypeValues {
    /**
    Navigation properties can be recursively navigated
    */
    /**
    undefined
    */
    Recursive = 0,
    /**
    Navigation properties can be navigated to a single level
    */
    /**
    undefined
    */
    Single = 1,
    /**
    Navigation properties are not navigable
    */
    /**
    undefined
    */
    None = 2
}
/**
  Supports key values according to OData URL conventions
*/
export type IndexableByKey = {
    term: CapabilitiesAnnotationTerms.IndexableByKey;
} & AnnotationTerm<Core.Tag>;
/**
  Supports $top
*/
export type TopSupported = {
    term: CapabilitiesAnnotationTerms.TopSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Supports $skip
*/
export type SkipSupported = {
    term: CapabilitiesAnnotationTerms.SkipSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Supports $compute
*/
export type ComputeSupported = {
    term: CapabilitiesAnnotationTerms.ComputeSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Support for $select and nested query options within $select
*/
export type SelectSupport = {
    term: CapabilitiesAnnotationTerms.SelectSupport;
} & AnnotationTerm<SelectSupportTypeTypes>;
export type SelectSupportType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.SelectSupportType;
    /**
        Supports $select
    */
    Supported: Edm.Boolean;
    /**
        Supports instance annotations in $select list
    */
    InstanceAnnotationsSupported: Edm.Boolean;
    /**
        $expand within $select is supported
    */
    Expandable: Edm.Boolean;
    /**
        $filter within $select is supported
    */
    Filterable: Edm.Boolean;
    /**
        $search within $select is supported
    */
    Searchable: Edm.Boolean;
    /**
        $top within $select is supported
    */
    TopSupported: Edm.Boolean;
    /**
        $skip within $select is supported
    */
    SkipSupported: Edm.Boolean;
    /**
        $compute within $select is supported
    */
    ComputeSupported: Edm.Boolean;
    /**
        $count within $select is supported
    */
    Countable: Edm.Boolean;
    /**
        $orderby within $select is supported
    */
    Sortable: Edm.Boolean;
};
/**
  Supports $batch requests. Services that apply the BatchSupported term should also apply the more comprehensive BatchSupport term.
*/
export type BatchSupported = {
    term: CapabilitiesAnnotationTerms.BatchSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Batch Support for the service
*/
export type BatchSupport = {
    term: CapabilitiesAnnotationTerms.BatchSupport;
} & AnnotationTerm<BatchSupportTypeTypes>;
export type BatchSupportType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.BatchSupportType;
    /**
        Service supports requests to $batch
    */
    Supported: Edm.Boolean;
    /**
        Service supports the continue on error preference
    */
    ContinueOnErrorSupported: Edm.Boolean;
    /**
        Service supports Content-ID referencing in request bodies
    */
    ReferencesInRequestBodiesSupported: Edm.Boolean;
    /**
        Service supports Content-ID referencing across change sets
    */
    ReferencesAcrossChangeSetsSupported: Edm.Boolean;
    /**
        Service supports referencing Etags from previous requests
    */
    EtagReferencesSupported: Edm.Boolean;
    /**
        Service supports the `if` member in JSON batch requests
    */
    RequestDependencyConditionsSupported: Edm.Boolean;
    /**
        Media types of supported formats for $batch
    */
    SupportedFormats: Edm.String[];
};
/**
  List of functions and operators supported in filter expressions
*/
export type FilterFunctions = {
    term: CapabilitiesAnnotationTerms.FilterFunctions;
} & AnnotationTerm<Edm.String[]>;
/**
  Restrictions on filter expressions
*/
export type FilterRestrictions = {
    term: CapabilitiesAnnotationTerms.FilterRestrictions;
} & AnnotationTerm<FilterRestrictionsTypeTypes>;
export type FilterRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.FilterRestrictionsType;
    /**
        $filter is supported
    */
    Filterable: Edm.Boolean;
    /**
        $filter is required
    */
    RequiresFilter: Edm.Boolean;
    /**
        These properties must be specified in the $filter clause (properties of derived types are not allowed here)
    */
    RequiredProperties: Edm.PropertyPath[];
    /**
        These structural properties cannot be used in filter expressions
    */
    NonFilterableProperties: Edm.PropertyPath[];
    /**
        These properties only allow a subset of filter expressions. A valid filter expression for a single property can be enclosed in parentheses and combined by `and` with valid expressions for other properties.
    */
    FilterExpressionRestrictions: FilterExpressionRestrictionTypeTypes[];
    /**
        The maximum number of levels (including recursion) that can be traversed in a filter expression. A value of -1 indicates there is no restriction.
    */
    MaxLevels: Edm.Int32;
};
export type FilterExpressionRestrictionType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.FilterExpressionRestrictionType;
    /**
        Path to the restricted property
    */
    Property?: Edm.PropertyPath;
    /**
        Allowed subset of expressions
    */
    AllowedExpressions?: FilterExpressionType;
};
export type FilterExpressionType = Edm.String;
/**
  Restrictions on orderby expressions
*/
export type SortRestrictions = {
    term: CapabilitiesAnnotationTerms.SortRestrictions;
} & AnnotationTerm<SortRestrictionsTypeTypes>;
export type SortRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.SortRestrictionsType;
    /**
        $orderby is supported
    */
    Sortable: Edm.Boolean;
    /**
        These properties can only be used for sorting in Ascending order
    */
    AscendingOnlyProperties: Edm.PropertyPath[];
    /**
        These properties can only be used for sorting in Descending order
    */
    DescendingOnlyProperties: Edm.PropertyPath[];
    /**
        These structural properties cannot be used in orderby expressions
    */
    NonSortableProperties: Edm.PropertyPath[];
};
/**
  Restrictions on expand expressions
*/
export type ExpandRestrictions = {
    term: CapabilitiesAnnotationTerms.ExpandRestrictions;
} & AnnotationTerm<ExpandRestrictionsTypeTypes>;
export type ExpandRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.ExpandRestrictionsType;
    /**
        $expand is supported
    */
    Expandable: Edm.Boolean;
    /**
        $expand is supported for stream properties and media streams
    */
    StreamsExpandable: Edm.Boolean;
    /**
        These properties cannot be used in expand expressions
    */
    NonExpandableProperties: Edm.NavigationPropertyPath[];
    /**
        These stream properties cannot be used in expand expressions
    */
    NonExpandableStreamProperties: Edm.PropertyPath[];
    /**
        The maximum number of levels that can be expanded in a expand expression. A value of -1 indicates there is no restriction.
    */
    MaxLevels: Edm.Int32;
};
/**
  Restrictions on search expressions
*/
export type SearchRestrictions = {
    term: CapabilitiesAnnotationTerms.SearchRestrictions;
} & AnnotationTerm<SearchRestrictionsTypeTypes>;
export type SearchRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.SearchRestrictionsType;
    /**
        $search is supported
    */
    Searchable: Edm.Boolean;
    /**
        Expressions not supported in $search
    */
    UnsupportedExpressions: SearchExpressions[];
};
export declare const enum SearchExpressions {
    /**
    Single search term
    */
    /**
    undefined
    */
    none = "Capabilities.SearchExpressions/none",
    /**
    Multiple search terms separated by `AND`
    */
    /**
    undefined
    */
    AND = "Capabilities.SearchExpressions/AND",
    /**
    Multiple search terms separated by `OR`
    */
    /**
    undefined
    */
    OR = "Capabilities.SearchExpressions/OR",
    /**
    Search terms preceded by `NOT`
    */
    /**
    undefined
    */
    NOT = "Capabilities.SearchExpressions/NOT",
    /**
    Search phrases enclosed in double quotes
    */
    /**
    undefined
    */
    phrase = "Capabilities.SearchExpressions/phrase",
    /**
    Precedence grouping of search expressions with parentheses
    */
    /**
    undefined
    */
    group = "Capabilities.SearchExpressions/group"
}
export declare const enum SearchExpressionsValues {
    /**
    Single search term
    */
    /**
    undefined
    */
    none = 0,
    /**
    Multiple search terms separated by `AND`
    */
    /**
    undefined
    */
    AND = 1,
    /**
    Multiple search terms separated by `OR`
    */
    /**
    undefined
    */
    OR = 2,
    /**
    Search terms preceded by `NOT`
    */
    /**
    undefined
    */
    NOT = 4,
    /**
    Search phrases enclosed in double quotes
    */
    /**
    undefined
    */
    phrase = 8,
    /**
    Precedence grouping of search expressions with parentheses
    */
    /**
    undefined
    */
    group = 16
}
/**
  Supports [key-as-segment convention](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_KeyasSegmentConvention) for addressing entities within a collection
*/
export type KeyAsSegmentSupported = {
    term: CapabilitiesAnnotationTerms.KeyAsSegmentSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Supports [passing query options in the request body](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_PassingQueryOptionsintheRequestBody)
*/
export type QuerySegmentSupported = {
    term: CapabilitiesAnnotationTerms.QuerySegmentSupported;
} & AnnotationTerm<Core.Tag>;
/**
  Restrictions on insert operations
*/
export type InsertRestrictions = {
    term: CapabilitiesAnnotationTerms.InsertRestrictions;
} & AnnotationTerm<InsertRestrictionsTypeTypes>;
export type InsertRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.InsertRestrictionsType;
    /**
        Entities can be inserted
    */
    Insertable: Edm.Boolean;
    /**
        These structural properties cannot be specified on insert
    */
    NonInsertableProperties: Edm.PropertyPath[];
    /**
        These navigation properties do not allow deep inserts
    */
    NonInsertableNavigationProperties: Edm.NavigationPropertyPath[];
    /**
        These structural properties must be specified on insert
    */
    RequiredProperties: Edm.PropertyPath[];
    /**
        The maximum number of navigation properties that can be traversed when addressing the collection to insert into. A value of -1 indicates there is no restriction.
    */
    MaxLevels: Edm.Int32;
    /**
        Entities of a specific derived type can be created by specifying a type-cast segment
    */
    TypecastSegmentSupported: Edm.Boolean;
    /**
        Required permissions. One of the specified sets of scopes is required to perform the insert.
    */
    Permissions?: PermissionTypeTypes[];
    /**
        Support for query options with insert requests
    */
    QueryOptions?: ModificationQueryOptionsTypeTypes;
    /**
        Supported or required custom headers
    */
    CustomHeaders: CustomParameterTypes[];
    /**
        Supported or required custom query options
    */
    CustomQueryOptions: CustomParameterTypes[];
    /**
        A brief description of the request
    */
    Description?: Edm.String;
    /**
        A long description of the request
    */
    LongDescription?: Edm.String;
    /**
        Possible error responses returned by the request.
    */
    ErrorResponses: HttpResponseTypes[];
};
export type PermissionType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.PermissionType;
    /**
        Authorization flow scheme name
    */
    SchemeName: Authorization.SchemeName;
    /**
        List of scopes that can provide access to the resource
    */
    Scopes: ScopeTypeTypes[];
};
export type ScopeType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.ScopeType;
    /**
        Name of the scope.
    */
    Scope: Edm.String;
    /**
        Comma-separated string value of all properties that will be included or excluded when using the scope.
    */
    RestrictedProperties?: Edm.String;
};
/**
  Deep Insert Support of the annotated resource (the whole service, an entity set, or a collection-valued resource)
*/
export type DeepInsertSupport = {
    term: CapabilitiesAnnotationTerms.DeepInsertSupport;
} & AnnotationTerm<DeepInsertSupportTypeTypes>;
export type DeepInsertSupportType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.DeepInsertSupportType;
    /**
        Annotation target supports deep inserts
    */
    Supported: Edm.Boolean;
    /**
        Annotation target supports accepting and returning nested entities annotated with the `Core.ContentID` instance annotation.
    */
    ContentIDSupported: Edm.Boolean;
};
/**
  Restrictions on update operations
*/
export type UpdateRestrictions = {
    term: CapabilitiesAnnotationTerms.UpdateRestrictions;
} & AnnotationTerm<UpdateRestrictionsTypeTypes>;
export type UpdateRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.UpdateRestrictionsType;
    /**
        Entities can be updated
    */
    Updatable: PropertyAnnotationValue<Edm.Boolean>;
    /**
        Entities can be upserted
    */
    Upsertable: Edm.Boolean;
    /**
        Entities can be inserted, updated, and deleted via a PATCH request with a delta payload
    */
    DeltaUpdateSupported: Edm.Boolean;
    /**
        Supported HTTP Methods (PUT or PATCH) for updating an entity.  If null, PATCH SHOULD be supported and PUT MAY be supported.
    */
    UpdateMethod?: HttpMethod[];
    /**
        Members of collections can be updated via a PATCH request with a `/$filter(...)/$each` segment
    */
    FilterSegmentSupported: Edm.Boolean;
    /**
        Members of collections can be updated via a PATCH request with a type-cast segment and a `/$each` segment
    */
    TypecastSegmentSupported: Edm.Boolean;
    /**
        These structural properties cannot be updated
    */
    NonUpdatableProperties: Edm.PropertyPath[];
    /**
        These navigation properties do not allow rebinding
    */
    NonUpdatableNavigationProperties: Edm.NavigationPropertyPath[];
    /**
        These structural properties must be specified on update
    */
    RequiredProperties: Edm.PropertyPath[];
    /**
        The maximum number of navigation properties that can be traversed when addressing the collection or entity to update. A value of -1 indicates there is no restriction.
    */
    MaxLevels: Edm.Int32;
    /**
        Required permissions. One of the specified sets of scopes is required to perform the update.
    */
    Permissions?: PermissionTypeTypes[];
    /**
        Support for query options with update requests
    */
    QueryOptions?: ModificationQueryOptionsTypeTypes;
    /**
        Supported or required custom headers
    */
    CustomHeaders: CustomParameterTypes[];
    /**
        Supported or required custom query options
    */
    CustomQueryOptions: CustomParameterTypes[];
    /**
        A brief description of the request
    */
    Description?: Edm.String;
    /**
        A long description of the request
    */
    LongDescription?: Edm.String;
    /**
        Possible error responses returned by the request.
    */
    ErrorResponses: HttpResponseTypes[];
};
export declare const enum HttpMethod {
    /**
    The HTTP GET Method
    */
    /**
    undefined
    */
    GET = "Capabilities.HttpMethod/GET",
    /**
    The HTTP PATCH Method
    */
    /**
    undefined
    */
    PATCH = "Capabilities.HttpMethod/PATCH",
    /**
    The HTTP PUT Method
    */
    /**
    undefined
    */
    PUT = "Capabilities.HttpMethod/PUT",
    /**
    The HTTP POST Method
    */
    /**
    undefined
    */
    POST = "Capabilities.HttpMethod/POST",
    /**
    The HTTP DELETE Method
    */
    /**
    undefined
    */
    DELETE = "Capabilities.HttpMethod/DELETE",
    /**
    The HTTP OPTIONS Method
    */
    /**
    undefined
    */
    OPTIONS = "Capabilities.HttpMethod/OPTIONS",
    /**
    The HTTP HEAD Method
    */
    /**
    undefined
    */
    HEAD = "Capabilities.HttpMethod/HEAD"
}
export declare const enum HttpMethodValues {
    /**
    The HTTP GET Method
    */
    /**
    undefined
    */
    GET = 1,
    /**
    The HTTP PATCH Method
    */
    /**
    undefined
    */
    PATCH = 2,
    /**
    The HTTP PUT Method
    */
    /**
    undefined
    */
    PUT = 4,
    /**
    The HTTP POST Method
    */
    /**
    undefined
    */
    POST = 8,
    /**
    The HTTP DELETE Method
    */
    /**
    undefined
    */
    DELETE = 16,
    /**
    The HTTP OPTIONS Method
    */
    /**
    undefined
    */
    OPTIONS = 32,
    /**
    The HTTP HEAD Method
    */
    /**
    undefined
    */
    HEAD = 64
}
/**
  Deep Update Support of the annotated resource (the whole service, an entity set, or a collection-valued resource)
*/
export type DeepUpdateSupport = {
    term: CapabilitiesAnnotationTerms.DeepUpdateSupport;
} & AnnotationTerm<DeepUpdateSupportTypeTypes>;
export type DeepUpdateSupportType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.DeepUpdateSupportType;
    /**
        Annotation target supports deep updates
    */
    Supported: Edm.Boolean;
    /**
        Annotation target supports accepting and returning nested entities annotated with the `Core.ContentID` instance annotation.
    */
    ContentIDSupported: Edm.Boolean;
};
/**
  Restrictions on delete operations
*/
export type DeleteRestrictions = {
    term: CapabilitiesAnnotationTerms.DeleteRestrictions;
} & AnnotationTerm<DeleteRestrictionsTypeTypes>;
export type DeleteRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.DeleteRestrictionsType;
    /**
        Entities can be deleted
    */
    Deletable: PropertyAnnotationValue<Edm.Boolean>;
    /**
        These navigation properties do not allow DeleteLink requests
    */
    NonDeletableNavigationProperties: Edm.NavigationPropertyPath[];
    /**
        The maximum number of navigation properties that can be traversed when addressing the collection to delete from or the entity to delete. A value of -1 indicates there is no restriction.
    */
    MaxLevels: Edm.Int32;
    /**
        Members of collections can be deleted via a DELETE request with a `/$filter(...)/$each` segment
    */
    FilterSegmentSupported: Edm.Boolean;
    /**
        Members of collections can be deleted via a DELETE request with a type-cast segment and a `/$each` segment
    */
    TypecastSegmentSupported: Edm.Boolean;
    /**
        Required permissions. One of the specified sets of scopes is required to perform the delete.
    */
    Permissions?: PermissionTypeTypes[];
    /**
        Supported or required custom headers
    */
    CustomHeaders: CustomParameterTypes[];
    /**
        Supported or required custom query options
    */
    CustomQueryOptions: CustomParameterTypes[];
    /**
        A brief description of the request
    */
    Description?: Edm.String;
    /**
        A long description of the request
    */
    LongDescription?: Edm.String;
    /**
        Possible error responses returned by the request.
    */
    ErrorResponses: HttpResponseTypes[];
};
/**
  Describes restrictions on operations applied to collection-valued structural properties
*/
export type CollectionPropertyRestrictions = {
    term: CapabilitiesAnnotationTerms.CollectionPropertyRestrictions;
} & AnnotationTerm<CollectionPropertyRestrictionsTypeTypes[]>;
export type CollectionPropertyRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.CollectionPropertyRestrictionsType;
    /**
        Restricted Collection-valued property
    */
    CollectionProperty?: Edm.PropertyPath;
    /**
        List of functions and operators supported in filter expressions
    */
    FilterFunctions: Edm.String[];
    /**
        Restrictions on filter expressions
    */
    FilterRestrictions?: FilterRestrictionsTypeTypes;
    /**
        Restrictions on search expressions
    */
    SearchRestrictions?: SearchRestrictionsTypeTypes;
    /**
        Restrictions on orderby expressions
    */
    SortRestrictions?: SortRestrictionsTypeTypes;
    /**
        Supports $top
    */
    TopSupported: Edm.Boolean;
    /**
        Supports $skip
    */
    SkipSupported: Edm.Boolean;
    /**
        Support for $select
    */
    SelectSupport?: SelectSupportTypeTypes;
    /**
        Members can be inserted into this collection
    */
    Insertable: Edm.Boolean;
    /**
        Members of this ordered collection can be updated by ordinal
    */
    Updatable: Edm.Boolean;
    /**
        Members of this ordered collection can be deleted by ordinal
    */
    Deletable: Edm.Boolean;
};
/**
  Restrictions for function or action operation
*/
export type OperationRestrictions = {
    term: CapabilitiesAnnotationTerms.OperationRestrictions;
} & AnnotationTerm<OperationRestrictionsTypeTypes>;
export type OperationRestrictionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.OperationRestrictionsType;
    /**
        Bound action or function can be invoked on a collection-valued binding parameter path with a `/$filter(...)` segment
    */
    FilterSegmentSupported: Edm.Boolean;
    /**
        Required permissions. One of the specified sets of scopes is required to invoke an action or function
    */
    Permissions?: PermissionTypeTypes[];
    /**
        Supported or required custom headers
    */
    CustomHeaders: CustomParameterTypes[];
    /**
        Supported or required custom query options
    */
    CustomQueryOptions: CustomParameterTypes[];
    /**
        Possible error responses returned by the request.
    */
    ErrorResponses: HttpResponseTypes[];
};
/**
  Supports annotation values within system query options
*/
export type AnnotationValuesInQuerySupported = {
    term: CapabilitiesAnnotationTerms.AnnotationValuesInQuerySupported;
} & AnnotationTerm<Core.Tag>;
/**
  Support for query options with modification requests (insert, update, action invocation)
*/
export type ModificationQueryOptions = {
    term: CapabilitiesAnnotationTerms.ModificationQueryOptions;
} & AnnotationTerm<ModificationQueryOptionsTypeTypes>;
export type ModificationQueryOptionsType = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.ModificationQueryOptionsType;
    /**
        Supports $expand with modification requests
    */
    ExpandSupported: Edm.Boolean;
    /**
        Supports $select with modification requests
    */
    SelectSupported: Edm.Boolean;
    /**
        Supports $compute with modification requests
    */
    ComputeSupported: Edm.Boolean;
    /**
        Supports $filter with modification requests
    */
    FilterSupported: Edm.Boolean;
    /**
        Supports $search with modification requests
    */
    SearchSupported: Edm.Boolean;
    /**
        Supports $orderby with modification requests
    */
    SortSupported: Edm.Boolean;
};
/**
  Restrictions for retrieving a collection of entities, retrieving a singleton instance.
*/
export type ReadRestrictions = {
    term: CapabilitiesAnnotationTerms.ReadRestrictions;
} & AnnotationTerm<ReadRestrictionsTypeTypes>;
export type ReadRestrictionsBase = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.ReadRestrictionsBase;
    /**
        Entities can be retrieved
    */
    Readable: Edm.Boolean;
    /**
        Required permissions. One of the specified sets of scopes is required to read.
    */
    Permissions?: PermissionTypeTypes[];
    /**
        Supported or required custom headers
    */
    CustomHeaders: CustomParameterTypes[];
    /**
        Supported or required custom query options
    */
    CustomQueryOptions: CustomParameterTypes[];
    /**
        A brief description of the request
    */
    Description?: Edm.String;
    /**
        A long description of the request
    */
    LongDescription?: Edm.String;
    /**
        Possible error responses returned by the request.
    */
    ErrorResponses: HttpResponseTypes[];
};
/**
  Restrictions for retrieving an entity by key
*/
export type ReadByKeyRestrictionsType = ComplexType & Omit<ReadRestrictionsBase, '$Type'> & {
    $Type: CapabilitiesAnnotationTypes.ReadByKeyRestrictionsType;
};
export type ReadRestrictionsType = ComplexType & Omit<ReadRestrictionsBase, '$Type'> & {
    $Type: CapabilitiesAnnotationTypes.ReadRestrictionsType;
    /**
        Entities of a specific derived type can be read by specifying a type-cast segment
    */
    TypecastSegmentSupported: Edm.Boolean;
    /**
        Restrictions for retrieving an entity by key
    */
    ReadByKeyRestrictions?: ReadByKeyRestrictionsTypeTypes;
};
/**
  Custom headers that are supported/required for the annotated resource
*/
export type CustomHeaders = {
    term: CapabilitiesAnnotationTerms.CustomHeaders;
} & AnnotationTerm<CustomParameterTypes[]>;
/**
  Custom query options that are supported/required for the annotated resource
*/
export type CustomQueryOptions = {
    term: CapabilitiesAnnotationTerms.CustomQueryOptions;
} & AnnotationTerm<CustomParameterTypes[]>;
/**
  A custom parameter is either a header or a query option
*/
export type CustomParameter = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.CustomParameter;
    /**
        Name of the custom parameter
    */
    Name: Edm.String;
    /**
        Description of the custom parameter
    */
    Description?: Edm.String;
    /**
        URL of related documentation
    */
    DocumentationURL?: Edm.String;
    /**
        true: parameter is required, false or not specified: parameter is optional
    */
    Required: Edm.Boolean;
    /**
        Example values for the custom parameter
    */
    ExampleValues: Core.PrimitiveExampleValue[];
};
/**
  Stream property or media stream supports update of its media edit URL and/or media read URL
*/
export type MediaLocationUpdateSupported = {
    term: CapabilitiesAnnotationTerms.MediaLocationUpdateSupported;
} & AnnotationTerm<Core.Tag>;
export type HttpResponse = ComplexType & {
    $Type: CapabilitiesAnnotationTypes.HttpResponse;
    /**
        HTTP response status code, for example 400, 403, 501
    */
    StatusCode: Edm.String;
    /**
        Human-readable description of the response
    */
    Description: Edm.String;
};
export declare const enum CapabilitiesAnnotationTerms {
    ConformanceLevel = "Org.OData.Capabilities.V1.ConformanceLevel",
    SupportedFormats = "Org.OData.Capabilities.V1.SupportedFormats",
    SupportedMetadataFormats = "Org.OData.Capabilities.V1.SupportedMetadataFormats",
    AcceptableEncodings = "Org.OData.Capabilities.V1.AcceptableEncodings",
    AsynchronousRequestsSupported = "Org.OData.Capabilities.V1.AsynchronousRequestsSupported",
    BatchContinueOnErrorSupported = "Org.OData.Capabilities.V1.BatchContinueOnErrorSupported",
    IsolationSupported = "Org.OData.Capabilities.V1.IsolationSupported",
    CrossJoinSupported = "Org.OData.Capabilities.V1.CrossJoinSupported",
    CallbackSupported = "Org.OData.Capabilities.V1.CallbackSupported",
    ChangeTracking = "Org.OData.Capabilities.V1.ChangeTracking",
    CountRestrictions = "Org.OData.Capabilities.V1.CountRestrictions",
    NavigationRestrictions = "Org.OData.Capabilities.V1.NavigationRestrictions",
    IndexableByKey = "Org.OData.Capabilities.V1.IndexableByKey",
    TopSupported = "Org.OData.Capabilities.V1.TopSupported",
    SkipSupported = "Org.OData.Capabilities.V1.SkipSupported",
    ComputeSupported = "Org.OData.Capabilities.V1.ComputeSupported",
    SelectSupport = "Org.OData.Capabilities.V1.SelectSupport",
    BatchSupported = "Org.OData.Capabilities.V1.BatchSupported",
    BatchSupport = "Org.OData.Capabilities.V1.BatchSupport",
    FilterFunctions = "Org.OData.Capabilities.V1.FilterFunctions",
    FilterRestrictions = "Org.OData.Capabilities.V1.FilterRestrictions",
    SortRestrictions = "Org.OData.Capabilities.V1.SortRestrictions",
    ExpandRestrictions = "Org.OData.Capabilities.V1.ExpandRestrictions",
    SearchRestrictions = "Org.OData.Capabilities.V1.SearchRestrictions",
    KeyAsSegmentSupported = "Org.OData.Capabilities.V1.KeyAsSegmentSupported",
    QuerySegmentSupported = "Org.OData.Capabilities.V1.QuerySegmentSupported",
    InsertRestrictions = "Org.OData.Capabilities.V1.InsertRestrictions",
    DeepInsertSupport = "Org.OData.Capabilities.V1.DeepInsertSupport",
    UpdateRestrictions = "Org.OData.Capabilities.V1.UpdateRestrictions",
    DeepUpdateSupport = "Org.OData.Capabilities.V1.DeepUpdateSupport",
    DeleteRestrictions = "Org.OData.Capabilities.V1.DeleteRestrictions",
    CollectionPropertyRestrictions = "Org.OData.Capabilities.V1.CollectionPropertyRestrictions",
    OperationRestrictions = "Org.OData.Capabilities.V1.OperationRestrictions",
    AnnotationValuesInQuerySupported = "Org.OData.Capabilities.V1.AnnotationValuesInQuerySupported",
    ModificationQueryOptions = "Org.OData.Capabilities.V1.ModificationQueryOptions",
    ReadRestrictions = "Org.OData.Capabilities.V1.ReadRestrictions",
    CustomHeaders = "Org.OData.Capabilities.V1.CustomHeaders",
    CustomQueryOptions = "Org.OData.Capabilities.V1.CustomQueryOptions",
    MediaLocationUpdateSupported = "Org.OData.Capabilities.V1.MediaLocationUpdateSupported"
}
export declare const enum CapabilitiesAnnotationTypes {
    CallbackType = "Org.OData.Capabilities.V1.CallbackType",
    CallbackProtocol = "Org.OData.Capabilities.V1.CallbackProtocol",
    ChangeTrackingType = "Org.OData.Capabilities.V1.ChangeTrackingType",
    CountRestrictionsType = "Org.OData.Capabilities.V1.CountRestrictionsType",
    NavigationRestrictionsType = "Org.OData.Capabilities.V1.NavigationRestrictionsType",
    NavigationPropertyRestriction = "Org.OData.Capabilities.V1.NavigationPropertyRestriction",
    SelectSupportType = "Org.OData.Capabilities.V1.SelectSupportType",
    BatchSupportType = "Org.OData.Capabilities.V1.BatchSupportType",
    FilterRestrictionsType = "Org.OData.Capabilities.V1.FilterRestrictionsType",
    FilterExpressionRestrictionType = "Org.OData.Capabilities.V1.FilterExpressionRestrictionType",
    SortRestrictionsType = "Org.OData.Capabilities.V1.SortRestrictionsType",
    ExpandRestrictionsType = "Org.OData.Capabilities.V1.ExpandRestrictionsType",
    SearchRestrictionsType = "Org.OData.Capabilities.V1.SearchRestrictionsType",
    InsertRestrictionsType = "Org.OData.Capabilities.V1.InsertRestrictionsType",
    PermissionType = "Org.OData.Capabilities.V1.PermissionType",
    ScopeType = "Org.OData.Capabilities.V1.ScopeType",
    DeepInsertSupportType = "Org.OData.Capabilities.V1.DeepInsertSupportType",
    UpdateRestrictionsType = "Org.OData.Capabilities.V1.UpdateRestrictionsType",
    DeepUpdateSupportType = "Org.OData.Capabilities.V1.DeepUpdateSupportType",
    DeleteRestrictionsType = "Org.OData.Capabilities.V1.DeleteRestrictionsType",
    CollectionPropertyRestrictionsType = "Org.OData.Capabilities.V1.CollectionPropertyRestrictionsType",
    OperationRestrictionsType = "Org.OData.Capabilities.V1.OperationRestrictionsType",
    ModificationQueryOptionsType = "Org.OData.Capabilities.V1.ModificationQueryOptionsType",
    ReadRestrictionsBase = "Org.OData.Capabilities.V1.ReadRestrictionsBase",
    ReadByKeyRestrictionsType = "Org.OData.Capabilities.V1.ReadByKeyRestrictionsType",
    ReadRestrictionsType = "Org.OData.Capabilities.V1.ReadRestrictionsType",
    CustomParameter = "Org.OData.Capabilities.V1.CustomParameter",
    HttpResponse = "Org.OData.Capabilities.V1.HttpResponse"
}
export type CallbackTypeTypes = CallbackType;
export type CallbackProtocolTypes = CallbackProtocol;
export type ChangeTrackingTypeTypes = ChangeTrackingType;
export type CountRestrictionsTypeTypes = CountRestrictionsType;
export type NavigationRestrictionsTypeTypes = NavigationRestrictionsType;
export type NavigationPropertyRestrictionTypes = NavigationPropertyRestriction;
export type SelectSupportTypeTypes = SelectSupportType;
export type BatchSupportTypeTypes = BatchSupportType;
export type FilterRestrictionsTypeTypes = FilterRestrictionsType;
export type FilterExpressionRestrictionTypeTypes = FilterExpressionRestrictionType;
export type SortRestrictionsTypeTypes = SortRestrictionsType;
export type ExpandRestrictionsTypeTypes = ExpandRestrictionsType;
export type SearchRestrictionsTypeTypes = SearchRestrictionsType;
export type InsertRestrictionsTypeTypes = InsertRestrictionsType;
export type PermissionTypeTypes = PermissionType;
export type ScopeTypeTypes = ScopeType;
export type DeepInsertSupportTypeTypes = DeepInsertSupportType;
export type UpdateRestrictionsTypeTypes = UpdateRestrictionsType;
export type DeepUpdateSupportTypeTypes = DeepUpdateSupportType;
export type DeleteRestrictionsTypeTypes = DeleteRestrictionsType;
export type CollectionPropertyRestrictionsTypeTypes = CollectionPropertyRestrictionsType;
export type OperationRestrictionsTypeTypes = OperationRestrictionsType;
export type ModificationQueryOptionsTypeTypes = ModificationQueryOptionsType;
export type ReadRestrictionsBaseTypes = ReadByKeyRestrictionsTypeTypes | ReadRestrictionsTypeTypes;
export type ReadByKeyRestrictionsTypeTypes = ReadByKeyRestrictionsType;
export type ReadRestrictionsTypeTypes = ReadRestrictionsType;
export type CustomParameterTypes = CustomParameter;
export type HttpResponseTypes = HttpResponse;
