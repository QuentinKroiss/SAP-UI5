import WinstonTransport from 'winston-transport';
import type { TransportOptions } from '../types';
import { Transport } from '../types';
export type ConsoleTransportOptions = TransportOptions;
/**
 *  This represents the console target
 */
export declare class ConsoleTransport extends Transport {
    private static singletonInstance;
    readonly options: ConsoleTransportOptions;
    constructor(opts?: ConsoleTransportOptions);
}
export interface UI5ToolingTransportOptions extends TransportOptions {
    moduleName: string;
}
/**
 * Transport used in UI5 tooling to print to the console.
 * Don't use this together with `ConsoleTransport` or you'll have logs doubled up
 * on the console in different formats
 */
export declare class UI5ToolingTransport extends Transport {
    private static instances;
    readonly options: UI5ToolingTransportOptions;
    constructor(opts: UI5ToolingTransportOptions);
}
/**
 *  Use this when you just want a sink for the logs
 */
export declare class NullTransport extends Transport {
    private static singletonInstance;
    constructor();
}
export interface FileTransportOptions extends TransportOptions {
    filename: string;
}
/**
 *  This represents a file target
 */
export declare class FileTransport extends Transport {
    readonly options: FileTransportOptions;
    constructor(opts: FileTransportOptions);
}
/**
 *  This target is useful when the logs need to be accumulated in an array of strings
 */
export interface StringArrayTransportOptions extends TransportOptions {
    logs: string[];
}
export declare class StringArrayTransport extends Transport {
}
export interface VSCodeTransportOptions extends TransportOptions {
    channelName: string;
}
/**
 *  This represents an output channel in VS Code
 *  https://code.visualstudio.com/api/extension-capabilities/common-capabilities#output-channel
 */
export declare class VSCodeTransport extends Transport {
    private static instances;
    readonly options: VSCodeTransportOptions;
    constructor(opts: VSCodeTransportOptions);
}
/**
 * Transport for logging into an array
 */
export interface ArrayTransportLogEntry {
    level: string;
    message: string;
}
export interface ArrayTransportOptions extends TransportOptions {
    logs?: ArrayTransportLogEntry[];
}
export declare class ArrayTransport extends WinstonTransport {
    readonly logs: ArrayTransportLogEntry[];
    constructor(opts?: ArrayTransportOptions);
    log(info: ArrayTransportLogEntry, next: () => void): void;
    copy: <T>(obj: T) => T;
}
//# sourceMappingURL=transport.d.ts.map