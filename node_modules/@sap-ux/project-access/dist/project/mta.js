"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMtaPath = void 0;
const file_search_1 = require("../file/file-search");
const constants_1 = require("../constants");
const path_1 = require("path");
/**
 * Searches `projectPath` and parent folders.
 * If mta.yaml file is inside projectPath, this is a special type of MTA project
 * that created in Fiori generator (Standalone App Router). E.g. Creating a new project that doesn't have
 * a parent root folder for MTA project, and this project itself is configured
 * to have deploy target CF and user answered yes to "add to Managed App Router" question.
 *
 * @param projectPath - Fiori app root folder
 * @param fs - optional mem-fs-editor instance
 * @returns - MtaPath
 */
function getMtaPath(projectPath, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        const mtaPath = yield (0, file_search_1.findFileUp)(constants_1.FileName.MtaYaml, projectPath, fs);
        if (!mtaPath) {
            return undefined;
        }
        else {
            const mtaFolderPath = (0, path_1.dirname)(mtaPath);
            return {
                mtaPath,
                hasRoot: mtaFolderPath !== projectPath
            };
        }
    });
}
exports.getMtaPath = getMtaPath;
//# sourceMappingURL=mta.js.map