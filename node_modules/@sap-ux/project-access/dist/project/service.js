"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServicesAndAnnotations = exports.getMainService = void 0;
const path_1 = require("path");
const file_1 = require("../file");
/**
 * Get the main service name from the manifest.
 * LROP: by definition the service name can be read from the UI5 model with "" as name.
 * OVP: the main model needs to be read from the sap.ovp config and then the service can be derived.
 *
 * @param manifest - application manifest
 * @returns - main service name
 */
function getMainService(manifest) {
    var _a, _b, _c, _d;
    const model = typeof ((_a = manifest === null || manifest === void 0 ? void 0 : manifest['sap.ovp']) === null || _a === void 0 ? void 0 : _a.globalFilterModel) === 'string' ? manifest['sap.ovp'].globalFilterModel : '';
    return typeof ((_d = (_c = (_b = manifest === null || manifest === void 0 ? void 0 : manifest['sap.ui5']) === null || _b === void 0 ? void 0 : _b.models) === null || _c === void 0 ? void 0 : _c[model]) === null || _d === void 0 ? void 0 : _d.dataSource) === 'string'
        ? manifest['sap.ui5'].models[model].dataSource
        : undefined;
}
exports.getMainService = getMainService;
/**
 * Return the service annotation specification for a specific app.
 *
 * @param manifestPath - path to manifest.json
 * @param manifest - optionally, parsed content of manifest.json, pass to avoid reading it again.
 * @returns - service and annotation specification
 */
function getServicesAndAnnotations(manifestPath, manifest) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const parsedManifest = manifest !== null && manifest !== void 0 ? manifest : (yield (0, file_1.readJSON)(manifestPath));
        const manifestFolder = (0, path_1.dirname)(manifestPath);
        const services = {};
        const dataSources = (_b = (_a = parsedManifest === null || parsedManifest === void 0 ? void 0 : parsedManifest['sap.app']) === null || _a === void 0 ? void 0 : _a.dataSources) !== null && _b !== void 0 ? _b : {};
        for (const name in dataSources) {
            if (dataSources[name].type !== 'OData') {
                continue;
            }
            services[name] = getServiceSpecification(manifestFolder, name, dataSources);
        }
        return services;
    });
}
exports.getServicesAndAnnotations = getServicesAndAnnotations;
/**
 * Get the service specification for a given service.
 *
 * @param webappFolder - relative path to webapp folder from project root
 * @param name - name of the service
 * @param dataSources - dataSources from manifest
 * @returns - service specification
 */
function getServiceSpecification(webappFolder, name, dataSources) {
    var _a, _b, _c, _d, _e;
    const dataSource = dataSources[name];
    const uri = dataSource.uri;
    const local = typeof ((_a = dataSource.settings) === null || _a === void 0 ? void 0 : _a.localUri) === 'string'
        ? (0, path_1.join)(webappFolder, dataSource.settings.localUri)
        : '';
    const odataVersion = (_c = (_b = dataSource.settings) === null || _b === void 0 ? void 0 : _b.odataVersion) !== null && _c !== void 0 ? _c : '2.0';
    const annotations = [];
    const annotationNames = (_d = dataSource.settings) === null || _d === void 0 ? void 0 : _d.annotations;
    if (Array.isArray(annotationNames)) {
        for (const annotationName of annotationNames) {
            const annotation = dataSources[annotationName];
            if (annotation) {
                annotations.push({
                    uri: annotation.uri,
                    local: ((_e = annotation.settings) === null || _e === void 0 ? void 0 : _e.localUri) ? (0, path_1.join)(webappFolder, annotation.settings.localUri) : undefined
                });
            }
        }
    }
    return {
        uri,
        local,
        odataVersion,
        annotations
    };
}
//# sourceMappingURL=service.js.map