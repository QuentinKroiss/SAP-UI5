"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectType = exports.getAppType = exports.getAppProgrammingLanguage = exports.getProject = void 0;
const path_1 = require("path");
const constants_1 = require("../constants");
const file_1 = require("../file");
const cap_1 = require("./cap");
const i18n_1 = require("./i18n/i18n");
const search_1 = require("./search");
const service_1 = require("./service");
const ui5_config_1 = require("./ui5-config");
/**
 * Returns the project structure for a given Fiori project.
 *
 * @param root - project root folder
 * @returns - project structure with project info like project type, apps, root folder
 */
function getProject(root) {
    return __awaiter(this, void 0, void 0, function* () {
        const checkCapType = yield (0, cap_1.getCapProjectType)(root);
        const projectType = checkCapType !== null && checkCapType !== void 0 ? checkCapType : 'EDMXBackend';
        const packageJson = yield (0, file_1.readJSON)((0, path_1.join)(root, constants_1.FileName.Package));
        const appFolders = getAppFolders(packageJson);
        const apps = yield getApps(root, appFolders);
        return {
            root,
            projectType,
            apps
        };
    });
}
exports.getProject = getProject;
/**
 * Returns the application folders from sapux flag of the package.json. For single app
 * projects, this is just an array with one empty string. For CAP projects, this is an
 * array of operating system specific relative paths to the apps.
 *
 * @param packageJson - parsed package.json
 * @returns - array of operating specific application folders
 */
function getAppFolders(packageJson) {
    return Array.isArray(packageJson.sapux)
        ? packageJson.sapux.map((appFolder) => (0, path_1.join)(...appFolder.split(/[/\\]/)))
        : [''];
}
/**
 * Get the application structure for each application in the project.
 *
 * @param root - project root folder
 * @param appFolders - array of relative application folders
 * @returns - map of application structures
 */
function getApps(root, appFolders) {
    return __awaiter(this, void 0, void 0, function* () {
        const apps = {};
        for (const appFolder of appFolders) {
            const applicationStructure = yield getApplicationStructure(root, appFolder);
            if (applicationStructure) {
                apps[appFolder] = applicationStructure;
            }
        }
        return apps;
    });
}
/**
 * Get the application structure for a given application.
 *
 * @param root - project root folder
 * @param appFolder - relative application folder
 * @returns - application structure with application info like manifest, changes, main service, services, annotations
 */
function getApplicationStructure(root, appFolder) {
    return __awaiter(this, void 0, void 0, function* () {
        const appRoot = (0, path_1.join)(root, appFolder);
        const absoluteWebappPath = yield (0, ui5_config_1.getWebappPath)(appRoot);
        const manifest = (0, path_1.join)(absoluteWebappPath, constants_1.FileName.Manifest);
        if (!(yield (0, file_1.fileExists)(manifest))) {
            return undefined;
        }
        const manifestObject = yield (0, file_1.readJSON)(manifest);
        const changes = (0, path_1.join)(absoluteWebappPath, constants_1.DirName.Changes);
        const i18n = yield (0, i18n_1.getI18nPropertiesPaths)(manifest, manifestObject);
        const mainService = (0, service_1.getMainService)(manifestObject);
        const services = yield (0, service_1.getServicesAndAnnotations)(manifest, manifestObject);
        return {
            appRoot,
            manifest,
            changes,
            i18n,
            mainService,
            services
        };
    });
}
/**
 * Get the used programming language of an application.
 *
 * @param appRoot - root folder of the application
 * @param [memFs] - optional mem-fs editor instance
 * @returns - used language, JavaScript or TypeScript
 */
function getAppProgrammingLanguage(appRoot, memFs) {
    return __awaiter(this, void 0, void 0, function* () {
        const ignoreFolders = ['node_modules', '.git'];
        let appLanguage = '';
        try {
            const webappPath = yield (0, ui5_config_1.getWebappPath)(appRoot, memFs);
            if (yield (0, file_1.fileExists)(webappPath, memFs)) {
                if ((yield (0, file_1.fileExists)((0, path_1.join)(appRoot, constants_1.FileName.Tsconfig), memFs)) &&
                    (yield (0, file_1.findFilesByExtension)('.ts', webappPath, ignoreFolders, memFs)).length > 0) {
                    appLanguage = 'TypeScript';
                }
                else if ((yield (0, file_1.findFilesByExtension)('.js', webappPath, ignoreFolders, memFs)).length > 0) {
                    appLanguage = 'JavaScript';
                }
            }
        }
        catch (_a) {
            // could not detect app language
        }
        return appLanguage;
    });
}
exports.getAppProgrammingLanguage = getAppProgrammingLanguage;
/**
 * Get the type of application or Fiori artifact.
 *
 * @param appRoot - path to application root
 * @returns - type of application, e.g. SAP Fiori elements, SAPUI5 freestyle, SAPUI5 Extension, ... see AppType.
 */
function getAppType(appRoot) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    return __awaiter(this, void 0, void 0, function* () {
        let appType;
        try {
            const artifacts = yield (0, search_1.findFioriArtifacts)({
                wsFolders: [appRoot],
                artifacts: ['adaptations', 'applications', 'extensions', 'libraries']
            });
            if (((_b = (_a = artifacts.applications) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) +
                ((_d = (_c = artifacts.adaptations) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) +
                ((_f = (_e = artifacts.extensions) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 0) +
                ((_h = (_g = artifacts.libraries) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : 0) ===
                1) {
                if (((_j = artifacts.applications) === null || _j === void 0 ? void 0 : _j.length) === 1) {
                    appType = yield getApplicationType(artifacts.applications[0]);
                }
                else if (((_k = artifacts.adaptations) === null || _k === void 0 ? void 0 : _k.length) === 1) {
                    appType = 'Fiori Adaptation';
                }
                else if (((_l = artifacts.extensions) === null || _l === void 0 ? void 0 : _l.length) === 1) {
                    appType = 'SAPUI5 Extension';
                }
                else if (((_m = artifacts.libraries) === null || _m === void 0 ? void 0 : _m.length) === 1) {
                    appType = 'Fiori Reuse';
                }
            }
        }
        catch (_o) {
            // If error occurs we can't determine the type and return undefined
        }
        return appType;
    });
}
exports.getAppType = getAppType;
/**
 * Get the application type from search results.
 *
 * @param application - application from findFioriArtifacts() results
 * @returns - type of application: 'SAP Fiori elements' or 'SAPUI5 freestyle'
 */
function getApplicationType(application) {
    return __awaiter(this, void 0, void 0, function* () {
        let appType;
        const rootPackageJsonPath = (0, path_1.join)(application.projectRoot, constants_1.FileName.Package);
        const packageJson = (yield (0, file_1.fileExists)(rootPackageJsonPath)) ? yield (0, file_1.readJSON)(rootPackageJsonPath) : null;
        if (application.projectRoot === application.appRoot) {
            appType = (packageJson === null || packageJson === void 0 ? void 0 : packageJson.sapux) ? 'SAP Fiori elements' : 'SAPUI5 freestyle';
        }
        else if (packageJson) {
            appType =
                Array.isArray(packageJson.sapux) &&
                    packageJson.sapux.find((relAppPath) => (0, path_1.join)(application.projectRoot, ...relAppPath.split(/[/\\]/)) === application.appRoot)
                    ? 'SAP Fiori elements'
                    : 'SAPUI5 freestyle';
        }
        else {
            appType = 'SAPUI5 freestyle';
        }
        return appType;
    });
}
/**
 * Returns the project type for a given Fiori project.
 *
 * @param projectRoot - root path of the project
 * @returns - project type like Edmx, CAPJava, CAPNodejs
 */
function getProjectType(projectRoot) {
    return __awaiter(this, void 0, void 0, function* () {
        const capType = yield (0, cap_1.getCapProjectType)(projectRoot);
        if (capType === undefined) {
            return 'EDMXBackend';
        }
        return capType;
    });
}
exports.getProjectType = getProjectType;
//# sourceMappingURL=info.js.map