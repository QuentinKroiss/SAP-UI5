"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodeModulesPath = exports.hasDependency = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const constants_1 = require("../constants");
/**
 * Helper to check for dependency/devDependency.
 *
 * @param packageJson - content of package.json to check
 * @param dependency - name of the dependency
 * @returns - true: has dependency; false: no dependency
 */
const hasDependency = (packageJson, dependency) => { var _a, _b, _c; return !!((_b = (_a = packageJson.dependencies) === null || _a === void 0 ? void 0 : _a[dependency]) !== null && _b !== void 0 ? _b : (_c = packageJson.devDependencies) === null || _c === void 0 ? void 0 : _c[dependency]); };
exports.hasDependency = hasDependency;
/**
 * Returns path to folder that hosts 'node_modules' used by project.
 * Optionally, a module name can be passed to check for. This is
 * useful to check if a module is hoisted in a mono repository.
 *
 * @param projectRoot - absolute path to root of the project/app.
 * @param [module] -  optional module name to find in node_modules
 * @returns - parent path of node_modules used by project or undefined if node module path was not found
 */
function getNodeModulesPath(projectRoot, module) {
    if (!(0, path_1.isAbsolute)(projectRoot)) {
        return undefined;
    }
    const { root } = (0, path_1.parse)(projectRoot);
    let currentDir = projectRoot;
    let modulesPath;
    while (currentDir !== root) {
        let checkPath = (0, path_1.join)(currentDir, 'node_modules');
        if (module) {
            checkPath = (0, path_1.join)(checkPath, module, constants_1.FileName.Package);
        }
        if ((0, fs_1.existsSync)(checkPath)) {
            modulesPath = currentDir;
            break;
        }
        currentDir = (0, path_1.dirname)(currentDir);
    }
    return modulesPath;
}
exports.getNodeModulesPath = getNodeModulesPath;
//# sourceMappingURL=dependencies.js.map