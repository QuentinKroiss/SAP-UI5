"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readUi5Yaml = exports.getWebappPath = void 0;
const path_1 = require("path");
const ui5_config_1 = require("@sap-ux/ui5-config");
const constants_1 = require("../constants");
const file_1 = require("../file");
/**
 * Get path to webapp.
 *
 * @param projectRoot - root path, where package.json or ui5.yaml is
 * @param [memFs] - optional mem-fs editor instance
 * @returns - path to webapp folder
 */
function getWebappPath(projectRoot, memFs) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let webappPath = (0, path_1.join)(projectRoot, 'webapp');
        const ui5YamlPath = (0, path_1.join)(projectRoot, constants_1.FileName.Ui5Yaml);
        if (yield (0, file_1.fileExists)(ui5YamlPath, memFs)) {
            const yamlString = yield (0, file_1.readFile)(ui5YamlPath, memFs);
            const ui5Config = yield ui5_config_1.UI5Config.newInstance(yamlString);
            const relativeWebappPath = (_b = (_a = ui5Config.getConfiguration()) === null || _a === void 0 ? void 0 : _a.paths) === null || _b === void 0 ? void 0 : _b.webapp;
            if (relativeWebappPath) {
                webappPath = (0, path_1.join)(projectRoot, relativeWebappPath);
            }
        }
        return webappPath;
    });
}
exports.getWebappPath = getWebappPath;
/**
 * Checks if UI5 config yaml file exists and returns its content.
 *
 * @param projectRoot - path to project root
 * @param fileName - name of yaml file to be read
 * @returns {UI5Config} UI5 config file in yaml format
 */
function readUi5Yaml(projectRoot, fileName) {
    return __awaiter(this, void 0, void 0, function* () {
        const ui5YamlPath = (0, path_1.join)(projectRoot, fileName);
        if (yield (0, file_1.fileExists)(ui5YamlPath)) {
            const yamlString = yield (0, file_1.readFile)(ui5YamlPath);
            return yield ui5_config_1.UI5Config.newInstance(yamlString);
        }
        throw Error(`File '${fileName}' not found in project '${projectRoot}'`);
    });
}
exports.readUi5Yaml = readUi5Yaml;
//# sourceMappingURL=ui5-config.js.map