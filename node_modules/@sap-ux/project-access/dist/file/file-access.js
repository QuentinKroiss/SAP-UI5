"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileExists = exports.writeFile = exports.readJSON = exports.readFile = void 0;
const fs_1 = require("fs");
/**
 * Read file asynchronously. Throws error if file does not exist.
 *
 * @param path - path to file
 * @param memFs - optional mem-fs-editor instance
 * @returns - file content as string
 */
function readFile(path, memFs) {
    return __awaiter(this, void 0, void 0, function* () {
        if (memFs) {
            return memFs.read(path);
        }
        else {
            return fs_1.promises.readFile(path, { encoding: 'utf8' });
        }
    });
}
exports.readFile = readFile;
/**
 * Read JSON file asynchronously. Throws error if file does not exist or is malformatted.
 *
 * @param path - path to JSON file
 * @param memFs - optional mem-fs-editor instance
 * @returns - file content as object of type T
 */
function readJSON(path, memFs) {
    return __awaiter(this, void 0, void 0, function* () {
        if (memFs) {
            return memFs.readJSON(path);
        }
        else {
            return JSON.parse(yield readFile(path));
        }
    });
}
exports.readJSON = readJSON;
/**
 * Read file asynchronously. Throws error if file does not exist.
 *
 * @param path - path to file
 * @param content - content to write to a file
 * @param memFs - optional mem-fs-editor instance
 * @returns - file content as string
 */
function writeFile(path, content, memFs) {
    return __awaiter(this, void 0, void 0, function* () {
        if (memFs) {
            return memFs.write(path, content);
        }
        return fs_1.promises.writeFile(path, content, { encoding: 'utf8' });
    });
}
exports.writeFile = writeFile;
/**
 * Checks if the provided file exists in the file system.
 *
 * @param path - the file path to check
 * @param memFs - optional mem-fs-editor instance
 * @returns - true if the file exists; false otherwise.
 */
function fileExists(path, memFs) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (memFs) {
                return memFs.exists(path);
            }
            else {
                yield fs_1.promises.access(path);
                return true;
            }
        }
        catch (_a) {
            return false;
        }
    });
}
exports.fileExists = fileExists;
//# sourceMappingURL=file-access.js.map