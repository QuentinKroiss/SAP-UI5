"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryAddJsonTexts = exports.addJsonTexts = void 0;
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const utils_1 = require("../../utils");
const utils_2 = require("../../parser/utils");
const jsonc_parser_1 = require("jsonc-parser");
/**
 * Create full bundle.
 *
 * @param fallbackLocale fallback local
 * @param newEntries new i18n entries that will be maintained
 * @returns fallback key with i18n bundle
 */
function createFullBundle(fallbackLocale, newEntries) {
    const fallbackBundle = newEntries.reduce((acc, entry) => {
        acc[entry.key] = entry.value;
        return acc;
    }, {});
    return {
        [fallbackLocale]: fallbackBundle
    };
}
/**
 * Get text document.
 *
 * @param text json text
 * @returns text document instance
 */
const getTextDocument = (text) => vscode_languageserver_textdocument_1.TextDocument.create('', '', 0, text);
/**
 * Add json text to fallback node.
 *
 * @param text json text
 * @param fallbackLocale fallback node
 * @param fallbackLocaleNode fallback local node
 * @param indent indentation
 * @param eol end of line
 * @param newEntries new i18n entries that will be maintained
 * @returns text string
 */
function addToExistingFallbackLocalNode(text, fallbackLocale, fallbackLocaleNode, indent, eol, newEntries) {
    var _a, _b;
    const bundleNode = ((_a = fallbackLocaleNode.children) !== null && _a !== void 0 ? _a : [])[1];
    const textNodes = (_b = bundleNode === null || bundleNode === void 0 ? void 0 : bundleNode.children) !== null && _b !== void 0 ? _b : [];
    if (textNodes.length) {
        const document = getTextDocument(text);
        const position = document.positionAt(textNodes[0].offset);
        let newText = '';
        for (const entry of newEntries) {
            newText += `${indent + indent}"${entry.key}": "${entry.value}",${eol}`;
        }
        const edit = {
            newText: newText,
            range: utils_2.Range.create(position.line, 0, position.line, 0)
        };
        return vscode_languageserver_textdocument_1.TextDocument.applyEdits(document, [edit]);
    }
    if (bundleNode === null || bundleNode === void 0 ? void 0 : bundleNode.offset) {
        const document = getTextDocument(text);
        const start = document.positionAt(bundleNode.offset);
        const end = document.positionAt(bundleNode.offset + bundleNode.length);
        const bundle = createFullBundle(fallbackLocale, newEntries);
        const newText = JSON.stringify(bundle[fallbackLocale], undefined, indent);
        const indented = (0, utils_1.applyIndent)(`${newText}`, indent, eol, false);
        const edit = {
            newText: indented,
            range: utils_2.Range.create(start, end)
        };
        return vscode_languageserver_textdocument_1.TextDocument.applyEdits(document, [edit]);
    }
    return text;
}
/**
 * Add json text.
 *
 * @param text json text
 * @param fallbackLocale fallback local i18n
 * @param newEntries new i18n entries that will be maintained
 * @returns text string
 */
function addJsonTexts(text, fallbackLocale, newEntries) {
    var _a;
    if (text === '') {
        const bundle = createFullBundle(fallbackLocale, newEntries);
        return JSON.stringify(bundle, undefined, 4);
    }
    const rootNode = (0, jsonc_parser_1.parseTree)(text);
    if ((rootNode === null || rootNode === void 0 ? void 0 : rootNode.type) !== 'object') {
        return text;
    }
    const localeNodes = (_a = rootNode.children) !== null && _a !== void 0 ? _a : [];
    const eol = (0, utils_1.discoverLineEnding)(text);
    const indent = (0, utils_1.discoverIndent)(text);
    if (localeNodes.length === 0) {
        const bundle = createFullBundle(fallbackLocale, newEntries);
        return JSON.stringify(bundle, undefined, 4);
    }
    const fallbackLocaleNode = localeNodes.find((node) => { var _a, _b; return ((_b = ((_a = node.children) !== null && _a !== void 0 ? _a : [])[0]) === null || _b === void 0 ? void 0 : _b.value) === fallbackLocale; });
    if (fallbackLocaleNode) {
        return addToExistingFallbackLocalNode(text, fallbackLocale, fallbackLocaleNode, indent, eol, newEntries);
    }
    // create new entries with local fallback
    const document = getTextDocument(text);
    const [last] = localeNodes.slice(-1);
    const position = document.positionAt(last.offset);
    const bundle = createFullBundle(fallbackLocale, newEntries);
    const newText = JSON.stringify(bundle[fallbackLocale], undefined, indent);
    const indented = (0, utils_1.applyIndent)(`"${fallbackLocale}": ${newText},`, indent, eol);
    const edit = {
        newText: indented + eol,
        range: utils_2.Range.create(position.line, 0, position.line, 0)
    };
    return vscode_languageserver_textdocument_1.TextDocument.applyEdits(document, [edit]);
}
exports.addJsonTexts = addJsonTexts;
/**
 * Try add new i18n entries to json file.
 *
 * @param env cds environment
 * @param path file path
 * @param newI18nEntries new i18n entries that will be maintained
 * @param fs optional `mem-fs-editor` instance. If provided, `mem-fs-editor` api is used instead of `fs` of node
 * @returns boolean
 */
function tryAddJsonTexts(env, path, newI18nEntries, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        const i18nFilePath = (0, utils_1.jsonPath)(path);
        if (!(yield (0, utils_1.doesExist)(i18nFilePath))) {
            return false;
        }
        const { fallbackLanguage } = (0, utils_1.getI18nConfiguration)(env);
        const content = yield (0, utils_1.readFile)(i18nFilePath, fs);
        const newContent = addJsonTexts(content, fallbackLanguage, newI18nEntries);
        yield (0, utils_1.writeFile)(i18nFilePath, newContent, fs);
        return true;
    });
}
exports.tryAddJsonTexts = tryAddJsonTexts;
//# sourceMappingURL=json.js.map