"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryAddPropertiesTexts = void 0;
const utils_1 = require("../../utils");
const csv_1 = require("./csv");
const utils_2 = require("../utils");
/**
 * Add i18n entries to respective i18n file.
 *
 * @description It first tries to add to an existing `.properties` file, it it does not exist, it tries to add to `.csv` file,
 * if it fails, it generates new `.properties` file with new i18n entries.
 * @param env cds environment
 * @param path file path
 * @param newI18nEntries new i18n entries that will be maintained
 * @param fs optional `mem-fs-editor` instance. If provided, `mem-fs-editor` api is used instead of `fs` of node
 * @returns boolean
 */
function tryAddPropertiesTexts(env, path, newI18nEntries, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        const newContent = newI18nEntries
            .map((entry) => (0, utils_1.printPropertiesI18nEntry)(entry.key, entry.value, entry.annotation))
            .join('');
        const i18nFilePath = (0, utils_1.capPropertiesPath)(path, env);
        if (!(yield (0, utils_1.doesExist)(i18nFilePath))) {
            // if `.properties` file does not exit, try csv
            const completed = yield (0, csv_1.tryAddCsvTexts)(env, path, newI18nEntries, fs);
            if (completed) {
                return true;
            }
            //  create a `.properties` file with new content
            yield (0, utils_1.writeFile)(i18nFilePath, newContent, fs);
            return true;
        }
        // add to existing `.properties` file
        return yield (0, utils_2.writeToExistingI18nPropertiesFile)(i18nFilePath, newI18nEntries, fs);
    });
}
exports.tryAddPropertiesTexts = tryAddPropertiesTexts;
//# sourceMappingURL=properties.js.map