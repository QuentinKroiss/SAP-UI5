"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeToExistingI18nPropertiesFile = void 0;
const utils_1 = require("../../utils");
/**
 * Write i18n entries to an existing i18n.properties file.
 *
 * @param i18nFilePath i18n file path
 * @param newI18nEntries  new i18n entries that will be maintained
 * @param fs optional `mem-fs-editor` instance. If provided, `mem-fs-editor` api is used instead of `fs` of node
 * @returns boolean
 */
function writeToExistingI18nPropertiesFile(i18nFilePath, newI18nEntries, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        let newContent = newI18nEntries
            .map((entry) => (0, utils_1.printPropertiesI18nEntry)(entry.key, entry.value, entry.annotation))
            .join('');
        const content = yield (0, utils_1.readFile)(i18nFilePath, fs);
        const lines = content.split(/\r\n|\n/);
        // check if file does not end with new line
        if (lines.length > 0 && lines[lines.length - 1].trim()) {
            // If there no end line - add new gap line before new content
            newContent = `\n${newContent}`;
        }
        yield (0, utils_1.writeFile)(i18nFilePath, content.concat(newContent), fs);
        return true;
    });
}
exports.writeToExistingI18nPropertiesFile = writeToExistingI18nPropertiesFile;
//# sourceMappingURL=index.js.map