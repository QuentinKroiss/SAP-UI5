"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPropertiesI18nBundle = void 0;
const properties_1 = require("../../transformer/properties");
const utils_1 = require("../../utils");
/**
 * Gets i18n bundle for `.properties` file.
 *
 * @param i18nFilePath absolute path to `i18n.properties` file
 * @param fs optional `mem-fs-editor` instance. If provided, `mem-fs-editor` api is used instead of `fs` of node
 * @returns i18n bundle or exception
 */
function getPropertiesI18nBundle(i18nFilePath, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        const bundle = {};
        const content = yield (0, utils_1.readFile)(i18nFilePath, fs);
        const ast = (0, properties_1.propertiesToI18nEntry)(content, i18nFilePath);
        for (const entry of ast) {
            if (!bundle[entry.key.value]) {
                bundle[entry.key.value] = [];
            }
            bundle[entry.key.value].push(entry);
        }
        return bundle;
    });
}
exports.getPropertiesI18nBundle = getPropertiesI18nBundle;
//# sourceMappingURL=bundle.js.map