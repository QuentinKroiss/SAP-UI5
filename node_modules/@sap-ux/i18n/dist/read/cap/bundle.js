"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCapI18nBundle = void 0;
const utils_1 = require("../../utils");
const json_1 = require("../../transformer/json");
const properties_1 = require("../../transformer/properties");
const csv_1 = require("../../transformer/csv");
/**
 * Try to convert text to i18n bundle.
 *
 * @param path file path
 * @param toI18nBundle function to convert to i18n bundle
 * @param fs optional `mem-fs-editor` instance. If provided, `mem-fs-editor` api is used instead of `fs` of node
 * @returns i18n bundle or undefine
 */
function tryTransformTexts(path, toI18nBundle, fs) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(yield (0, utils_1.doesExist)(path))) {
            return undefined;
        }
        const content = yield (0, utils_1.readFile)(path, fs);
        return toI18nBundle(content, path);
    });
}
/**
 * Get transformers.
 *
 * @param fallbackLanguage fallback language
 * @returns array of transformer
 */
const getTransformers = (fallbackLanguage) => [
    { toI18nBundle: json_1.jsonToI18nBundle, bundlePath: utils_1.jsonPath },
    {
        toI18nBundle: (content, path) => ({
            [fallbackLanguage]: (0, properties_1.propertiesToI18nEntry)(content, path)
        }),
        bundlePath: utils_1.capPropertiesPath
    },
    { toI18nBundle: csv_1.csvToI18nBundle, bundlePath: utils_1.csvPath }
];
/**
 * Merges i18n files in to a single bundle for CDS source files.
 *
 * @param root project root
 * @param env CDS environment configuration
 * @param filePaths CDS file path
 * @param fs optional `mem-fs-editor` instance. If provided, `mem-fs-editor` api is used instead of `fs` of node
 * @returns i18n bundle or exception
 */
function getCapI18nBundle(root, env, filePaths, fs) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const bundle = {};
        const { defaultLanguage, fallbackLanguage } = (0, utils_1.getI18nConfiguration)(env);
        const i18nFileLocations = (0, utils_1.getCapI18nFiles)(root, env, filePaths);
        for (const path of i18nFileLocations) {
            const transformers = getTransformers(fallbackLanguage);
            for (const { toI18nBundle, bundlePath } of transformers) {
                const i18nFilePath = bundlePath(path, env);
                const entries = yield tryTransformTexts(i18nFilePath, toI18nBundle, fs);
                if (!entries) {
                    continue;
                }
                const currentBundle = (_b = (_a = entries[fallbackLanguage]) !== null && _a !== void 0 ? _a : entries[defaultLanguage]) !== null && _b !== void 0 ? _b : [];
                for (const entry of currentBundle) {
                    if (!bundle[entry.key.value]) {
                        bundle[entry.key.value] = [];
                    }
                    bundle[entry.key.value].push(entry);
                }
                break;
            }
        }
        return bundle;
    });
}
exports.getCapI18nBundle = getCapI18nBundle;
//# sourceMappingURL=bundle.js.map