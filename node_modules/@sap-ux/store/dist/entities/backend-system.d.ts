import type { EntityKey } from '.';
export declare enum AuthenticationType {
    Basic = "basic",
    ReentranceTicket = "reentranceTicket",
    OAuth2RefreshToken = "oauth2",
    OAuth2ClientCredential = "oauth2ClientCredential"
}
export declare class BackendSystem {
    readonly name: string;
    readonly url: string;
    readonly client?: string;
    readonly userDisplayName?: string;
    readonly serviceKeys?: unknown;
    readonly refreshToken?: string;
    readonly username?: string;
    readonly password?: string;
    readonly authenticationType?: string;
    constructor({ name, url, client, serviceKeys, refreshToken, username, password, userDisplayName, authenticationType }: {
        name: string;
        url: string;
        client?: string;
        serviceKeys?: unknown;
        refreshToken?: string;
        username?: string;
        password?: string;
        userDisplayName?: string;
        authenticationType?: string;
    });
}
export declare class BackendSystemKey implements EntityKey {
    private url;
    private client?;
    static from(system: BackendSystem): EntityKey;
    constructor({ url, client }: {
        url: string;
        client?: string;
    });
    getId(): string;
}
//# sourceMappingURL=backend-system.d.ts.map