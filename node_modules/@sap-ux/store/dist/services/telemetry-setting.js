"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstance = exports.TelemetrySettingService = void 0;
const telemetry_setting_1 = require("../data-provider/telemetry-setting");
class TelemetrySettingService {
    constructor(logger) {
        this.logger = logger;
        this.dataProvider = new telemetry_setting_1.TelemetryDataProvider(this.logger);
    }
    partialUpdate() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('NOT IMPLEMENTED');
        });
    }
    read(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataProvider.read(key);
        });
    }
    write(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataProvider.write(entity);
        });
    }
    delete(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataProvider.delete(entity);
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataProvider.getAll();
        });
    }
}
exports.TelemetrySettingService = TelemetrySettingService;
function getInstance(logger) {
    return new TelemetrySettingService(logger);
}
exports.getInstance = getInstance;
//# sourceMappingURL=telemetry-setting.js.map