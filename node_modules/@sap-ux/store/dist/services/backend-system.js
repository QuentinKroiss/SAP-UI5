"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstance = exports.SystemService = void 0;
const backend_system_1 = require("../data-provider/backend-system");
const backend_system_2 = require("../entities/backend-system");
const i18n_1 = require("../i18n");
class SystemService {
    constructor(logger, options = {}) {
        this.logger = logger;
        this.dataProvider = new backend_system_1.SystemDataProvider(this.logger, options);
    }
    partialUpdate(key, entity) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validatePartialUpdateInput(entity);
            const existingSystem = yield this.readOrThrow(key);
            const updatedEntity = this.mergeProperties(entity, existingSystem);
            return this.write(updatedEntity);
        });
    }
    mergeProperties(update, existingSystem) {
        const patch = Object.assign({}, update);
        // Make sure we don't mess with key fields
        delete patch.url;
        delete patch.client;
        const updatedEntity = Object.assign(Object.assign({}, existingSystem), patch);
        return new backend_system_2.BackendSystem(Object.assign({}, updatedEntity));
    }
    readOrThrow(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const existingSystem = yield this.read(key);
            if (!existingSystem) {
                throw new Error((0, i18n_1.text)('error.systemDoesNotExist', { system: key }));
            }
            return existingSystem;
        });
    }
    validatePartialUpdateInput(entity) {
        if (!entity || !Object.keys(entity).length) {
            throw new Error((0, i18n_1.text)('error.noPropertiesSpecified'));
        }
    }
    read(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataProvider.read(key);
        });
    }
    write(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataProvider.write(entity);
        });
    }
    delete(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataProvider.delete(entity);
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataProvider.getAll();
        });
    }
}
exports.SystemService = SystemService;
function getInstance(logger, options = {}) {
    return new SystemService(logger, options);
}
exports.getInstance = getInstance;
//# sourceMappingURL=backend-system.js.map