"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateToLatestVersion = exports.LEGACY_API_HUB_API_KEY = exports.LEGACY_API_HUB_API_SERVICE = void 0;
const i18n_1 = require("../../i18n");
const api_hub_1 = require("../../entities/api-hub");
exports.LEGACY_API_HUB_API_SERVICE = 'fiori/system/apiHub';
exports.LEGACY_API_HUB_API_KEY = 'API_HUB_API_KEY';
/**
 * Do NOT export to the outside world
 */
function migrateToLatestVersion({ dataProvider, secureStore, logger }) {
    return __awaiter(this, void 0, void 0, function* () {
        // Migrates the key from  initial version where the key was written directly to the secure store
        const apiKey = yield secureStore.retrieve(exports.LEGACY_API_HUB_API_SERVICE, exports.LEGACY_API_HUB_API_KEY);
        if (!apiKey) {
            logger.debug((0, i18n_1.text)('info.noLegacyApiHubKeyFound'));
            return;
        }
        else {
            logger.info((0, i18n_1.text)('info.legacyApiHubKeyFound'));
        }
        const apiKeysNewFormat = yield dataProvider.read(new api_hub_1.ApiHubSettingsKey());
        if (!apiKeysNewFormat) {
            yield dataProvider.write(new api_hub_1.ApiHubSettings({ apiKey }));
            logger.info((0, i18n_1.text)('info.legacyApiHubKeyMigrated'));
        }
        else {
            logger.info((0, i18n_1.text)('info.legacyApiHubKeyNotMigrated'));
        }
        yield secureStore.delete(exports.LEGACY_API_HUB_API_SERVICE, exports.LEGACY_API_HUB_API_KEY);
        logger.info((0, i18n_1.text)('info.legacyApiHubKeyDeleted'));
    });
}
exports.migrateToLatestVersion = migrateToLatestVersion;
//# sourceMappingURL=migration.js.map