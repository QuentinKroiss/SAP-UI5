"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeytarStore = void 0;
const utils_1 = require("../utils");
class KeytarStore {
    constructor(log, keytar) {
        this.log = log;
        this.keytar = keytar;
    }
    save(service, key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const serialized = JSON.stringify(value);
                yield this.keytar.setPassword(service, key, serialized);
                return true;
            }
            catch (e) {
                this.log.error(`Error saving to secure store. Service: [${service}], key: [${key}]`);
                this.log.error((0, utils_1.errorString)(e));
                return false;
            }
        });
    }
    retrieve(service, key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const serializedValue = yield this.keytar.getPassword(service, key);
                return serializedValue && JSON.parse(serializedValue);
            }
            catch (e) {
                this.log.error(`Error retrieving from secure store. Service: [${service}], key: [${key}]`);
                this.log.error((0, utils_1.errorString)(e));
                return undefined;
            }
        });
    }
    delete(service, key) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.keytar.deletePassword(service, key);
            }
            catch (e) {
                this.log.error(`Error deleting from secure store. Service: [${service}], key: [${key}]`);
                this.log.error((0, utils_1.errorString)(e));
                return false;
            }
        });
    }
    getAll(service) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return (yield this.keytar.findCredentials(service)).reduce((result, entry) => {
                    try {
                        result[String(entry.account)] = JSON.parse(entry.password);
                    }
                    catch (e) {
                        this.log.error(`Error parsing credentials for [${entry.account}]`);
                    }
                    return result;
                }, {});
            }
            catch (e) {
                this.log.error(`Error getting values for service: [${service}]`);
                this.log.error((0, utils_1.errorString)(e));
                return {};
            }
        });
    }
}
exports.KeytarStore = KeytarStore;
//# sourceMappingURL=keytar-store.js.map