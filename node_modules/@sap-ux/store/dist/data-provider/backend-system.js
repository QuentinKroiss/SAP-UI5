"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemDataProvider = void 0;
const hybrid_1 = require("../data-access/hybrid");
const backend_system_1 = require("../entities/backend-system");
const constants_1 = require("./constants");
const SystemDataProvider = class {
    constructor(logger, options = {}) {
        this.entityName = constants_1.Entities.BackendSystem;
        this.logger = logger;
        this.dataAccessor = (0, hybrid_1.getHybridStore)(this.logger, options);
    }
    read(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataAccessor.read({ entityName: this.entityName, id: key.getId() });
        });
    }
    write(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            let e;
            if (!(entity instanceof backend_system_1.BackendSystem)) {
                // We need to use the correct class otherwise the annotations are not effective
                e = new backend_system_1.BackendSystem(Object.assign({}, entity));
            }
            else {
                e = entity;
            }
            return this.dataAccessor.write({
                entityName: this.entityName,
                id: backend_system_1.BackendSystemKey.from(entity).getId(),
                entity: e
            });
        });
    }
    delete(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.dataAccessor.del({
                entityName: this.entityName,
                id: backend_system_1.BackendSystemKey.from(entity).getId()
            });
        });
    }
    getAll() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const systems = yield this.dataAccessor.readAll({ entityName: this.entityName });
            for (const id of Object.keys(systems)) {
                const system = systems[id];
                if (!((_a = system === null || system === void 0 ? void 0 : system.url) === null || _a === void 0 ? void 0 : _a.trim())) {
                    this.logger.warn(`Filtering system with ID [${id}] as it seems corrupt. Run repair`);
                    delete systems[id];
                }
            }
            return Object.values(systems);
        });
    }
};
exports.SystemDataProvider = SystemDataProvider;
//# sourceMappingURL=backend-system.js.map