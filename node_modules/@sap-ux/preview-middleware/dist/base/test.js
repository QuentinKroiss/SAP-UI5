"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateImportList = exports.mergeTestConfigDefaults = void 0;
const DEFAULTS = {
    qunit: {
        path: '/test/unitTests.qunit.html',
        init: '/test/unitTests.qunit.js',
        pattern: '/test/**/*Test.*',
        framework: 'QUnit'
    },
    opa5: {
        path: '/test/opaTests.qunit.html',
        init: '/test/opaTests.qunit.js',
        pattern: '/test/**/*Journey.*',
        framework: 'OPA5'
    }
};
/**
 * Merge the given test configuration with the default values.
 *
 * @param config test configuration
 * @returns merged test configuration
 */
function mergeTestConfigDefaults(config) {
    var _a, _b, _c, _d;
    const key = config.framework.toLowerCase();
    const defaults = (_a = DEFAULTS[key]) !== null && _a !== void 0 ? _a : {};
    if (config.path && !config.path.startsWith('/')) {
        config.path = `/${config.path}`;
    }
    if (config.init && !config.init.startsWith('/')) {
        config.init = `/${config.init}`;
    }
    return {
        framework: config.framework,
        path: (_b = config.path) !== null && _b !== void 0 ? _b : defaults.path,
        init: (_c = config.init) !== null && _c !== void 0 ? _c : defaults.init,
        pattern: (_d = config.pattern) !== null && _d !== void 0 ? _d : defaults.pattern
    };
}
exports.mergeTestConfigDefaults = mergeTestConfigDefaults;
/**
 * Generate a list of imports from a list of resources.
 *
 * @param ns namespace of the test files
 * @param resourceList list of resources representing test files
 * @returns array of strings representing the tests
 */
function generateImportList(ns, resourceList) {
    return resourceList
        ? resourceList.map((file) => {
            const path = file.getPath().split('.');
            path.pop();
            return `${ns}${path.join('.')}`;
        })
        : [];
}
exports.generateImportList = generateImportList;
//# sourceMappingURL=test.js.map