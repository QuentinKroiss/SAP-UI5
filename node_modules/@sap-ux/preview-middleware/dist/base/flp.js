"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initAdp = exports.FlpSandbox = void 0;
const ejs_1 = require("ejs");
const fs_1 = require("fs");
const path_1 = require("path");
const express_1 = require("express");
const flex_1 = require("./flex");
const project_access_1 = require("@sap-ux/project-access");
const adp_tooling_1 = require("@sap-ux/adp-tooling");
const test_1 = require("./test");
const DEVELOPER_MODE_CONFIG = new Map([
    // Run application in design time mode
    // Adds bindingString to BindingInfo objects. Required to create and read PropertyBinding changes
    ['xx-designMode', 'true'],
    // In design mode, the controller code will not be executed by default, which is not desired in our case, so we suppress the deactivation
    ['xx-suppressDeactivationOfControllerCode', 'true'],
    // Make sure that XML preprocessing results are correctly invalidated
    ['xx-viewCache', 'false']
]);
/**
 * SAPUI5 delivered namespaces from https://ui5.sap.com/#/api/sap
 */
const UI5_LIBS = [
    'sap.apf',
    'sap.base',
    'sap.chart',
    'sap.collaboration',
    'sap.f',
    'sap.fe',
    'sap.fileviewer',
    'sap.gantt',
    'sap.landvisz',
    'sap.m',
    'sap.ndc',
    'sap.ovp',
    'sap.rules',
    'sap.suite',
    'sap.tnt',
    'sap.ui',
    'sap.uiext',
    'sap.ushell',
    'sap.uxap',
    'sap.viz',
    'sap.webanalytics',
    'sap.zen'
];
const DEFAULT_LIVERELOAD_PORT = 35729;
/**
 * Default theme
 */
const DEFAULT_THEME = 'sap_horizon';
/**
 * Default path for mounting the local FLP.
 */
const DEFAULT_PATH = '/test/flp.html';
/**
 * Default intent
 */
const DEFAULT_INTENT = {
    object: 'app',
    action: 'preview'
};
/**
 * Static settings
 */
const PREVIEW_URL = {
    client: {
        url: '/preview/client',
        local: (0, path_1.join)(__dirname, '../../dist/client'),
        ns: 'open.ux.preview.client'
    },
    api: '/preview/api'
};
/**
 * Class handling preview of a sandbox FLP.
 */
class FlpSandbox {
    /**
     * Constructor setting defaults and keeping reference to workspace resources.
     *
     * @param config configuration from the ui5.yaml
     * @param project reference to the project provided by the UI5 CLI
     * @param utils middleware utilities provided by the UI5 CLI
     * @param logger logger instance
     */
    constructor(config, project, utils, logger) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        this.project = project;
        this.utils = utils;
        this.logger = logger;
        this.config = {
            path: (_b = (_a = config.flp) === null || _a === void 0 ? void 0 : _a.path) !== null && _b !== void 0 ? _b : DEFAULT_PATH,
            intent: (_d = (_c = config.flp) === null || _c === void 0 ? void 0 : _c.intent) !== null && _d !== void 0 ? _d : DEFAULT_INTENT,
            apps: (_f = (_e = config.flp) === null || _e === void 0 ? void 0 : _e.apps) !== null && _f !== void 0 ? _f : [],
            libs: (_g = config.flp) === null || _g === void 0 ? void 0 : _g.libs,
            theme: (_h = config.flp) === null || _h === void 0 ? void 0 : _h.theme,
            init: (_j = config.flp) === null || _j === void 0 ? void 0 : _j.init
        };
        if (!this.config.path.startsWith('/')) {
            this.config.path = `/${this.config.path}`;
        }
        this.test = config.test;
        this.rta = config.rta;
        logger.debug(`Config: ${JSON.stringify({ flp: this.config, rta: this.rta, test: this.test })}`);
        this.router = (0, express_1.Router)();
    }
    /**
     * Initialize the FLP sandbox router.
     *
     * @param manifest application manifest
     * @param componentId optional componentId e.g. for adaptation projects
     * @param resources optional additional resource mappings
     */
    init(manifest, componentId, resources = {}) {
        var _a, _b, _c, _d, _e, _f, _g;
        var _h;
        return __awaiter(this, void 0, void 0, function* () {
            this.createFlexHandler();
            const flex = this.getFlexSettings();
            const supportedThemes = (_b = (_a = manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.supportedThemes) !== null && _b !== void 0 ? _b : [DEFAULT_THEME];
            const ui5Theme = (_c = this.config.theme) !== null && _c !== void 0 ? _c : (supportedThemes.includes(DEFAULT_THEME) ? DEFAULT_THEME : supportedThemes[0]);
            const id = manifest['sap.app'].id;
            const ns = id.replace(/\./g, '/');
            this.templateConfig = {
                basePath: (_d = path_1.posix.relative(path_1.posix.dirname(this.config.path), '/')) !== null && _d !== void 0 ? _d : '.',
                apps: {},
                init: this.config.init ? ns + this.config.init : undefined,
                ui5: {
                    libs: this.getUI5Libs(manifest),
                    theme: ui5Theme,
                    flex,
                    resources: Object.assign(Object.assign({}, resources), { [PREVIEW_URL.client.ns]: PREVIEW_URL.client.url }),
                    bootstrapOptions: ''
                },
                locateReuseLibsScript: (_e = this.config.libs) !== null && _e !== void 0 ? _e : (yield this.hasLocateReuseLibsScript())
            };
            yield this.addApp(manifest, {
                componentId,
                target: (_f = resources[componentId !== null && componentId !== void 0 ? componentId : id]) !== null && _f !== void 0 ? _f : this.templateConfig.basePath,
                local: '.',
                intent: this.config.intent
            });
            this.addStandardRoutes();
            if (this.rta) {
                (_g = (_h = this.rta).options) !== null && _g !== void 0 ? _g : (_h.options = {});
                this.rta.options.baseId = componentId !== null && componentId !== void 0 ? componentId : id;
                this.rta.options.appName = id;
                this.addEditorRoutes(this.rta);
            }
            if (this.test) {
                this.addTestRoutes(this.test, id);
            }
            yield this.addRoutesForAdditionalApps();
            this.logger.info(`Initialized for app ${id}`);
            this.logger.debug(`Configured apps: ${JSON.stringify(this.templateConfig.apps)}`);
        });
    }
    /**
     * Generates the FLP sandbox for an editor.
     *
     * @param rta runtime authoring configuration
     * @param editor editor configuration
     * @returns FLP sandbox html
     */
    generateSandboxForEditor(rta, editor) {
        var _a;
        const defaultGenerator = editor.developerMode
            ? '@sap-ux/control-property-editor'
            : '@sap-ux/preview-middleware';
        const config = Object.assign({}, this.templateConfig);
        /* sap.ui.rta needs to be added to the list of preload libs for variants management and adaptation projects */
        if (!config.ui5.libs.includes('sap.ui.rta')) {
            const libs = config.ui5.libs.split(',');
            libs.push('sap.ui.rta');
            config.ui5.libs = libs.join(',');
        }
        config.flex = Object.assign(Object.assign({ layer: rta.layer }, rta.options), { generator: (_a = editor.generator) !== null && _a !== void 0 ? _a : defaultGenerator, developerMode: editor.developerMode === true, pluginScript: editor.pluginScript });
        if (editor.developerMode === true) {
            config.ui5.bootstrapOptions = serializeUi5Configuration(DEVELOPER_MODE_CONFIG);
        }
        const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/sandbox.html'), 'utf-8');
        return (0, ejs_1.render)(template, config);
    }
    /**
     * Add additional routes for configured editors.
     *
     * @param rta runtime authoring configuration
     */
    addEditorRoutes(rta) {
        var _a;
        const cpe = (0, path_1.dirname)(require.resolve('@sap-ux/control-property-editor-sources'));
        for (const editor of rta.editors) {
            let previewUrl = editor.path;
            if (editor.developerMode) {
                previewUrl = `${previewUrl}.inner.html`;
                (_a = editor.pluginScript) !== null && _a !== void 0 ? _a : (editor.pluginScript = 'open/ux/preview/client/cpe/init');
                this.router.get(editor.path, (_req, res) => {
                    var _a, _b, _c, _d;
                    const scenario = (_a = rta.options) === null || _a === void 0 ? void 0 : _a.scenario;
                    let templatePreviewUrl = `${previewUrl}?sap-ui-xx-viewCache=false&fiori-tools-rta-mode=forAdaptation&sap-ui-rta-skip-flex-validation=true&sap-ui-xx-condense-changes=true#${this.config.intent.object}-${this.config.intent.action}`;
                    if (scenario === 'ADAPTATION_PROJECT') {
                        templatePreviewUrl = templatePreviewUrl.replace('?', `?sap-ui-layer=${rta.layer}&`);
                    }
                    const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/editor.html'), 'utf-8');
                    const envPort = process.env.FIORI_TOOLS_LIVERELOAD_PORT;
                    let livereloadPort = envPort ? parseInt(envPort, 10) : DEFAULT_LIVERELOAD_PORT;
                    livereloadPort = isNaN(livereloadPort) ? DEFAULT_LIVERELOAD_PORT : livereloadPort;
                    const html = (0, ejs_1.render)(template, {
                        previewUrl: templatePreviewUrl,
                        telemetry: (_c = (_b = rta.options) === null || _b === void 0 ? void 0 : _b.telemetry) !== null && _c !== void 0 ? _c : false,
                        appName: (_d = rta.options) === null || _d === void 0 ? void 0 : _d.appName,
                        scenario,
                        livereloadPort
                    });
                    res.status(200).contentType('html').send(html);
                });
                let path = (0, path_1.dirname)(editor.path);
                if (!path.endsWith('/')) {
                    path = `${path}/`;
                }
                this.router.use(`${path}editor`, (0, express_1.static)(cpe));
            }
            this.router.get(previewUrl, (_req, res) => {
                const html = this.generateSandboxForEditor(rta, editor).replace('</body>', `</body>\n<!-- livereload disabled for editor </body>-->`);
                res.status(200).contentType('html').send(html);
            });
        }
    }
    /**
     * Add routes for html and scripts required for a local FLP.
     */
    addStandardRoutes() {
        // register static client sources
        this.router.use(PREVIEW_URL.client.url, (0, express_1.static)(PREVIEW_URL.client.local));
        // add route for the sandbox.html
        this.router.get(this.config.path, ((_req, res) => __awaiter(this, void 0, void 0, function* () {
            // warn the user if a file with the same name exists in the filesystem
            const file = yield this.project.byPath(this.config.path);
            if (file) {
                this.logger.warn(`HTML file returned at ${this.config.path} is NOT loaded from the file system.`);
            }
            const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/sandbox.html'), 'utf-8');
            const html = (0, ejs_1.render)(template, this.templateConfig);
            res.status(200).contentType('html').send(html);
        })));
    }
    /**
     * Try finding a locate-reuse-libs script in the project.
     *
     * @returns the location of the locate-reuse-libs script or undefined.
     */
    hasLocateReuseLibsScript() {
        return __awaiter(this, void 0, void 0, function* () {
            const files = yield this.project.byGlob('**/locate-reuse-libs.js');
            return files.length > 0;
        });
    }
    /**
     * Add additional routes for apps also to be shown in the local FLP.
     */
    addRoutesForAdditionalApps() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            for (const app of this.config.apps) {
                let manifest;
                if (app.local) {
                    manifest = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(app.local, 'webapp/manifest.json'), 'utf-8'));
                    this.router.use(app.target, (0, express_1.static)((0, path_1.join)(app.local, 'webapp')));
                    this.logger.info(`Serving additional application at ${app.target} from ${app.local}`);
                }
                else if (app.componentId) {
                    manifest = {
                        'sap.app': {
                            id: app.componentId,
                            title: app.intent ? `${app.intent.object}-${app.intent.action}` : app.componentId
                        }
                    };
                }
                if (manifest) {
                    yield this.addApp(manifest, app);
                    this.logger.info(`Adding additional intent: ${(_a = app.intent) === null || _a === void 0 ? void 0 : _a.object}-${(_b = app.intent) === null || _b === void 0 ? void 0 : _b.action}`);
                }
                else {
                    this.logger.info(`Invalid application config for route ${app.target} because neither componentId nor local folder provided.`);
                }
            }
        });
    }
    /**
     * Retrieves the configuration settings for UI5 flexibility services.
     *
     * @returns An array of flexibility service configurations, each specifying a connector
     *          and its options, such as the layers it applies to and its service URL, if applicable.
     */
    getFlexSettings() {
        const localConnectorPath = 'custom.connectors.WorkspaceConnector';
        return [
            { connector: 'LrepConnector', layers: [], url: '/sap/bc/lrep' },
            {
                applyConnector: localConnectorPath,
                writeConnector: localConnectorPath,
                custom: true
            },
            {
                connector: 'LocalStorageConnector',
                layers: ['CUSTOMER', 'USER']
            }
        ];
    }
    /**
     * Create required routes for flex.
     */
    createFlexHandler() {
        const api = `${PREVIEW_URL.api}/changes`;
        this.router.use(api, (0, express_1.json)());
        this.router.get(api, ((_req, res) => __awaiter(this, void 0, void 0, function* () {
            res.status(200)
                .contentType('application/json')
                .send(yield (0, flex_1.readChanges)(this.project, this.logger));
        })));
        this.router.post(api, ((req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { success, message } = (0, flex_1.writeChange)(req.body, this.utils.getProject().getSourcePath(), this.logger);
                if (success) {
                    res.status(200).send(message);
                }
                else {
                    res.status(400).send('INVALID_DATA');
                }
            }
            catch (error) {
                res.status(500).send(error.message);
            }
        })));
        this.router.delete(api, ((req, res) => __awaiter(this, void 0, void 0, function* () {
            try {
                const { success, message } = (0, flex_1.deleteChange)(req.body, this.utils.getProject().getSourcePath(), this.logger);
                if (success) {
                    res.status(200).send(message);
                }
                else {
                    res.status(400).send('INVALID_DATA');
                }
            }
            catch (error) {
                res.status(500).send(error.message);
            }
        })));
    }
    /**
     * Add routes for html and scripts required for a local test FLP.
     *
     * @param configs test configurations
     * @param id application id from manifest
     */
    addTestRoutes(configs, id) {
        const ns = id.replace(/\./g, '/');
        const htmlTemplate = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/qunit.html'), 'utf-8');
        const initTemplate = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/qunit.js'), 'utf-8');
        for (const testConfig of configs) {
            const config = (0, test_1.mergeTestConfigDefaults)(testConfig);
            this.logger.debug(`Add route for ${config.path}`);
            // add route for the *.qunit.html
            this.router.get(config.path, ((_req, res, next) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                this.logger.debug(`Serving test route: ${config.path}`);
                const file = yield this.project.byPath(config.path);
                if (file) {
                    this.logger.warn(`HTML file returned at ${config.path} is loaded from the file system.`);
                    next();
                }
                else {
                    const templateConfig = {
                        id,
                        framework: config.framework,
                        basePath: (_a = path_1.posix.relative(path_1.posix.dirname(config.path), '/')) !== null && _a !== void 0 ? _a : '.',
                        initPath: `${ns}${config.init.replace('.js', '')}`
                    };
                    const html = (0, ejs_1.render)(htmlTemplate, templateConfig);
                    res.status(200).contentType('html').send(html);
                }
            })));
            if (testConfig.init !== undefined) {
                this.logger.debug(`Skip serving test init script in favor of provided script: ${testConfig.init}`);
                continue;
            }
            // add route for the init file
            this.logger.debug(`Add route for ${config.init}`);
            this.router.get(config.init, ((_req, res, next) => __awaiter(this, void 0, void 0, function* () {
                this.logger.debug(`Serving test init script: ${config.init}`);
                const files = yield this.project.byGlob(config.init.replace('.js', '.*'));
                if ((files === null || files === void 0 ? void 0 : files.length) > 0) {
                    this.logger.warn(`Script returned at ${config.path} is loaded from the file system.`);
                    next();
                }
                else {
                    const testFiles = yield this.project.byGlob(config.pattern);
                    const templateConfig = { tests: (0, test_1.generateImportList)(ns, testFiles) };
                    const html = (0, ejs_1.render)(initTemplate, templateConfig);
                    res.status(200).contentType('application/javascript').send(html);
                }
            })));
        }
    }
    /**
     * Add an application to the local FLP preview.
     *
     * @param manifest manifest of the additional target app
     * @param app configuration for the preview
     */
    addApp(manifest, app) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return __awaiter(this, void 0, void 0, function* () {
            const id = manifest['sap.app'].id;
            (_a = app.intent) !== null && _a !== void 0 ? _a : (app.intent = {
                object: id.replace(/\./g, ''),
                action: 'preview'
            });
            let title = (_b = manifest['sap.app'].title) !== null && _b !== void 0 ? _b : id;
            let description = (_c = manifest['sap.app'].description) !== null && _c !== void 0 ? _c : '';
            if (app.local) {
                title = (_d = (yield this.getI18nTextFromProperty(app.local, manifest['sap.app'].title))) !== null && _d !== void 0 ? _d : id;
                description = (_e = (yield this.getI18nTextFromProperty(app.local, manifest['sap.app'].description))) !== null && _e !== void 0 ? _e : '';
            }
            this.templateConfig.ui5.resources[id] = app.target;
            this.templateConfig.apps[`${(_f = app.intent) === null || _f === void 0 ? void 0 : _f.object}-${(_g = app.intent) === null || _g === void 0 ? void 0 : _g.action}`] = {
                title: title,
                description: description,
                additionalInformation: `SAPUI5.Component=${(_h = app.componentId) !== null && _h !== void 0 ? _h : id}`,
                applicationType: 'URL',
                url: app.target,
                applicationDependencies: { manifest: true }
            };
        });
    }
    /**
     * Get the i18n text of the given property.
     *
     * @param projectRoot absolute path to the project root
     * @param propertyValue value of the property
     * @returns i18n text of the property
     * @private
     */
    getI18nTextFromProperty(projectRoot, propertyValue) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            //i18n model format could be {{key}} or {i18n>key}
            if (!propertyValue || propertyValue.search(/{{\w+}}|{i18n>\w+}/g) === -1) {
                return propertyValue;
            }
            const propertyI18nKey = propertyValue.replace(/i18n>|[{}]/g, '');
            const projectAccess = yield (0, project_access_1.createProjectAccess)(projectRoot);
            try {
                const bundle = (yield projectAccess.getApplication('').getI18nBundles())['sap.app'];
                return (_d = (_c = (_b = (_a = bundle[propertyI18nKey]) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : propertyI18nKey;
            }
            catch (e) {
                this.logger.warn('Failed to load i18n properties bundle');
            }
            return propertyI18nKey;
        });
    }
    /**
     * Gets the UI5 libs dependencies from manifest.json.
     *
     * @param manifest application manifest
     * @returns UI5 libs that should preloaded
     */
    getUI5Libs(manifest) {
        var _a, _b;
        if ((_b = (_a = manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.dependencies) === null || _b === void 0 ? void 0 : _b.libs) {
            const libNames = Object.keys(manifest['sap.ui5'].dependencies.libs);
            return libNames
                .filter((key) => {
                return UI5_LIBS.some((substring) => {
                    return key === substring || key.startsWith(substring + '.');
                });
            })
                .join(',');
        }
        else {
            return 'sap.m,sap.ui.core,sap.ushell';
        }
    }
}
exports.FlpSandbox = FlpSandbox;
/**
 * Creates an attribute string that can be added to an HTML element.
 *
 * @param attributes map with attributes and their values
 * @param indent indentation thats inserted before each attribute
 * @param prefix value that should be added at the start of to all attribute names
 * @returns attribute string
 */
function serializeDataAttributes(attributes, indent = '', prefix = 'data') {
    return [...attributes.entries()]
        .map(([name, value]) => {
        return `${indent}${prefix}-${name}="${value}"`;
    })
        .join('\n');
}
/**
 * Creates an attribute string that can be added to bootstrap script in a HTML file.
 *
 * @param config ui5 configuration options
 * @returns attribute string
 */
function serializeUi5Configuration(config) {
    return '\n' + serializeDataAttributes(config, '        ', 'data-sap-ui');
}
/**
 * Initialize the preview for an adaptation project.
 *
 * @param rootProject reference to the project
 * @param config configuration from the ui5.yaml
 * @param flp FlpSandbox instance
 * @param util middleware utilities provided by the UI5 CLI
 * @param logger logger instance
 */
function initAdp(rootProject, config, flp, util, logger) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const appVariant = yield rootProject.byPath('/manifest.appdescr_variant');
        if (appVariant) {
            const adp = new adp_tooling_1.AdpPreview(config, rootProject, util, logger);
            const variant = JSON.parse(yield appVariant.getString());
            const layer = yield adp.init(variant);
            if (flp.rta) {
                flp.rta.layer = layer;
                flp.rta.options = {
                    projectId: variant.id,
                    scenario: 'ADAPTATION_PROJECT'
                };
                for (const editor of flp.rta.editors) {
                    (_a = editor.pluginScript) !== null && _a !== void 0 ? _a : (editor.pluginScript = 'open/ux/preview/client/adp/init');
                }
            }
            const descriptor = adp.descriptor;
            descriptor.asyncHints.requests = [];
            const { name, manifest } = descriptor;
            yield flp.init(manifest, name, adp.resources);
            flp.router.use(adp.descriptor.url, adp.proxy.bind(adp));
            flp.router.use((0, express_1.json)());
            adp.addApis(flp.router);
        }
        else {
            throw new Error('ADP configured but no manifest.appdescr_variant found.');
        }
    });
}
exports.initAdp = initAdp;
//# sourceMappingURL=flp.js.map