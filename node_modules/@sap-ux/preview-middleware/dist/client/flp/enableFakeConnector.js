"use strict";

sap.ui.define(["sap/ui/fl/LrepConnector", "sap/ui/fl/FakeLrepConnector", "./common"], function (LrepConnector, FakeLrepConnector, ___common) {
  "use strict";

  const CHANGES_API_PATH = ___common["CHANGES_API_PATH"];
  const getFlexSettings = ___common["getFlexSettings"];
  /**
   * Processes an array of FlexChange objects.
   * It updates each change object with settings and sends them to a API endpoint.
   *
   * @param {FlexChange[]} changes - Array of FlexChange objects to be processed.
   * @returns {Promise<void>} A promise that resolves when all changes are processed.
   */
  async function create(changes) {
    const settings = getFlexSettings();
    await Promise.all(changes.map(change => {
      if (settings) {
        change.support ??= {};
        change.support.generator = settings.generator;
      }
      return fetch(CHANGES_API_PATH, {
        method: 'POST',
        body: JSON.stringify(change, null, 2),
        headers: {
          'content-type': 'application/json'
        }
      });
    }));
  }

  /**
   * Loads changes from a given path and processes them using an LrepConnector instance.
   * The changes are then formatted and returned in a specified structure.
   *
   * @returns {Promise<LoadChangesResult>} A promise that resolves to an object of type LoadChangesResult.
   */
  async function loadChanges() {
    const lrep = new LrepConnector();
    const response = await fetch(CHANGES_API_PATH, {
      method: 'GET',
      headers: {
        'content-type': 'application/json'
      }
    });
    const changes = await response.json();
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return LrepConnector.prototype.loadChanges.apply(lrep, args).then(res => {
      const flexChanges = Object.values(changes);
      res.changes.changes = flexChanges;
      return res;
    });
  }

  /**
   * Configures and enables the FakeLrepConnector based on the SAP UI5 version.
   * If the minor version of the SAP UI5 is less than 72, this function extends
   * the FakeLrepConnector's prototype with specific methods and enables the fake connector.
   *
   * Assumes the existence of a global 'sap' object with a 'ui.version' property,
   * and global jQuery object with 'extend' method.
   *
   * @returns {void}
   */
  var __exports = function () {
    jQuery.extend(FakeLrepConnector.prototype, {
      create,
      loadChanges,
      loadSettings: () => Promise.resolve()
    });
    FakeLrepConnector.enableFakeConnector();
  };
  __exports.create = create;
  __exports.loadChanges = loadChanges;
  return __exports;
});
//# sourceMappingURL=enableFakeConnector.js.map