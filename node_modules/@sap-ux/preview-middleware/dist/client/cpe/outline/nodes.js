"use strict";

sap.ui.define(["./utils"], function (___utils) {
  "use strict";

  const isEditable = ___utils["isEditable"];
  /**
   * Retrieves additional data for a given control ID.
   *
   * @param id The control ID for which to retrieve additional data
   * @returns An object containing additional data, including an optional 'text' property
   */
  function getAdditionalData(id) {
    const control = sap.ui.getCore().byId(id);
    if (control?.getMetadata().getProperty('text')) {
      const text = control.getProperty('text');
      if (typeof text === 'string' && text.trim() !== '') {
        return {
          text
        };
      }
    }
    return {};
  }

  /**
   * Gets the children nodes of an aggregation type node.
   *
   * @param current The current node to retrieve children from
   * @returns An array of children nodes, or an empty array if none are found
   */
  function getChildren(current) {
    return (current.elements ?? []).flatMap(element => element.type === 'aggregation' ? element.elements ?? [] : []);
  }

  /**
   * Transform node.
   *
   * @param input outline view node
   * @param scenario type of project
   * @returns Promise<OutlineNode[]>
   */
  async function transformNodes(input, scenario) {
    const stack = [...input];
    const items = [];
    while (stack.length) {
      const current = stack.shift();
      const editable = await isEditable(current?.id);
      if (current?.type === 'element') {
        const children = getChildren(current);
        const {
          text
        } = getAdditionalData(current.id);
        const technicalName = current.technicalName.split('.').slice(-1)[0];
        const node = {
          controlId: current.id,
          controlType: current.technicalName,
          name: text ?? technicalName,
          editable,
          visible: current.visible ?? true,
          children: await transformNodes(children, scenario)
        };
        items.push(node);
      }
      if (scenario === 'ADAPTATION_PROJECT' && current?.type === 'extensionPoint') {
        const node = {
          controlId: current.id,
          controlType: current.technicalName,
          name: current.name,
          editable,
          visible: current.visible ?? true,
          children: [],
          icon: current.icon
        };
        items.push(node);
      }
    }
    return items;
  }
  var __exports = {
    __esModule: true
  };
  __exports.transformNodes = transformNodes;
  return __exports;
});
//# sourceMappingURL=nodes.js.map