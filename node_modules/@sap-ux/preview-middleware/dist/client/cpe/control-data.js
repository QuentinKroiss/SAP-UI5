'use strict';
sap.ui.define([
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    'sap/ui/fl/Utils',
    'sap/ui/base/DataType'
], function (___sap_ux_private_control_property_editor_common, Utils, DataType) {
    'use strict';
    const BOOLEAN_VALUE_TYPE = ___sap_ux_private_control_property_editor_common['BOOLEAN_VALUE_TYPE'];
    const CHECKBOX_EDITOR_TYPE = ___sap_ux_private_control_property_editor_common['CHECKBOX_EDITOR_TYPE'];
    const DROPDOWN_EDITOR_TYPE = ___sap_ux_private_control_property_editor_common['DROPDOWN_EDITOR_TYPE'];
    const FLOAT_VALUE_TYPE = ___sap_ux_private_control_property_editor_common['FLOAT_VALUE_TYPE'];
    const INPUT_EDITOR_TYPE = ___sap_ux_private_control_property_editor_common['INPUT_EDITOR_TYPE'];
    const INTEGER_VALUE_TYPE = ___sap_ux_private_control_property_editor_common['INTEGER_VALUE_TYPE'];
    const STRING_VALUE_TYPE = ___sap_ux_private_control_property_editor_common['STRING_VALUE_TYPE'];
    const convertCamelCaseToPascalCase = ___sap_ux_private_control_property_editor_common['convertCamelCaseToPascalCase'];
    function isPropertyEnabled(analyzedType) {
        return !(analyzedType.isArray || analyzedType.primitiveType === 'any');
    }
    function isControlEnabled(analyzedType, hasStableId, ignore, controlOverlay) {
        return (controlOverlay?.isSelectable() ?? false) && isPropertyEnabled(analyzedType) && hasStableId && !ignore;
    }
    function testIconPattern(name) {
        const nameLc = (name || '').toLowerCase();
        return nameLc.indexOf('src') >= 0 || nameLc.startsWith('icon') || nameLc.endsWith('icon');
    }
    function analyzePropertyType(property) {
        const analyzedType = {
            primitiveType: 'any',
            ui5Type: null,
            enumValues: null,
            isArray: false
        };
        const propertyType = property?.getType();
        const typeName = propertyType?.getName();
        if (!property || !propertyType || !typeName) {
            return undefined;
        }
        if (typeName.indexOf('[]') > 0) {
            analyzedType.primitiveType = typeName.substring(0, typeName.indexOf('[]'));
            analyzedType.isArray = true;
        } else if ([
                'object',
                'void',
                'any'
            ].includes(typeName)) {
            analyzedType.primitiveType = typeName;
        } else if ([
                'boolean',
                'string',
                'int',
                'float'
            ].includes(typeName)) {
            analyzedType.primitiveType = typeName;
        } else {
            const propertyDataType = DataType.getType(typeName);
            if (propertyDataType && !(propertyDataType instanceof DataType)) {
                return analyzedType;
            }
            const name = Object.getPrototypeOf(propertyDataType).getName();
            if (!name) {
                analyzedType.primitiveType = 'enum';
            } else {
                analyzedType.primitiveType = name;
            }
            analyzedType.ui5Type = typeName;
            if (analyzedType.primitiveType === 'enum') {
                analyzedType.enumValues = sap.ui.require(analyzedType.ui5Type.split('.').join('/'));
            }
        }
        return analyzedType;
    }
    function normalizeObjectPropertyValue(rawValue) {
        if (typeof rawValue === 'object' && rawValue instanceof Object && !Array.isArray(rawValue)) {
            try {
                return JSON.stringify(rawValue);
            } catch (e) {
                if (e instanceof Error && e.message.toLowerCase().includes('converting circular structure to json')) {
                    return '<Circular JSON cannot be displayed>';
                }
                return rawValue;
            }
        } else if (typeof rawValue === 'function') {
            return '';
        } else {
            return rawValue;
        }
    }
    function buildControlData(control, controlOverlay) {
        const controlMetadata = control.getMetadata();
        const selectedControlName = controlMetadata.getName();
        const hasStableId = Utils.checkControlId(control);
        const controlProperties = controlOverlay ? controlOverlay.getDesignTimeMetadata().getData().properties : undefined;
        const allProperties = controlMetadata.getAllProperties();
        const propertyNames = Object.keys(allProperties);
        const properties = [];
        for (const propertyName of propertyNames) {
            const property = allProperties[propertyName];
            const analyzedType = analyzePropertyType(property);
            if (!analyzedType) {
                continue;
            }
            let ignore = false;
            if (controlProperties?.[property.name]) {
                ignore = controlProperties[property.name].ignore;
            }
            const controlNewData = {
                id: control.getId(),
                name: property.name,
                newValue: control.getProperty(property.name)
            };
            const bindingInfo = control.getBindingInfo(controlNewData.name);
            if (bindingInfo?.bindingString !== undefined) {
                controlNewData.newValue = bindingInfo.bindingString;
            }
            const isEnabled = isControlEnabled(analyzedType, hasStableId, ignore, controlOverlay);
            const value = normalizeObjectPropertyValue(controlNewData.newValue);
            const isIcon = testIconPattern(property.name) && selectedControlName !== 'sap.m.Image' && analyzedType.ui5Type === 'sap.ui.core.URI';
            const ui5Type = analyzedType.ui5Type || undefined;
            const readableName = convertCamelCaseToPascalCase(property.name);
            switch (analyzedType.primitiveType) {
            case 'enum': {
                    const values = analyzedType.enumValues ?? {};
                    const options = Object.keys(values).map(key => ({
                        key,
                        text: values[key]
                    }));
                    properties.push({
                        type: STRING_VALUE_TYPE,
                        editor: DROPDOWN_EDITOR_TYPE,
                        name: property.name,
                        readableName,
                        value: value,
                        isEnabled,
                        ui5Type,
                        options
                    });
                    break;
                }
            case 'string': {
                    properties.push({
                        type: STRING_VALUE_TYPE,
                        editor: INPUT_EDITOR_TYPE,
                        name: property.name,
                        readableName,
                        value: value,
                        isEnabled,
                        isIcon,
                        ui5Type
                    });
                    break;
                }
            case 'int': {
                    properties.push({
                        type: INTEGER_VALUE_TYPE,
                        editor: INPUT_EDITOR_TYPE,
                        name: property.name,
                        readableName,
                        value: value,
                        isEnabled,
                        ui5Type
                    });
                    break;
                }
            case 'float': {
                    properties.push({
                        type: FLOAT_VALUE_TYPE,
                        editor: INPUT_EDITOR_TYPE,
                        name: property.name,
                        readableName,
                        value: value,
                        isEnabled,
                        ui5Type
                    });
                    break;
                }
            case 'boolean': {
                    properties.push({
                        type: BOOLEAN_VALUE_TYPE,
                        editor: CHECKBOX_EDITOR_TYPE,
                        name: property.name,
                        readableName,
                        value: value,
                        isEnabled,
                        ui5Type
                    });
                    break;
                }
            }
        }
        return {
            id: control.getId(),
            type: selectedControlName,
            properties: [...properties].sort((a, b) => a.name > b.name ? 1 : -1),
            name: selectedControlName
        };
    }
    var __exports = { __esModule: true };
    __exports.buildControlData = buildControlData;
    return __exports;
});