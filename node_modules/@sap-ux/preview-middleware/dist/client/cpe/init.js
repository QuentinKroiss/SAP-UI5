'use strict';
sap.ui.define([
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    './outline/index',
    './selection',
    './changes/service',
    './documentation',
    'sap/base/Log',
    './logger',
    './ui5-utils',
    '../flp/WorkspaceConnector'
], function (___sap_ux_private_control_property_editor_common, ___outline_index, ___selection, ___changes_service, ___documentation, Log, ___logger, ___ui5_utils, __workspaceConnector) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    const startPostMessageCommunication = ___sap_ux_private_control_property_editor_common['startPostMessageCommunication'];
    const iconsLoaded = ___sap_ux_private_control_property_editor_common['iconsLoaded'];
    const enableTelemetry = ___sap_ux_private_control_property_editor_common['enableTelemetry'];
    const storageFileChanged = ___sap_ux_private_control_property_editor_common['storageFileChanged'];
    const initOutline = ___outline_index['initOutline'];
    const SelectionService = ___selection['SelectionService'];
    const ChangeService = ___changes_service['ChangeService'];
    const loadDefaultLibraries = ___documentation['loadDefaultLibraries'];
    const logger = ___logger['logger'];
    const getIcons = ___ui5_utils['getIcons'];
    const workspaceConnector = _interopRequireDefault(__workspaceConnector);
    function init(rta) {
        Log.info('Initializing Control Property Editor');
        const flexSettings = rta.getFlexSettings();
        if (flexSettings.telemetry === true) {
            enableTelemetry();
        }
        const actionHandlers = [];
        function subscribe(handler) {
            actionHandlers.push(handler);
        }
        const selectionService = new SelectionService(rta);
        const changesService = new ChangeService({ rta }, selectionService);
        const services = [
            selectionService,
            changesService
        ];
        try {
            loadDefaultLibraries();
            const {sendAction} = startPostMessageCommunication(window.parent, async function onAction(action) {
                for (const handler of actionHandlers) {
                    try {
                        await handler(action);
                    } catch (error) {
                        Log.error('Handler Failed: ', error);
                    }
                }
            }, logger);
            for (const service of services) {
                service.init(sendAction, subscribe);
            }
            initOutline(rta, sendAction).catch(error => Log.error('Error during initialization of Control Property Editor', error));
            const icons = getIcons();
            workspaceConnector.storage.fileChangeRequestNotifier = (fileName, kind, changeType) => {
                if (changeType && changeType !== 'appdescr_fe_changePageConfiguration' || kind === 'delete') {
                    sendAction(storageFileChanged(fileName?.replace('sap.ui.fl.', '')));
                }
            };
            sendAction(iconsLoaded(icons));
        } catch (error) {
            Log.error('Error during initialization of Control Property Editor', error);
        }
        return Promise.resolve();
    }
    return init;
});