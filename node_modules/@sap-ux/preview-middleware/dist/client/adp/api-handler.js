"use strict";

sap.ui.define([], function () {
  "use strict";

  var ApiEndpoints = /*#__PURE__*/function (ApiEndpoints) {
    ApiEndpoints["CHANGES"] = "/preview/api/changes";
    ApiEndpoints["FRAGMENT"] = "/adp/api/fragment";
    ApiEndpoints["CONTROLLER"] = "/adp/api/controller";
    ApiEndpoints["CODE_EXT"] = "/adp/api/code_ext";
    ApiEndpoints["MANIFEST_APP_DESCRIPTOR"] = "/manifest.appdescr_variant";
    return ApiEndpoints;
  }(ApiEndpoints || {});
  var RequestMethod = /*#__PURE__*/function (RequestMethod) {
    RequestMethod["GET"] = "GET";
    RequestMethod["PUT"] = "PUT";
    RequestMethod["POST"] = "POST";
    RequestMethod["PATCH"] = "PATCH";
    RequestMethod["DELETE"] = "DELETE";
    return RequestMethod;
  }(RequestMethod || {});
  /**
   * Requests a given endpoint
   *
   * @param endpoint API Endpoint
   * @param method RequestMethod
   * @param data Data to be sent to the server
   * @returns Data from the server request
   */
  async function request(endpoint, method, data) {
    const config = {
      method,
      body: JSON.stringify(data),
      headers: {
        'content-type': 'application/json'
      }
    };
    try {
      const response = await fetch(endpoint, config);
      if (!response.ok) {
        const errorData = await response.json();
        const message = errorData?.message ?? '';
        throw new Error(`Request failed, status: ${response.status}. ${message}`.trim());
      }
      switch (method) {
        case RequestMethod.GET:
          return response.json();
        case RequestMethod.POST:
          /**
           * Since POST usually creates something
           * and returns nothing (or a message) we just parse the text from res.send(msg)
           */
          return response.text();
        default:
          return response.json();
      }
    } catch (e) {
      throw new Error(e.message);
    }
  }

  /**
   * Retrieves all XML fragments from the project's workspace
   *
   * @returns Generic Promise<T>
   */
  async function getFragments() {
    return request(ApiEndpoints.FRAGMENT, RequestMethod.GET);
  }

  /**
   * Writes an XML fragment to the project's workspace
   *
   * @param data Data to be send to the server
   * @returns Generic Promise<T>
   */
  async function writeFragment(data) {
    return request(ApiEndpoints.FRAGMENT, RequestMethod.POST, data);
  }

  /**
   * Retrieves manifest.appdescr_variant from the project's workspace
   *
   * @returns Generic Promise<T>
   */
  async function getManifestAppdescr() {
    return request(ApiEndpoints.MANIFEST_APP_DESCRIPTOR, RequestMethod.GET);
  }

  /**
   * Retrieves all controller extensions from the project's workspace
   *
   * @returns Generic Promise<T>
   */
  async function readControllers() {
    return request(ApiEndpoints.CONTROLLER, RequestMethod.GET);
  }

  /**
   * Writes a Controller to the project's workspace
   *
   * @param data Data to be send to the server
   * @returns Generic Promise<T>
   */
  async function writeController(data) {
    return request(ApiEndpoints.CONTROLLER, RequestMethod.POST, data);
  }

  /**
   * Checks for existing controller in the project's workspace
   *
   * @param controllerName Name of the controller
   * @returns {CodeExtResponse} Returns path to existing controller if found
   */
  async function getExistingController(controllerName) {
    return request(`${ApiEndpoints.CODE_EXT}/${controllerName}`, RequestMethod.GET);
  }

  /**
   * Writes a change object to the project's workspace
   *
   * @param data Data to be send to the server
   * @returns Generic Promise<T>
   */
  async function writeChange(data) {
    return request(ApiEndpoints.CHANGES, RequestMethod.POST, data);
  }
  var __exports = {
    __esModule: true
  };
  __exports.ApiEndpoints = ApiEndpoints;
  __exports.RequestMethod = RequestMethod;
  __exports.request = request;
  __exports.getFragments = getFragments;
  __exports.writeFragment = writeFragment;
  __exports.getManifestAppdescr = getManifestAppdescr;
  __exports.readControllers = readControllers;
  __exports.writeController = writeController;
  __exports.getExistingController = getExistingController;
  __exports.writeChange = writeChange;
  return __exports;
});
//# sourceMappingURL=api-handler.js.map