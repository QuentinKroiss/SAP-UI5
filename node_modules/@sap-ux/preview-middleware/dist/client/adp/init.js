'use strict';
sap.ui.define([
    'sap/base/Log',
    '../cpe/init',
    './init-dialogs',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    'sap/ui/VersionInfo',
    './ui5-version-utils'
], function (log, __init, ___init_dialogs, ___sap_ux_private_control_property_editor_common, VersionInfo, ___ui5_version_utils) {
    'use strict';
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule && typeof obj.default !== 'undefined' ? obj.default : obj;
    }
    function __ui5_require_async(path) {
        return new Promise(function (resolve, reject) {
            sap.ui.require([path], function (module) {
                if (!(module && module.__esModule)) {
                    module = module === null || !(typeof module === 'object' && path.endsWith('/library')) ? { default: module } : module;
                    Object.defineProperty(module, '__esModule', { value: true });
                }
                resolve(module);
            }, function (err) {
                reject(err);
            });
        });
    }
    const init = _interopRequireDefault(__init);
    const initDialogs = ___init_dialogs['initDialogs'];
    const showMessage = ___sap_ux_private_control_property_editor_common['showMessage'];
    const startPostMessageCommunication = ___sap_ux_private_control_property_editor_common['startPostMessageCommunication'];
    const getUI5VersionValidationMessage = ___ui5_version_utils['getUI5VersionValidationMessage'];
    var __exports = async function (rta) {
        const {version} = await VersionInfo.load();
        const versionParts = version.split('.');
        const minor = parseInt(versionParts[1], 10);
        const actionHandlers = [];
        function subscribe(handler) {
            actionHandlers.push(handler);
        }
        const {sendAction} = startPostMessageCommunication(window.parent, async function onAction(action) {
            for (const handler of actionHandlers) {
                try {
                    await handler(action);
                } catch (error) {
                    log.error('Handler Failed: ', error);
                }
            }
        });
        initDialogs(rta);
        if (minor > 77) {
            const ExtensionPointService = (await __ui5_require_async('open/ux/preview/client/adp/extension-point')).default;
            const extPointService = new ExtensionPointService(rta);
            extPointService.init(subscribe);
        }
        init(rta);
        const ui5VersionValidationMsg = getUI5VersionValidationMessage(version);
        if (ui5VersionValidationMsg) {
            sendAction(showMessage(ui5VersionValidationMsg));
        }
        log.debug('ADP init executed.');
    };
    return __exports;
});