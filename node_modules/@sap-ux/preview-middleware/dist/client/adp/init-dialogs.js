"use strict";

sap.ui.define(["sap/ui/core/Fragment", "./controllers/AddFragment.controller", "./controllers/ControllerExtension.controller", "./controllers/ExtensionPoint.controller"], function (Fragment, __AddFragment, __ControllerExtension, __ExtensionPoint) {
  "use strict";

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule && typeof obj.default !== "undefined" ? obj.default : obj;
  }
  const AddFragment = _interopRequireDefault(__AddFragment);
  const ControllerExtension = _interopRequireDefault(__ControllerExtension);
  const ExtensionPoint = _interopRequireDefault(__ExtensionPoint);
  var DialogNames = /*#__PURE__*/function (DialogNames) {
    DialogNames["ADD_FRAGMENT"] = "AddFragment";
    DialogNames["CONTROLLER_EXTENSION"] = "ControllerExtension";
    DialogNames["ADD_FRAGMENT_AT_EXTENSION_POINT"] = "ExtensionPoint";
    return DialogNames;
  }(DialogNames || {});
  /**
   * Adds a new item to the context menu
   *
   * @param rta Runtime Authoring
   */
  const initDialogs = rta => {
    const contextMenu = rta.getDefaultPlugins().contextMenu;
    contextMenu.addMenuItem({
      id: 'ADD_FRAGMENT',
      text: 'Add: Fragment',
      handler: async overlays => await handler(overlays[0], rta, DialogNames.ADD_FRAGMENT),
      icon: 'sap-icon://attachment-html'
    });
    contextMenu.addMenuItem({
      id: 'EXTEND_CONTROLLER',
      text: 'Extend With Controller',
      handler: async overlays => await handler(overlays[0], rta, DialogNames.CONTROLLER_EXTENSION),
      icon: 'sap-icon://create-form'
    });
  };

  /**
   * Handler for new context menu entry
   *
   * @param overlay Control overlays
   * @param rta Runtime Authoring
   * @param dialogName Dialog name
   * @param extensionPointData Control ID
   */
  async function handler(overlay, rta, dialogName, extensionPointData) {
    let controller;
    switch (dialogName) {
      case DialogNames.ADD_FRAGMENT:
        controller = new AddFragment(`open.ux.preview.client.adp.controllers.${dialogName}`, overlay, rta);
        break;
      case DialogNames.CONTROLLER_EXTENSION:
        controller = new ControllerExtension(`open.ux.preview.client.adp.controllers.${dialogName}`, overlay, rta);
        break;
      case DialogNames.ADD_FRAGMENT_AT_EXTENSION_POINT:
        controller = new ExtensionPoint(`open.ux.preview.client.adp.controllers.${dialogName}`, overlay, rta, extensionPointData);
        break;
    }
    const id = dialogName === DialogNames.ADD_FRAGMENT_AT_EXTENSION_POINT ? `dialog--${dialogName}` : undefined;
    const dialog = await Fragment.load({
      name: `open.ux.preview.client.adp.ui.${dialogName}`,
      controller,
      id
    });
    await controller.setup(dialog);
  }
  var __exports = {
    __esModule: true
  };
  __exports.DialogNames = DialogNames;
  __exports.initDialogs = initDialogs;
  __exports.handler = handler;
  return __exports;
});
//# sourceMappingURL=init-dialogs.js.map