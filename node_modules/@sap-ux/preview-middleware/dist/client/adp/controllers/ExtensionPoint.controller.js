"use strict";

sap.ui.define(["sap/m/MessageToast", "sap/ui/model/json/JSONModel", "../api-handler", "./BaseDialog.controller"], function (MessageToast, JSONModel, ___api_handler, __BaseDialog) {
  "use strict";

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule && typeof obj.default !== "undefined" ? obj.default : obj;
  }
  const getFragments = ___api_handler["getFragments"];
  const writeFragment = ___api_handler["writeFragment"];
  const BaseDialog = _interopRequireDefault(__BaseDialog);
  /**
   * @namespace open.ux.preview.client.adp.controllers
   */
  const ExtensionPoint = BaseDialog.extend("open.ux.preview.client.adp.controllers.ExtensionPoint", {
    constructor: function _constructor(name, _overlays, _rta, data) {
      BaseDialog.prototype.constructor.call(this, name);
      this.model = new JSONModel();
      this.data = data;
    },
    setup: async function _setup(dialog) {
      this.dialog = dialog;
      this.setEscapeHandler();
      await this.buildDialogData();
      this.dialog.setModel(this.model);
      this.dialog.open();
    },
    onCreateBtnPress: async function _onCreateBtnPress(event) {
      const source = event.getSource();
      source.setEnabled(false);
      const fragmentName = this.model.getProperty('/newFragmentName');
      await this.createNewFragment(fragmentName);
      this.handleDialogClose();
    },
    onExtensionPointHandler: function _onExtensionPointHandler(event) {
      const source = event.getSource();
      const selectedItem = source.getSelectedItem();
      let extensionPointName = '';
      if (selectedItem) {
        extensionPointName = selectedItem.getText();
      }
      this.model.setProperty('/extensionPointName', extensionPointName);
    },
    buildDialogData: async function _buildDialogData() {
      const name = this.data?.name;
      if (name) {
        const extensionPointList = [{
          key: 0,
          value: name
        }];
        this.updateModel(name, 0, extensionPointList, false);
      } else {
        const extensionPointList = this.data.info.map((v, idx) => {
          return {
            key: idx,
            value: v.name
          };
        });
        const enabled = extensionPointList.length > 1;
        this.updateModel(extensionPointList[0].value, 0, extensionPointList, enabled);
      }
      try {
        const {
          fragments
        } = await getFragments();
        this.model.setProperty('/fragmentList', fragments);
      } catch (e) {
        MessageToast.show(e.message);
        throw new Error(e.message);
      }
    },
    updateModel: function _updateModel(name, key, list, enabled) {
      this.model.setProperty('/extensionPointName', name);
      this.model.setProperty('/extensionPointKey', key);
      this.model.setProperty('/extensionPointList', list);
      this.model.setProperty('/extensionListEnabled', enabled);
    },
    createNewFragment: async function _createNewFragment(fragmentName) {
      try {
        await writeFragment({
          fragmentName
        });
        MessageToast.show(`Fragment with name '${fragmentName}' was created.`);
      } catch (e) {
        // In case of error when creating a new fragment, we should not create a change file
        MessageToast.show(e.message);
        throw new Error(e.message);
      }
      await this.createExtensionPointFragmentChange(fragmentName);
    },
    createExtensionPointFragmentChange: async function _createExtensionPointFragmentChange(fragmentName) {
      const extensionPointName = this.model.getProperty('/extensionPointName');
      const modifiedValue = {
        fragmentPath: `fragments/${fragmentName}.fragment.xml`,
        extensionPointName
      };
      this.data.deferred.resolve(modifiedValue);
    }
  });
  return ExtensionPoint;
});
//# sourceMappingURL=ExtensionPoint.controller.js.map