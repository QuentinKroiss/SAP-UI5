"use strict";

sap.ui.define(["sap/m/MessageToast", "sap/ui/model/json/JSONModel", "sap/ui/dt/OverlayRegistry", "../control-utils", "../command-executor", "../api-handler", "./BaseDialog.controller"], function (MessageToast, JSONModel, OverlayRegistry, __ControlUtils, __CommandExecutor, ___api_handler, __BaseDialog) {
  "use strict";

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule && typeof obj.default !== "undefined" ? obj.default : obj;
  }
  const ControlUtils = _interopRequireDefault(__ControlUtils);
  const CommandExecutor = _interopRequireDefault(__CommandExecutor);
  const getFragments = ___api_handler["getFragments"];
  const writeFragment = ___api_handler["writeFragment"];
  const BaseDialog = _interopRequireDefault(__BaseDialog);
  /**
   * @namespace open.ux.preview.client.adp.controllers
   */
  const AddFragment = BaseDialog.extend("open.ux.preview.client.adp.controllers.AddFragment", {
    constructor: function _constructor(name, overlays, rta) {
      BaseDialog.prototype.constructor.call(this, name);
      this.rta = rta;
      this.overlays = overlays;
      this.model = new JSONModel();
      this.ui5Version = sap.ui.version;
      this.commandExecutor = new CommandExecutor(this.rta);
    },
    setup: async function _setup(dialog) {
      this.dialog = dialog;
      this.setEscapeHandler();
      await this.buildDialogData();
      this.dialog.setModel(this.model);
      this.dialog.open();
    },
    specialIndexHandling: function _specialIndexHandling(specialIndexAggregation) {
      const overlay = OverlayRegistry.getOverlay(this.runtimeControl);
      const aggregations = overlay.getDesignTimeMetadata().getData().aggregations;
      if (specialIndexAggregation in aggregations && 'specialIndexHandling' in aggregations[specialIndexAggregation]) {
        const controlType = this.runtimeControl.getMetadata().getName();
        this.model.setProperty('/indexHandlingFlag', false);
        this.model.setProperty('/specialIndexHandlingIcon', true);
        this.model.setProperty('/iconTooltip', `Index is defined by special logic of ${controlType} and can't be set here`);
      } else {
        this.model.setProperty('/indexHandlingFlag', true);
        this.model.setProperty('/specialIndexHandlingIcon', false);
        this.model.setProperty('/specialIndexHandlingIconPressed', false);
      }
    },
    onAggregationChanged: function _onAggregationChanged(event) {
      const source = event.getSource();
      const selectedKey = source.getSelectedKey();
      const selectedItem = source.getSelectedItem();
      let selectedItemText = '';
      if (selectedItem) {
        selectedItemText = selectedItem.getText();
      }
      this.model.setProperty('/selectedAggregation/key', selectedKey);
      this.model.setProperty('/selectedAggregation/value', selectedItemText);
      let newSelectedControlChildren = Object.keys(ControlUtils.getControlAggregationByName(this.runtimeControl, selectedItemText));
      newSelectedControlChildren = newSelectedControlChildren.map(key => {
        return parseInt(key);
      });
      this.specialIndexHandling(selectedItemText);
      const updatedIndexArray = this.fillIndexArray(newSelectedControlChildren);
      this.model.setProperty('/index', updatedIndexArray);
      this.model.setProperty('/selectedIndex', updatedIndexArray.length - 1);
    },
    onCreateBtnPress: async function _onCreateBtnPress(event) {
      const source = event.getSource();
      source.setEnabled(false);
      const fragmentName = this.model.getProperty('/newFragmentName');
      const index = parseInt(this.model.getProperty('/selectedIndex'));
      const targetAggregation = this.model.getProperty('/selectedAggregation/value');
      const fragmentData = {
        index,
        fragmentName,
        targetAggregation
      };
      await this.createNewFragment(fragmentData);
      this.handleDialogClose();
    },
    buildDialogData: async function _buildDialogData() {
      const selectorId = this.overlays.getId();
      let controlMetadata;
      const overlayControl = sap.ui.getCore().byId(selectorId);
      if (overlayControl) {
        this.runtimeControl = ControlUtils.getRuntimeControl(overlayControl);
        controlMetadata = this.runtimeControl.getMetadata();
      } else {
        throw new Error('Cannot get overlay control');
      }
      const allAggregations = Object.keys(controlMetadata.getAllAggregations());
      const hiddenAggregations = ['customData', 'layoutData', 'dependents'];
      const targetAggregation = allAggregations.filter(item => {
        if (hiddenAggregations.indexOf(item) === -1) {
          return item;
        }
        return false;
      });
      const defaultAggregation = controlMetadata.getDefaultAggregationName();
      const selectedControlName = controlMetadata.getName();
      let selectedControlChildren = Object.keys(ControlUtils.getControlAggregationByName(this.runtimeControl, defaultAggregation));
      selectedControlChildren = selectedControlChildren.map(key => {
        return parseInt(key);
      });
      this.model.setProperty('/selectedControlName', selectedControlName);
      this.model.setProperty('/selectedAggregation', {});
      const indexArray = this.fillIndexArray(selectedControlChildren);
      const controlAggregation = targetAggregation.map((elem, index) => {
        return {
          key: index,
          value: elem
        };
      });
      if (defaultAggregation !== null) {
        controlAggregation.forEach(obj => {
          if (obj.value === defaultAggregation) {
            obj.key = 'default';
            this.model.setProperty('/selectedAggregation/key', obj.key);
            this.model.setProperty('/selectedAggregation/value', obj.value);
            this.specialIndexHandling(obj.value);
          }
        });
      } else {
        this.model.setProperty('/selectedAggregation/key', controlAggregation[0].key);
        this.model.setProperty('/selectedAggregation/value', controlAggregation[0].value);
        this.specialIndexHandling(controlAggregation[0].value);
      }
      try {
        const {
          fragments
        } = await getFragments();
        this.model.setProperty('/fragmentList', fragments);
      } catch (e) {
        MessageToast.show(e.message);
        throw new Error(e.message);
      }
      this.model.setProperty('/selectedIndex', indexArray.length - 1);
      this.model.setProperty('/targetAggregation', controlAggregation);
      this.model.setProperty('/index', indexArray);
    },
    fillIndexArray: function _fillIndexArray(selectedControlChildren) {
      let indexArray = [];
      if (selectedControlChildren.length === 0) {
        indexArray.push({
          key: 0,
          value: 0
        });
      } else {
        indexArray = selectedControlChildren.map((elem, index) => {
          return {
            key: index + 1,
            value: elem + 1
          };
        });
        indexArray.unshift({
          key: 0,
          value: 0
        });
        indexArray.push({
          key: selectedControlChildren.length + 1,
          value: selectedControlChildren.length + 1
        });
      }
      return indexArray;
    },
    createNewFragment: async function _createNewFragment(fragmentData) {
      const {
        fragmentName,
        index,
        targetAggregation
      } = fragmentData;
      try {
        await writeFragment({
          fragmentName
        });
        MessageToast.show(`Fragment with name '${fragmentName}' was created.`);
      } catch (e) {
        // In case of error when creating a new fragment, we should not create a change file
        MessageToast.show(e.message);
        throw new Error(e.message);
      }
      await this.createFragmentChange({
        fragmentName,
        index,
        targetAggregation
      });
    },
    createFragmentChange: async function _createFragmentChange(fragmentData) {
      const {
        fragmentName,
        index,
        targetAggregation
      } = fragmentData;
      const flexSettings = this.rta.getFlexSettings();
      const overlay = OverlayRegistry.getOverlay(this.runtimeControl);
      const designMetadata = overlay.getDesignTimeMetadata();
      const modifiedValue = {
        fragment: `<core:FragmentDefinition xmlns:core='sap.ui.core'></core:FragmentDefinition>`,
        fragmentPath: `fragments/${fragmentName}.fragment.xml`,
        index: index ?? 0,
        targetAggregation: targetAggregation ?? 'content'
      };
      const command = await this.commandExecutor.getCommand(this.runtimeControl, 'addXML', modifiedValue, designMetadata, flexSettings);
      await this.commandExecutor.pushAndExecuteCommand(command);
    }
  });
  return AddFragment;
});
//# sourceMappingURL=AddFragment.controller.js.map