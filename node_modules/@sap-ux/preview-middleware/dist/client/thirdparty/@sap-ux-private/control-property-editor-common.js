sap.ui.define((function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var dist = {};

	var api = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.storageFileChanged = exports.reloadApplication = exports.showMessage = exports.changeStackModified = exports.propertyChangeFailed = exports.propertyChanged = exports.changeProperty = exports.outlineChanged = exports.deletePropertyChanges = exports.addExtensionPoint = exports.selectControl = exports.controlSelected = exports.iconsLoaded = exports.EXTERNAL_ACTION_PREFIX = exports.scenario = exports.CHECKBOX_EDITOR_TYPE = exports.DROPDOWN_EDITOR_TYPE = exports.INPUT_EDITOR_TYPE = exports.STRING_VALUE_TYPE = exports.FLOAT_VALUE_TYPE = exports.INTEGER_VALUE_TYPE = exports.BOOLEAN_VALUE_TYPE = void 0;
		exports.BOOLEAN_VALUE_TYPE = 'boolean';
		exports.INTEGER_VALUE_TYPE = 'integer';
		exports.FLOAT_VALUE_TYPE = 'float';
		exports.STRING_VALUE_TYPE = 'string';
		exports.INPUT_EDITOR_TYPE = 'input';
		exports.DROPDOWN_EDITOR_TYPE = 'dropdown';
		exports.CHECKBOX_EDITOR_TYPE = 'checkbox';
		exports.scenario = {
		    AppVariant: 'APP_VARIANT',
		    VersionedAppVariant: 'VERSIONED_APP_VARIANT',
		    AdaptationProject: 'ADAPTATION_PROJECT',
		    FioriElementsFromScratch: 'FE_FROM_SCRATCH',
		    UiAdaptation: 'UI_ADAPTATION'
		};
		/**
		 * Create matcher.
		 *
		 * @param type action type
		 * @returns (value: { type: unknown } | undefined) => value is Y
		 */
		function createMatcher(type) {
		    return function match(value) {
		        return (value === null || value === void 0 ? void 0 : value.type) === type;
		    };
		}
		/**
		 * Create action factory.
		 *
		 * @param prefix to determine ext action
		 * @returns Function
		 */
		function createActionFactory(prefix) {
		    return function createAction(name) {
		        const actionType = [prefix, name].join(' ');
		        /**
		         *
		         * @param payload action payload
		         * @returns PayloadAction<typeof actionType, T>
		         */
		        function action(payload) {
		            return {
		                type: actionType,
		                payload
		            };
		        }
		        action.type = actionType;
		        action.match = createMatcher(actionType);
		        return action;
		    };
		}
		exports.EXTERNAL_ACTION_PREFIX = '[ext]';
		const createExternalAction = createActionFactory(exports.EXTERNAL_ACTION_PREFIX);
		exports.iconsLoaded = createExternalAction('icons-loaded');
		exports.controlSelected = createExternalAction('control-selected');
		exports.selectControl = createExternalAction('select-control');
		exports.addExtensionPoint = createExternalAction('add-extension-point');
		exports.deletePropertyChanges = createExternalAction('delete-property-changes');
		exports.outlineChanged = createExternalAction('outline-changed');
		exports.changeProperty = createExternalAction('change-property');
		exports.propertyChanged = createExternalAction('property-changed');
		exports.propertyChangeFailed = createExternalAction('change-property-failed');
		exports.changeStackModified = createExternalAction('change-stack-modified');
		exports.showMessage = createExternalAction('show-dialog-message');
		exports.reloadApplication = createExternalAction('reload-application');
		exports.storageFileChanged = createExternalAction('storage-file-changed');
		
	} (api));

	var debounce$1 = {};

	Object.defineProperty(debounce$1, "__esModule", { value: true });
	debounce$1.debounce = void 0;
	/**
	 * Returns a function which calls the callback function only after the specified idle time
	 * Works similar to the Debounce operator from rxjs https://reactivex.io/documentation/operators/debounce.html link.
	 *
	 * @param callback Function to execute
	 * @param delay Idle period in milliseconds after which the callback will be executed
	 * @returns A wrapper function that should be called to invoke the callback function after delay
	 */
	function debounce(callback, delay) {
	    let timerId;
	    return (...args) => {
	        clearTimeout(timerId);
	        timerId = setTimeout(() => {
	            callback(...args);
	        }, delay);
	    };
	}
	debounce$1.debounce = debounce;

	var postMessage = {};

	Object.defineProperty(postMessage, "__esModule", { value: true });
	postMessage.startPostMessageCommunication = void 0;
	const POST_MESSAGE_ACTION_TYPE = 'post-message-action';
	/**
	 * Check if data isPostMessageAction.
	 *
	 * @param data - post message action
	 * @returns data is PostMessageAction<T>
	 */
	function isPostMessageAction(data) {
	    return (data === null || data === void 0 ? void 0 : data.type) === POST_MESSAGE_ACTION_TYPE && typeof (data === null || data === void 0 ? void 0 : data.action) === 'object';
	}
	/**
	 * Method to start post message communication.
	 *
	 * @param target target window
	 * @param onActionHandler action handler
	 * @param logger to log info, default: browser console.
	 * @returns PostMessageCommunication<T>
	 */
	function startPostMessageCommunication(target, onActionHandler, logger = console) {
	    /**
	     * Returns target windows or undefined.
	     *
	     * @returns Window | undefined
	     */
	    function getTarget() {
	        if (typeof target === 'function') {
	            return target();
	        }
	        return target;
	    }
	    /**
	     * Invoke action on post message.
	     *
	     * @param event event
	     */
	    function postMessageListener(event) {
	        const target = getTarget();
	        if (!target || event.origin !== target.origin || event.source !== target) {
	            // Ignore messages from unknown sources
	            return;
	        }
	        if (isPostMessageAction(event.data)) {
	            onActionHandler(event.data.action).catch((error) => logger.error(error));
	        }
	        else {
	            logger.warn(`Unknown message received ${event.data}`);
	        }
	    }
	    function dispose() {
	        window.removeEventListener('message', postMessageListener);
	    }
	    /**
	     * Post message to a give window.
	     *
	     * @param action action payload
	     */
	    function sendAction(action) {
	        const target = getTarget();
	        if (!target) {
	            return;
	        }
	        const message = {
	            type: POST_MESSAGE_ACTION_TYPE,
	            action
	        };
	        target.postMessage(message, target.origin);
	    }
	    window.addEventListener('message', postMessageListener);
	    return {
	        dispose,
	        sendAction
	    };
	}
	postMessage.startPostMessageCommunication = startPostMessageCommunication;

	var telemetry = {};

	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(telemetry, "__esModule", { value: true });
	telemetry.reportTelemetry = telemetry.disableTelemetry = telemetry.enableTelemetry = void 0;
	let enabled = false;
	function enableTelemetry() {
	    enabled = true;
	}
	telemetry.enableTelemetry = enableTelemetry;
	function disableTelemetry() {
	    enabled = false;
	}
	telemetry.disableTelemetry = disableTelemetry;
	/**
	 * Reports telemetry data from Control Property Editor.
	 *
	 * @param data The TelemetryData object, that needs to be reported
	 * @returns {Promise<void>}
	 */
	function reportTelemetry(data) {
	    return __awaiter(this, void 0, void 0, function* () {
	        try {
	            if (enabled) {
	                const requestOptions = {
	                    method: 'POST',
	                    headers: {
	                        Accept: 'application/json',
	                        'Content-Type': 'application/json'
	                    },
	                    body: JSON.stringify(data)
	                };
	                yield fetch('/preview/api/telemetry', requestOptions);
	            }
	        }
	        catch (_error) {
	            // something is wrong with the telemetry service
	            disableTelemetry();
	        }
	    });
	}
	telemetry.reportTelemetry = reportTelemetry;

	var utils = {};

	Object.defineProperty(utils, "__esModule", { value: true });
	utils.FlexChangesEndPoints = utils.convertCamelCaseToPascalCase = void 0;
	const isUpperCase = (code) => code >= 65 && code <= 90;
	const isLowerCase = (code) => code >= 97 && code <= 122;
	const isWordDelimiter = (code) => code === 45 || code === 95 || code === 32; // - or _ or space
	const convertCamelCaseToPascalCase = (text) => {
	    const words = [];
	    let word = '';
	    let lookForUpperCase = true;
	    for (let i = 0; i < text.length; i++) {
	        const character = text[i];
	        if (lookForUpperCase) {
	            // make sure that the first letter is capitalized
	            word += word.length === 0 ? character.toUpperCase() : character;
	            if (isLowerCase(text.charCodeAt(i + 1))) {
	                // First lower case character after upper case character -> switch mode to collect only lower case characters
	                lookForUpperCase = false;
	            }
	            else if (isUpperCase(text.charCodeAt(i + 1)) && isLowerCase(text.charCodeAt(i + 2))) {
	                // Next character is the last uppercase character after a sequence of upper case character -> create an abbreviated word
	                words.push(word);
	                word = '';
	            }
	        }
	        else if (isUpperCase(text.charCodeAt(i))) {
	            // Upper case character indicates the beginning of a new word -> switch mode to detect abbreviated word
	            words.push(word);
	            lookForUpperCase = true;
	            word = character;
	        }
	        else if (isWordDelimiter(text.charCodeAt(i))) {
	            words.push(word);
	            lookForUpperCase = true;
	            word = '';
	        }
	        else {
	            word += character;
	        }
	    }
	    if (word.length) {
	        words.push(word);
	    }
	    return words.join(' ');
	};
	utils.convertCamelCaseToPascalCase = convertCamelCaseToPascalCase;
	var FlexChangesEndPoints;
	(function (FlexChangesEndPoints) {
	    FlexChangesEndPoints["changes"] = "/preview/api/changes";
	})(FlexChangesEndPoints || (utils.FlexChangesEndPoints = FlexChangesEndPoints = {}));

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.disableTelemetry = exports.enableTelemetry = exports.reportTelemetry = exports.startPostMessageCommunication = exports.debounce = void 0;
		__exportStar(api, exports);
		var debounce_1 = debounce$1;
		Object.defineProperty(exports, "debounce", { enumerable: true, get: function () { return debounce_1.debounce; } });
		var post_message_1 = postMessage;
		Object.defineProperty(exports, "startPostMessageCommunication", { enumerable: true, get: function () { return post_message_1.startPostMessageCommunication; } });
		var telemetry_1 = telemetry;
		Object.defineProperty(exports, "reportTelemetry", { enumerable: true, get: function () { return telemetry_1.reportTelemetry; } });
		Object.defineProperty(exports, "enableTelemetry", { enumerable: true, get: function () { return telemetry_1.enableTelemetry; } });
		Object.defineProperty(exports, "disableTelemetry", { enumerable: true, get: function () { return telemetry_1.disableTelemetry; } });
		__exportStar(utils, exports);
		
	} (dist));

	Object.defineProperty(dist, "__" + "esModule", { value: true });

	return dist;

}));
